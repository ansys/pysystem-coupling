# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ansys.api.systemcoupling.v0.solution_pb2 as solution__pb2


class SolutionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Solve = channel.unary_unary(
                '/syc.Solution/Solve',
                request_serializer=solution__pb2.SolveRequest.SerializeToString,
                response_deserializer=solution__pb2.SolveResponse.FromString,
                )
        self.Interrupt = channel.unary_unary(
                '/syc.Solution/Interrupt',
                request_serializer=solution__pb2.InterruptRequest.SerializeToString,
                response_deserializer=solution__pb2.InterruptResponse.FromString,
                )
        self.Abort = channel.unary_unary(
                '/syc.Solution/Abort',
                request_serializer=solution__pb2.AbortRequest.SerializeToString,
                response_deserializer=solution__pb2.AbortResponse.FromString,
                )


class SolutionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Solve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Interrupt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SolutionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Solve': grpc.unary_unary_rpc_method_handler(
                    servicer.Solve,
                    request_deserializer=solution__pb2.SolveRequest.FromString,
                    response_serializer=solution__pb2.SolveResponse.SerializeToString,
            ),
            'Interrupt': grpc.unary_unary_rpc_method_handler(
                    servicer.Interrupt,
                    request_deserializer=solution__pb2.InterruptRequest.FromString,
                    response_serializer=solution__pb2.InterruptResponse.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=solution__pb2.AbortRequest.FromString,
                    response_serializer=solution__pb2.AbortResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'syc.Solution', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Solution(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Solve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/syc.Solution/Solve',
            solution__pb2.SolveRequest.SerializeToString,
            solution__pb2.SolveResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Interrupt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/syc.Solution/Interrupt',
            solution__pb2.InterruptRequest.SerializeToString,
            solution__pb2.InterruptResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/syc.Solution/Abort',
            solution__pb2.AbortRequest.SerializeToString,
            solution__pb2.AbortResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
