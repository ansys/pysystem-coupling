[
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "StrOrIntDictList.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.html#ansyssystemcouplingcoreadaptorimpltypesreal",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Real",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Real",
        "text": "Provides a Real object that represents a real value setting.\nSome Real objects also accept string arguments representing expression\nvalues.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.Real\nReal\nReal\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.html#ansys.systemcoupling.core.adaptor.impl.types.Real",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Real > ansys.systemcoupling.core.adaptor.impl.types.Real > Real",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Real > Real",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.Real(name=None, parent=None)\n\nProvides a Real object that represents a real value setting.\n\nSome Real objects also accept string arguments representing expression\nvalues.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod Integer.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_thermal_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_thermal_data_transfers.html#add_thermal_data_transfers",
        "title": "add_thermal_data_transfers",
        "section": "add_thermal_data_transfers",
        "text": "Bases: Command\nAdds group of data transfers for thermal physics.\nReturns the list of the data transfers created.\nString indicating the name of the interface on which the data transfer\nis to be created.\nThermal data transfer option: ‘Heat Rate’ (default) or\n‘Heat Transfer Coefficient’ (possible for surface-surface transfers).\nParent\nSummary\nsetup_root\n‘root’ object\nadd_thermal_data_transfers\nCommand\npython:str\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_thermal_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_thermal_data_transfers.html#ansys.systemcoupling.core.adaptor.api_25_1.add_thermal_data_transfers.add_thermal_data_transfers",
        "title": "add_thermal_data_transfers > add_thermal_data_transfers > add_thermal_data_transfers",
        "section": "add_thermal_data_transfers > add_thermal_data_transfers",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_thermal_data_transfers.add_thermal_data_transfers(name=None, parent=None)\n\nBases: Command\n\nAdds group of data transfers for thermal physics.\n\nReturns the list of the data transfers created.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface on which the data transfer\nis to be created.\n\noption\n\npython:str, optional\n\nThermal data transfer option: ‘Heat Rate’ (default) or\n‘Heat Transfer Coefficient’ (possible for surface-surface transfers).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_transformation",
        "href": "api/core/settings/_autosummary/api/get_transformation.html#get_transformation",
        "title": "get_transformation",
        "section": "get_transformation",
        "text": "Bases: Command\nGiven an interface and side, returns the resultant transformation, in\nthe form of a Python dictionary and formatted as a DataModel\nreference_frame object. If multiple transformations are applied to the\ninterface side, the composite transformation is returned.\nThis command can only be invoked after the analysis\nis initialized.\nName of the interface\nInterface side. Can be “One” or “Two”.\nParent\nSummary\nsolution_root\n‘root’ object\nget_transformation\nCommand\npython:str\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_transformation",
        "href": "api/core/settings/_autosummary/api/get_transformation.html#ansys.systemcoupling.core.adaptor.api_25_1.get_transformation.get_transformation",
        "title": "get_transformation > get_transformation > get_transformation",
        "section": "get_transformation > get_transformation",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_transformation.get_transformation(name=None, parent=None)\n\nBases: Command\n\nGiven an interface and side, returns the resultant transformation, in\nthe form of a Python dictionary and formatted as a DataModel\nreference_frame object. If multiple transformations are applied to the\ninterface side, the composite transformation is returned.\n\nThis command can only be invoked after the analysis\nis initialized.\n\nParameters\n\ninterface_name\n\npython:str\n\nName of the interface\n\nside\n\npython:str\n\nInterface side. Can be “One” or “Two”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.html#ansyssystemcouplingcoreadaptorimpltypesbase",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Base",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Base",
        "text": "Provides the base class for settings and command objects.\nProxy object.\nSystem Coupling name of this object.\n__init__([name, parent])\nInitialize an instance of the Base class.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.Base\nsycproxy\nobj_name\n__init__\nBase\nset_sycproxy\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.html#ansys.systemcoupling.core.adaptor.impl.types.Base",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Base > ansys.systemcoupling.core.adaptor.impl.types.Base > Base",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Base > Base",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.Base(name=None, parent=None)\n\nProvides the base class for settings and command objects.\n\nAttributes\n\nsycproxy\n\nProxy object.\n\nobj_name\n\nSystem Coupling name of this object.\n\nsyc_name\n\n\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "Integer.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/open",
        "href": "api/core/settings/_autosummary/api/open.html#open",
        "title": "open",
        "section": "open",
        "text": "Bases: Command\nReads the state of a coupled analysis. The state consists of settings to\npopulate the datamodel and results to restart the analysis at the end of\na specified coupling step.\nSettings are stored in a file named Settings.h5. Results files may\ncorrespond either to coupling iterations or coupling steps, depending on\nthe analysis type and the types of participants involved.\nBy default (no arguments provided), this command looks for the SyC\ndirectory in the current  working directory. By default, if multiple\nresults files exist, the most recent one is opened.\nIf given optional arguments, behavior is modified as described below.\nCannot be run after the participants have been started.\nWorking directory containing the SyC subdirectory (and its .h5\nfile(s)) to be read.\nInteger specifying the coupling step at which the coupled analysis is\nrestarted. When used, System Coupling reads the corresponding\nResults_step<#>.h5 file in the specified directory and restarts the\nanalysis at the end of the specified coupling step. When this argument\nis used, System Coupling automatically removes the output files related\nto all later coupling steps. If the files cannot be removed, then\nSystem Coupling generates an exception message instructing you to free\nup the files and reissue the open command with the coupling_step\nargument. If the simulation’s results files are associated with\ncoupling iterations, then System Coupling prints an error message\nindicating this.\nInteger specifying the coupling iteration at which the coupled analysis\nis restarted. When used, System Coupling reads the corresponding\nResults_iter<#>.h5 file in the specified directory and restarts the\nanalysis at the end of the specified coupling iteration. When this\nargument is used, System Coupling automatically removes the output\nfiles related to all later coupling iterations. If the files cannot be\nremoved, then System Coupling generates an exception message\ninstructing you to free up the files and reissue the open command with\nthe coupling_iteration argument. If the simulation’s results files are\nassociated with coupling steps, then System Coupling prints an error\nmessage indicating this.\nParent\nSummary\ncase_root\n‘root’ object\nopen\nCommand\nSyC\npython:str\noptional\nSyC\npython:int\noptional\nResults_step<#>.h5\nopen\ncoupling_step\npython:int\noptional\nResults_iter<#>.h5\nopen\ncoupling_iteration\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/open",
        "href": "api/core/settings/_autosummary/api/open.html#ansys.systemcoupling.core.adaptor.api_25_1.open.open",
        "title": "open > open > open",
        "section": "open > open",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.open.open(name=None, parent=None)\n\nBases: Command\n\nReads the state of a coupled analysis. The state consists of settings to\npopulate the datamodel and results to restart the analysis at the end of\na specified coupling step.\n\nSettings are stored in a file named Settings.h5. Results files may\ncorrespond either to coupling iterations or coupling steps, depending on\nthe analysis type and the types of participants involved.\n\nBy default (no arguments provided), this command looks for the SyC\ndirectory in the current  working directory. By default, if multiple\nresults files exist, the most recent one is opened.\n\nIf given optional arguments, behavior is modified as described below.\n\nCannot be run after the participants have been started.\n\nParameters\n\nfile_path\n\npython:str, optional\n\nWorking directory containing the SyC subdirectory (and its .h5\nfile(s)) to be read.\n\ncoupling_step\n\npython:int, optional\n\nInteger specifying the coupling step at which the coupled analysis is\nrestarted. When used, System Coupling reads the corresponding\nResults_step<#>.h5 file in the specified directory and restarts the\nanalysis at the end of the specified coupling step. When this argument\nis used, System Coupling automatically removes the output files related\nto all later coupling steps. If the files cannot be removed, then\nSystem Coupling generates an exception message instructing you to free\nup the files and reissue the open command with the coupling_step\nargument. If the simulation’s results files are associated with\ncoupling iterations, then System Coupling prints an error message\nindicating this.\n\ncoupling_iteration\n\npython:int, optional\n\nInteger specifying the coupling iteration at which the coupled analysis\nis restarted. When used, System Coupling reads the corresponding\nResults_iter<#>.h5 file in the specified directory and restarts the\nanalysis at the end of the specified coupling iteration. When this\nargument is used, System Coupling automatically removes the output\nfiles related to all later coupling iterations. If the files cannot be\nremoved, then System Coupling generates an exception message\ninstructing you to free up the files and reissue the open command with\nthe coupling_iteration argument. If the simulation’s results files are\nassociated with coupling steps, then System Coupling prints an error\nmessage indicating this.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_flow_boundary_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_flow_boundary_data_transfers.html#add_flow_boundary_data_transfers",
        "title": "add_flow_boundary_data_transfers",
        "section": "add_flow_boundary_data_transfers",
        "text": "Bases: Command\nAdds group of data transfers for flow boundary coupling.\nReturns the list of the data transfers created.\nString indicating the name of the interface on which the data transfer\nis to be created.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_flow_boundary_data_transfers\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_flow_boundary_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_flow_boundary_data_transfers.html#ansys.systemcoupling.core.adaptor.api_25_1.add_flow_boundary_data_transfers.add_flow_boundary_data_transfers",
        "title": "add_flow_boundary_data_transfers > add_flow_boundary_data_transfers > add_flow_boundary_data_transfers",
        "section": "add_flow_boundary_data_transfers > add_flow_boundary_data_transfers",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_flow_boundary_data_transfers.add_flow_boundary_data_transfers(name=None, parent=None)\n\nBases: Command\n\nAdds group of data transfers for flow boundary coupling.\n\nReturns the list of the data transfers created.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface on which the data transfer\nis to be created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "ParticipantSession.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.connect",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.connect.html#connect",
        "title": "connect",
        "section": "connect",
        "text": "Connect to an instance of System Coupling already running in server mode.\nIP address of the system running the System Coupling instance.\nPort on which to connect to System Coupling.\nSession object, providing access to a set up and solve API controlling a\nremote System Coupling instance.\nSession\nconnect\npython:str\npython:int\nansys.systemcoupling.core.session.Session\nSession\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.connect",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.connect.html#ansys.systemcoupling.core.connect",
        "title": "connect > connect > connect",
        "section": "connect > connect",
        "text": "ansys.systemcoupling.core.connect(host, port)\n\nConnect to an instance of System Coupling already running in server mode.\n\nParameters\n\nhost\n\npython:str\n\nIP address of the system running the System Coupling instance.\n\nport\n\npython:int\n\nPort on which to connect to System Coupling.\n\nReturns\n\nansys.systemcoupling.core.session.Session\n\nSession object, providing access to a set up and solve API controlling a\nremote System Coupling instance.\n\nReturn type\n\nSession\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "StrOrIntDictList.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.html#ansyssystemcouplingcoreadaptorimpltypesstrfloatpairlist",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList",
        "text": "Provides a StrFloatPairList object that represents a list of string-float pairs.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList\nStrFloatPairList\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList > ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList > StrFloatPairList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList > StrFloatPairList",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList(name=None, parent=None)\n\nProvides a StrFloatPairList object that represents a list of string-float pairs.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/settings/_autosummary/api/transformation_child",
        "href": "api/core/settings/_autosummary/api/transformation_child.html#transformation_child",
        "title": "transformation_child",
        "section": "transformation_child",
        "text": "Bases: Container\nUse to apply transformations to coupling interface sides to control\npositioning of the geometry.\nSpecifies the type of transformation, Rotation or Translation.\nThe angle of rotation for a rotation transformation.\nThe axis of rotation to be used for a rotation transformation.\n“XAxis” - Rotation is about the x-axis.\n“YAxis” - Rotation is about the y-axis.\n“ZAxis” - Rotation is about the z-axis.\n“UserDefined” - Rotation is about a user defined vector.\nDefine an axis of rotation vector in the UserDefined case.\nParent\nSummary\ntransformation\nUse to apply transformations to coupling interface sides to control\ntransformation_child\nContainer\nRotation\nTranslation\nUserDefined\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/transformation_child",
        "href": "api/core/settings/_autosummary/api/transformation_child.html#ansys.systemcoupling.core.adaptor.api_25_1.transformation_child.transformation_child",
        "title": "transformation_child > transformation_child > transformation_child",
        "section": "transformation_child > transformation_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.transformation_child.transformation_child(name=None, parent=None)\n\nBases: Container\n\nUse to apply transformations to coupling interface sides to control\npositioning of the geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/stabilization",
        "href": "api/core/settings/_autosummary/api/stabilization.html#stabilization",
        "title": "stabilization",
        "section": "stabilization",
        "text": "Bases: Container\nStabilization and Acceleration method.\nAllowed values:\n“ProgramControlled”\n“None”\n“Quasi-Newton”\n“Aitken” (Alpha only)\nControls whether the stabilization for this data transfer is coupled with the global stabilization.\nNumber of pre-stabilization iterations to perform.\nRelaxation factor applied for pre-stabilization iterations.\nControls the maximum number of timesteps to retain.\nControls the maximum number of iterations to retain.\nWeighting factor to use for this data transfer in IQN-ILS.\nControls the maximum number of timesteps to retain.\nValues are interpreted as:\n0 : none\n1 : basic\n2 : advanced\n3 : write matrix files\nWeight factor when multiple transfers are stabilized.\nAllowed values:\n“Constant”\n“Value”\n“Residual”\n“ResidualSum”\n“InverseResidual”\n“InverseResidualSum”\nQR filter tolerance for current step.\nQR filter tolerance for old steps.\nControls how Aitken relaxation factor is initialized at start of new timestep.\nParent\nSummary\ndata_transfer_child\nConfigure data transfers for a coupling interface.\nstabilization\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/stabilization",
        "href": "api/core/settings/_autosummary/api/stabilization.html#ansys.systemcoupling.core.adaptor.api_25_1.stabilization.stabilization",
        "title": "stabilization > stabilization > stabilization",
        "section": "stabilization > stabilization",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.stabilization.stabilization(name=None, parent=None)\n\nBases: Container\n\nStabilization and Acceleration method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.ping",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.ping.html#ping",
        "title": "ping",
        "section": "ping",
        "text": "Simple test that the server is alive and responding.\nbool\nping\nbool\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.ping",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.ping.html#ansys.systemcoupling.core.session.Session.ping",
        "title": "ping > ping > ping",
        "section": "ping > ping",
        "text": "Session.ping()\n\nSimple test that the server is alive and responding.\n\nReturn type\n\nbool\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "NamedContainer.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/record_interactions",
        "href": "api/core/settings/_autosummary/api/record_interactions.html#record_interactions",
        "title": "record_interactions",
        "section": "record_interactions",
        "text": "Bases: Container\n“Controls whether the System Coupling Participant library will record the setup and solution data files for testing and debugging.\nFlag indicating whether participant record scp file.\nFlag indicating whether participant record solution files.\nSet the digital precision of solution variable,1 <= N <= 16..\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nrecord_interactions\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/record_interactions",
        "href": "api/core/settings/_autosummary/api/record_interactions.html#ansys.systemcoupling.core.adaptor.api_25_1.record_interactions.record_interactions",
        "title": "record_interactions > record_interactions > record_interactions",
        "section": "record_interactions > record_interactions",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.record_interactions.record_interactions(name=None, parent=None)\n\nBases: Container\n\n“Controls whether the System Coupling Participant library will record the setup and solution data files for testing and debugging.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "RealList.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.html#ansyssystemcouplingcoreadaptorimpltypesfilename",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Filename",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Filename",
        "text": "Provides a Filename object that represents a file name.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.Filename\nFilename\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.html#ansys.systemcoupling.core.adaptor.impl.types.Filename",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Filename > ansys.systemcoupling.core.adaptor.impl.types.Filename > Filename",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Filename > Filename",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.Filename(name=None, parent=None)\n\nProvides a Filename object that represents a file name.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "examples/00-systemcoupling/index",
        "href": "examples/00-systemcoupling/index.html#coupled-analysis-examples",
        "title": "Coupled analysis examples",
        "section": "Coupled analysis examples",
        "text": "These examples show you how you can use System Coupling capabilities from Python to perform\ncoupled analyses. This includes importing setup data provided by participant solvers, initial\npopulation of the System Coupling datamodel to define the analysis, subsequent modification and\ninterrogation of the data model, and running the System Coupling solver to perform the analysis.\nsphx_glr_examples_00-systemcoupling_fluid_swirl.py\nsphx_glr_examples_00-systemcoupling_heating_tank_fmu_fmu.py\nsphx_glr_examples_00-systemcoupling_oscillating_plate.py\nsphx_glr_examples_00-systemcoupling_turek_hron_fsi2.py\nCoupled analysis examples\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Real.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "Real.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod RealList.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/solve",
        "href": "api/core/settings/_autosummary/api/solve.html#solve",
        "title": "solve",
        "section": "solve",
        "text": "Bases: InjectedCommand\nStarts the participants (if necessary) and solves the coupled analysis. By\ndefault, the solution runs straight through without pause unless stopped by\nan scStop file.\nDisabled when a solution is already in progress.\nFor restarts, the open command must be run before the solve command.\nNote that if the execution_control option for a participant is set to\n“ExternallyManaged”, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\nParent\nSummary\nsolution_root\n‘root’ object\nsolve\nInjectedCommand\nopen\nsolve\nexecution_control\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/solve",
        "href": "api/core/settings/_autosummary/api/solve.html#ansys.systemcoupling.core.adaptor.api_25_1.solve.solve",
        "title": "solve > solve > solve",
        "section": "solve > solve",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.solve.solve(name=None, parent=None)\n\nBases: InjectedCommand\n\nStarts the participants (if necessary) and solves the coupled analysis. By\ndefault, the solution runs straight through without pause unless stopped by\nan scStop file.\n\nDisabled when a solution is already in progress.\n\nFor restarts, the open command must be run before the solve command.\n\nNote that if the execution_control option for a participant is set to\n“ExternallyManaged”, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\n\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/save_snapshot",
        "href": "api/core/settings/_autosummary/api/save_snapshot.html#save_snapshot",
        "title": "save_snapshot",
        "section": "save_snapshot",
        "text": "Bases: Command\nSaves a snapshot of the current state of the simulation. Snapshot will\ncontain all files and directories within the working directory that are\ntracked by System Coupling: the SyC directory and the working directories\nof all loaded participants. Before saving the snapshot, the current\ndatamodel will be saved.\nNote: Snapshot cannot be saved if participants have been started.\nNote: If files required for cosimulation are not stored within the working\ndirectory, then they will not be included in the snapshot.\nName of the snapshot to be saved.\nBoolean argument controlling whether an existing snapshot should be\noverwritten. If True, then an existing snapshot named snapshot_name will\nbe overwritten if it exists. If False (default), then if snapshot_name is\nshared with an existing snapshot, a warning will be written and the\ncommand will return without saving the snapshot.\nParent\nSummary\ncase_root\n‘root’ object\nsave_snapshot\nCommand\npython:str\noptional\nTrue\nsnapshot_name\nFalse\nsnapshot_name\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/save_snapshot",
        "href": "api/core/settings/_autosummary/api/save_snapshot.html#ansys.systemcoupling.core.adaptor.api_25_1.save_snapshot.save_snapshot",
        "title": "save_snapshot > save_snapshot > save_snapshot",
        "section": "save_snapshot > save_snapshot",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.save_snapshot.save_snapshot(name=None, parent=None)\n\nBases: Command\n\nSaves a snapshot of the current state of the simulation. Snapshot will\ncontain all files and directories within the working directory that are\ntracked by System Coupling: the SyC directory and the working directories\nof all loaded participants. Before saving the snapshot, the current\ndatamodel will be saved.\n\nNote: Snapshot cannot be saved if participants have been started.\n\nNote: If files required for cosimulation are not stored within the working\ndirectory, then they will not be included in the snapshot.\n\nParameters\n\nsnapshot_name\n\npython:str\n\nName of the snapshot to be saved.\n\noverwrite_existing\n\nbool, optional\n\nBoolean argument controlling whether an existing snapshot should be\noverwritten. If True, then an existing snapshot named snapshot_name will\nbe overwritten if it exists. If False (default), then if snapshot_name is\nshared with an existing snapshot, a warning will be written and the\ncommand will return without saving the snapshot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod IntegerList.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.html#ansyssystemcouplingcoreadaptorimpltypesboolean",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Boolean",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Boolean",
        "text": "Provides a Boolean object that represents a Boolean value setting.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.Boolean\nBoolean\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Boolean > ansys.systemcoupling.core.adaptor.impl.types.Boolean > Boolean",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Boolean > Boolean",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.Boolean(name=None, parent=None)\n\nProvides a Boolean object that represents a Boolean value setting.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "SettingsBase.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/analysis_control",
        "href": "api/core/settings/_autosummary/api/analysis_control.html#analysis_control",
        "title": "analysis_control",
        "section": "analysis_control",
        "text": "Bases: Container\nConfigure coupling controls.\nAnalysis type.\nAllowed values:\n- “Steady”\n- “Transient”\nOptimizes various controls for a one-way workflow, if the\ndata transfers form a unidirectional graph.\nSet warped face detection tolerance (1e-6 is default value, 1.0 means disabled).\nAllow simultaneous update of independent participants.\nControls which participants are updated simultaneously.\nAllow simultaneous initialization of participants.\nSpecify MPI pause time (in seconds) to wait for other participants to finish solving\nPartitioning algorithm used when participants are running in parallel.\nAllowed values:\n“SharedAllocateMachines” - Participants share both machines and cores.\n“SharedAllocateCores” - Participants share machines but not cores.\n“DistributedAllocateCores” - Participants minimally share cores and machines. (Linux only)\n“DistributedAllocateMachines” - Participants never share cores or machines. (Linux only)\n“Custom” - Custom algorithm.\nControls whether System Coupling will cleanup inflated FMUs at end of analysis.\nExplicitly set whether iterations-only mode is allowed.\nSelect option for target initialization.\nAllow update of Fluent regions at the beginning of a step.\nSelect whether to import the mesh during the analysis initialization.\nSelect whether to import mesh for all defined regions.\nSwitch to bypass Fluent adapter.\nConvert variable-based data transfers to expression transfers.\nWeight factor when multiple transfers are stabilized.\nAllowed values:\n“Off” (default)\n“EveryStep”\n“EveryIteration”\nForce participants serving incremental displacement to solve first.\nForce writing of scs file even if participants are auto-started.\nControls whether System Coupling will check for changes in participant input files.\nControls whether is System Coupling user friendly mapping workflow.\nChild\nSummary\nglobal_stabilization\nGlobal stabilization settings.\napip\nApip-related expert settings.\navoid_data_reconstruction\nControl whether data reconstruction should be done for elemental intensive data.\nunmapped_value_options\nUnmapped value settings.\nautomatic_alignment_options\nAutomatic alignment settings.\nParent\nSummary\nsetup_root\n‘root’ object\nanalysis_control\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/analysis_control",
        "href": "api/core/settings/_autosummary/api/analysis_control.html#ansys.systemcoupling.core.adaptor.api_25_1.analysis_control.analysis_control",
        "title": "analysis_control > analysis_control > analysis_control",
        "section": "analysis_control > analysis_control",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.analysis_control.analysis_control(name=None, parent=None)\n\nBases: Container\n\nConfigure coupling controls.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.String.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "String.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod RealVector.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/properties",
        "href": "api/core/settings/_autosummary/api/properties.html#properties",
        "title": "properties",
        "section": "properties",
        "text": "Bases: Container\nUNDOCUMENTED\nControls whether participant accept new input variables or parameters.\nCoupling participant time integration method (“Implicit” or “Explicit”)\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nproperties\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/properties",
        "href": "api/core/settings/_autosummary/api/properties.html#ansys.systemcoupling.core.adaptor.api_25_1.properties.properties",
        "title": "properties > properties > properties",
        "section": "properties > properties",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.properties.properties(name=None, parent=None)\n\nBases: Container\n\nUNDOCUMENTED\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "InjectedCommand.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "StrFloatPairList.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/setup_root",
        "href": "api/core/settings/_autosummary/api/setup_root.html#setup_root",
        "title": "setup_root",
        "section": "setup_root",
        "text": "Bases: Container\n‘root’ object\nChild\nSummary\nactivate_hidden\nContains settings to control exposure of hidden features.\nlibrary\nContains objects that can be referenced from elsewhere in the data model.\ncoupling_participant\nConfigure a coupling participant.\nanalysis_control\nConfigure coupling controls.\ncoupling_interface\nConfigure a coupling interface.\nsolution_control\nConfigure solution controls.\noutput_control\nConfigure output controls.\nCommand\nSummary\nadd_aerodamping_data_transfers\nAdds data transfer for each specified mode shape.\nadd_data_transfer\nAdds data transfer based on arguments that specify the interface, target\nadd_data_transfer_by_display_names\nImportant: This command is deprecated. To add an interface, use the\nadd_expression_function\nCreates an expression function object in the data model that makes\nadd_flow_boundary_data_transfers\nAdds group of data transfers for flow boundary coupling.\nadd_fsi_data_transfers\nAdds group of data transfers for FSI physics.\nadd_interface\nAdds an interface based on the participant and region names specified\nadd_interface_by_display_names\nImportant: This command is deprecated. To add an interface, use the\nadd_named_expression\nCreates a named expression object in the data model.\nadd_ordered_data_transfers\nAdds data transfer for each ordered pair of variables in an FMU-FMU interface.\nadd_participant\nThis command operates in one of two modes, depending on how it is called.\nadd_reference_frame\nAdd a reference frame to the datamodel\nadd_thermal_data_transfers\nAdds group of data transfers for thermal physics.\nadd_transformation\nAdd a transformation to a reference frame defined in the datamodel\ndelete_transformation\nDelete a transformation from a reference frame\ngenerate_input_file\nGenerates the input journal file for a given Fluent participant.\nget_add_data_transfer_group_commands\nGiven an interface name, returns a list with possible commands\nget_execution_command\nGets the execution command needed to start the specified participant\nget_mode_shape_variables\nGiven an interface name, returns a list of mode shape variables available\nget_region_names_for_participant\nGets all of the specified participant’s regions.\nget_setup_summary\nReturns a string containing a formatted summary of the\nget_status_messages\nProvides information relating to the current state of the analysis setup.\nget_supported_participant_types\nReturns a list of participant types that are supported by System Coupling.\nget_thermal_data_transfer_options\nGiven an interface name, returns a list of available possible options for\nhas_input_file_changed\nGiven the name of a participant, checks whether the input file has changed.\nimport_system_coupling_input_file\nReads the specified System Coupling SCI file and pushes its information\nreload_expression_function_modules\nThis may be called to force a reload of expression function modules\nupdate_participant\nGiven the name of a participant, updates the state of the participant.\nsetup_root\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/setup_root",
        "href": "api/core/settings/_autosummary/api/setup_root.html#ansys.systemcoupling.core.adaptor.api_25_1.setup_root.setup_root",
        "title": "setup_root > setup_root > setup_root",
        "section": "setup_root > setup_root",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.setup_root.setup_root(name=None, parent=None)\n\nBases: Container\n\n‘root’ object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.items",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.items.html#items",
        "title": "items",
        "section": "items",
        "text": "Items.\nitems\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.items",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.items.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.items",
        "title": "items > items > items",
        "section": "items > items",
        "text": "NamedContainer.items()\n\nItems.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "To run PySystemCoupling, you must have a local copy of Ansys System Coupling.\nAlthough System Coupling itself does not need a license, you must have licenses\nfor all Ansys products involved in your coupled analysis.\nPySystemCoupling supports Ansys System Coupling version 2023 R1 and later.\nThe detailed documentation, particularly that in the ref_index_api\nsection, is based on the current official Ansys release at this release of\nPySystemCoupling. This is 2025 R1. Although the majority of it does not change\nbetween releases, you should consult the API documentation for an earlier\napplicable release of PySystemCoupling if you are running with an older System\nCoupling version and want to be sure of the details.\nFor more information on getting a licensed copy of Ansys products, visit\nthe Ansys website.\nGetting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#install-pysystemcoupling",
        "title": "Getting started > Install PySystemCoupling",
        "section": "Install PySystemCoupling",
        "text": "The ansys-systemcoupling-core package currently supports Python 3.10 through\nPython 3.12 on Windows and Linux.\nInstall the latest release from PyPI\nwith this command:\nAlternatively, install the latest version from PySystemCoupling GitHub with this command:\nIf you plan on doing local development of PySystemCoupling with Git,\ninstall the latest ansys-systemcoupling-core package with this code:\nInstall PySystemCoupling\nansys-systemcoupling-core\nansys-systemcoupling-core"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#launch-system-coupling",
        "title": "Getting started > Launch System Coupling",
        "section": "Launch System Coupling",
        "text": "Launch System Coupling from Python using the launch() function:\nSystem Coupling is now active and ready to be used as a service. For information on\nusing the PySystemCoupling interface, see the ref_user_guide.\nLaunch System Coupling\nlaunch()\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#turek-hron-fsi2-benchmark-example",
        "title": "Turek-Hron FSI2 Benchmark Example",
        "section": "Turek-Hron FSI2 Benchmark Example",
        "text": "This example is a version of the Turek-Hron FSI2 case that is\noften used as a benchmark case for System Coupling. This two-way, fluid-structure\ninteraction (FSI) case is based on co-simulation of a transient oscillating\nbeam with surface data transfers.\nAnsys Mechanical APDL (MAPDL) is used to perform a transient structural analysis.\nAnsys Fluent is used to perform a transient fluid-flow analysis.\nSystem Coupling coordinates the coupled solution involving the above products to\nsolve the multiphysics problem via co-simulation.\nProblem description\nAn elastic beam structure is attached to a rigid cylinder. The system\nresides within a fluid filled channel:\nThe flow is laminar with a Reynolds number of Re = 100. The inlet velocity\nhas a parabolic profile with a maximum value of 1.5 \\cdot \\bar{U}, where \\bar{U}\nis the average inlet velocity. The cylinder sits at an offset of 0.05~m to the\nincoming flow, causing an imbalance of surface forces on the elastic beam.\nThe beam and the surrounding fluid are simulated for a few time setps to\nallow an examination of the motion of the beam as it starts vibrating due to\nvortices shedded by the rigid cylinder.\nTurek-Hron FSI2 Benchmark Example"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#import-modules-download-files-launch-products",
        "title": "Turek-Hron FSI2 Benchmark Example > Import modules, download files, launch products",
        "section": "Import modules, download files, launch products",
        "text": "Setting up this example consists of performing imports, downloading\nthe input file, and launching the required products.\nImport modules, download files, launch products"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#perform-required-imports",
        "title": "Turek-Hron FSI2 Benchmark Example > Perform required imports",
        "section": "Perform required imports",
        "text": "Import ansys-systemcoupling-core, ansys-fluent-core and\nansys-mapdl-core and other required packages.\nPerform required imports\nansys-systemcoupling-core\nansys-fluent-core\nansys-mapdl-core"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#download-the-input-file",
        "title": "Turek-Hron FSI2 Benchmark Example > Download the input file",
        "section": "Download the input file",
        "text": "This example uses one pre-created file - a Fluent mesh file that contains\nthe fluids mesh and named zones.\nDownload the input file"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#launch-products",
        "title": "Turek-Hron FSI2 Benchmark Example > Launch products",
        "section": "Launch products",
        "text": "Launch instances of the Mechanical APDL, Fluent, and System Coupling\nand return client (session) objects that allow you to interact with\nthese products via APIs exposed into the current Python environment.\nLaunch products"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#setup-mechanical-apdl-fluent-and-system-coupling-analyses",
        "title": "Turek-Hron FSI2 Benchmark Example > Setup Mechanical APDL, Fluent, and System Coupling analyses",
        "section": "Setup Mechanical APDL, Fluent, and System Coupling analyses",
        "text": "The setup consists of setting up the structural analysis,\nthe fluids analysis, and the coupled analysis.\nSetup Mechanical APDL, Fluent, and System Coupling analyses"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#define-constants",
        "title": "Turek-Hron FSI2 Benchmark Example > Define constants",
        "section": "Define constants",
        "text": "Define constants"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#clear-cache",
        "title": "Turek-Hron FSI2 Benchmark Example > Clear cache",
        "section": "Clear cache",
        "text": "Clear cache"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#enter-mechancal-apdl-setup",
        "title": "Turek-Hron FSI2 Benchmark Example > Enter Mechancal APDL setup",
        "section": "Enter Mechancal APDL setup",
        "text": "Enter Mechancal APDL setup"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#read-the-cdb-file",
        "title": "Turek-Hron FSI2 Benchmark Example > Read the CDB file",
        "section": "Read the CDB file",
        "text": "Read the CDB file"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#define-material-properties",
        "title": "Turek-Hron FSI2 Benchmark Example > Define material properties.",
        "section": "Define material properties.",
        "text": "Define material properties."
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#mechanical-solver-setup",
        "title": "Turek-Hron FSI2 Benchmark Example > Mechanical solver setup",
        "section": "Mechanical solver setup",
        "text": "Mechanical solver setup"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#set-up-the-fluid-analysis",
        "title": "Turek-Hron FSI2 Benchmark Example > Set up the fluid analysis",
        "section": "Set up the fluid analysis",
        "text": "Read the pre-created mesh file\nSet up the fluid analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#define-fluids-general-solver-settings",
        "title": "Turek-Hron FSI2 Benchmark Example > Define fluids general solver settings",
        "section": "Define fluids general solver settings",
        "text": "Define fluids general solver settings"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#define-the-fluid-and-update-the-material-properties",
        "title": "Turek-Hron FSI2 Benchmark Example > Define the fluid and update the material properties",
        "section": "Define the fluid and update the material properties",
        "text": "Define the fluid and update the material properties"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#create-the-parabolic-inlet-profile-as-a-named-expression",
        "title": "Turek-Hron FSI2 Benchmark Example > Create the parabolic inlet profile as a named expression",
        "section": "Create the parabolic inlet profile as a named expression",
        "text": "Create the parabolic inlet profile as a named expression"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#update-the-inlet-field",
        "title": "Turek-Hron FSI2 Benchmark Example > Update the inlet field",
        "section": "Update the inlet field",
        "text": "Update the inlet field"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#setup-any-relevant-solution-controls",
        "title": "Turek-Hron FSI2 Benchmark Example > Setup any relevant solution controls",
        "section": "Setup any relevant solution controls",
        "text": "Setup any relevant solution controls"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#initialize-the-flow-field--run-a-steady-simulation",
        "title": "Turek-Hron FSI2 Benchmark Example > Initialize the flow field & run a steady simulation",
        "section": "Initialize the flow field & run a steady simulation",
        "text": "First, a steady simulation is conducted to initialize the\nflow field with the parabolic inlet flow.\nInitialize the flow field & run a steady simulation"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#switch-to-transient-mode-and-prepare-for-coupling",
        "title": "Turek-Hron FSI2 Benchmark Example > Switch to transient mode and prepare for coupling",
        "section": "Switch to transient mode and prepare for coupling",
        "text": "Switch to transient mode and prepare for coupling"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#define-dynamic-meshing",
        "title": "Turek-Hron FSI2 Benchmark Example > Define dynamic meshing",
        "section": "Define dynamic meshing",
        "text": "Define dynamic meshing for deforming symmetry planes.\nCurrently, dynamic_mesh is not exposed to the fluent root\nsession directly. We need to use the tui framework to create\ndynamic zones.\nDefine dynamic meshing"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#results-and-output-controls",
        "title": "Turek-Hron FSI2 Benchmark Example > Results and output controls",
        "section": "Results and output controls",
        "text": "Define number of sub-steps fluent iterates for each coupling step.\nMaximum integration time and total steps are controlled by\nsystem coupling.\nResults and output controls"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#set-up-the-coupled-analysis",
        "title": "Turek-Hron FSI2 Benchmark Example > Set up the coupled analysis",
        "section": "Set up the coupled analysis",
        "text": "System Coupling setup involves adding the structural and fluid\nparticipants, adding coupled interfaces and data transfers,\nand setting other coupled analysis properties.\nSet up the coupled analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#add-participants",
        "title": "Turek-Hron FSI2 Benchmark Example > Add participants",
        "section": "Add participants",
        "text": "Add participants by passing session handles to System Coupling.\nAdd participants"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#setup-the-interface-and-data-transfers",
        "title": "Turek-Hron FSI2 Benchmark Example > Setup the interface and data transfers",
        "section": "Setup the interface and data transfers",
        "text": "Add a coupling interface and data transfers.\nTime step size, end time, output controls\nSetup the interface and data transfers"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#solve-the-coupled-system",
        "title": "Turek-Hron FSI2 Benchmark Example > Solve the coupled system",
        "section": "Solve the coupled system",
        "text": "Solve the coupled system"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#postprocessing",
        "title": "Turek-Hron FSI2 Benchmark Example > Postprocessing",
        "section": "Postprocessing",
        "text": "Postprocessing"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#postprocess-the-structural-results",
        "title": "Turek-Hron FSI2 Benchmark Example > Postprocess the structural results",
        "section": "Postprocess the structural results",
        "text": "Postprocess the structural results"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#postprocess-the-fluids-results",
        "title": "Turek-Hron FSI2 Benchmark Example > Postprocess the fluids results",
        "section": "Postprocess the fluids results",
        "text": "use_window_resolution option not active inside containers or Ansys Lab environment\nPostprocess the fluids results"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#exit",
        "title": "Turek-Hron FSI2 Benchmark Example > Exit",
        "section": "Exit",
        "text": "Exit"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#note",
        "title": "Turek-Hron FSI2 Benchmark Example > Note",
        "section": "Note",
        "text": "The results shown in this example are for illustrative purposes only.\nTo get similar results, you may need to run the simulation with an end_time equal to 15[s].\nRefer to the section time step size, end time, output controls section to update the end time.\nNote"
    },
    {
        "objectID": "examples/00-systemcoupling/turek_hron_fsi2",
        "href": "examples/00-systemcoupling/turek_hron_fsi2.html#references",
        "title": "Turek-Hron FSI2 Benchmark Example > References",
        "section": "References",
        "text": "[1]. Turek, S., & Hron, J. (2006). Proposal for numerical benchmarking of fluid-structure\ninteraction between an elastic object and laminar incompressible flow (pp. 371-385).\nSpringer Berlin Heidelberg.\nTotal running time of the script: (2 minutes 23.926 seconds)\nDownload Jupyter notebook: turek_hron_fsi2.ipynb\nDownload Python source code: turek_hron_fsi2.py\nDownload zipped: turek_hron_fsi2.zip\nGallery generated by Sphinx-Gallery\nReferences\nDownload Jupyter notebook: turek_hron_fsi2.ipynb\nDownload Python source code: turek_hron_fsi2.py\nDownload zipped: turek_hron_fsi2.zip\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.html#ansyssystemcouplingcoreadaptorimpltypesinjectedcommand",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand",
        "text": "Provides a base class for calling a locally defined function that has\nbeen injected into the generated API hierarchy so that it appears alongside\nthe generic commands.\nThis class can also be used to override an existing API command with a local\nversion. In this case the syc_name refers to the remote\nSystem Coupling command name. If the command is not an override, the\nsyc_name is the same as the local function name.\nIn all cases, the cmd_name attribute that is specific to this class\nis set and used as the definitive name to call on the proxy interface.\n__init__([name, parent])\nInitialize an instance of the Base class.\nset_sycproxy(sycproxy)\nSet sycproxy object.\ncmd_name\n\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.InjectedCommand\nsyc_name\nsyc_name\ncmd_name\n__init__\nBase\nset_sycproxy\ncmd_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.html#ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand > ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand > InjectedCommand",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand > InjectedCommand",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand(name=None, parent=None)\n\nProvides a base class for calling a locally defined function that has\nbeen injected into the generated API hierarchy so that it appears alongside\nthe generic commands.\n\nThis class can also be used to override an existing API command with a local\nversion. In this case the syc_name refers to the remote\nSystem Coupling command name. If the command is not an override, the\nsyc_name is the same as the local function name.\n\nIn all cases, the cmd_name attribute that is specific to this class\nis set and used as the definitive name to call on the proxy interface.\n\nAttributes\n\ncmd_name\n\n\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n\n\nAttributes\n\n\n\n\n\n\n\ncmd_name\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod IntegerList.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.String.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "String.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "StringList.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/update_control",
        "href": "api/core/settings/_autosummary/api/update_control.html#update_control",
        "title": "update_control",
        "section": "update_control",
        "text": "Bases: Container\nConfigure update controls.\nSpecifies how often the participant will perform updates.\nPossible values:\n“ProgramControlled”\n“EveryIteration”\n“StepInterval”\n“Suspended”\nSpecify update frequency.\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nupdate_control\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/update_control",
        "href": "api/core/settings/_autosummary/api/update_control.html#ansys.systemcoupling.core.adaptor.api_25_1.update_control.update_control",
        "title": "update_control > update_control > update_control",
        "section": "update_control > update_control",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.update_control.update_control(name=None, parent=None)\n\nBases: Container\n\nConfigure update controls.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "ParticipantSession.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.InjectedCommand.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod InjectedCommand.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/launching",
        "href": "api/core/launching.html#launch-and-connect-functions",
        "title": "Launch and connect functions",
        "section": "Launch and connect functions",
        "text": "These functions provide for starting and connecting to a local instance\nof System Coupling.\nlaunch(*[, port, working_dir, nprocs, ...])\nStart a local instance of System Coupling and connect to it.\nconnect(host, port)\nConnect to an instance of System Coupling already running in server mode.\nLaunch and connect functions\nlaunch\nconnect\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.html#ansyssystemcouplingcoreadaptorimpltypesinteger",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Integer",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Integer",
        "text": "Provides an Integer object that represents an integer value setting.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.Integer\nInteger\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.html#ansys.systemcoupling.core.adaptor.impl.types.Integer",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Integer > ansys.systemcoupling.core.adaptor.impl.types.Integer > Integer",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Integer > Integer",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.Integer(name=None, parent=None)\n\nProvides an Integer object that represents an integer value setting.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod StrOrIntDictListDict.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_status_messages",
        "href": "api/core/settings/_autosummary/api/get_status_messages.html#get_status_messages",
        "title": "get_status_messages",
        "section": "get_status_messages",
        "text": "Bases: InjectedCommand\nProvides information relating to the current state of the analysis setup.\nThe return value is a list of dictionaries. Each dictionary holds a\nsingle message about the setup status, along with some associated information.\nThe dictionary has string-valued fields: \"message\", \"level\",\nand \"path\".\nThe \"message\" field is the actual text of the message.\nIn the current release, generated messages have not been adapted to\nthe PySystemCoupling environment and may use naming and terminology that\nis native to the System Coupling application and its own command line\ninterface.\nBecause there is generally a straightforward mapping to the PySystemCoupling\nexposure of settings and so on, the messages should not be difficult\nto interpret. Nevertheless, the get_status_messages method should\nbe regarded as beta functionality in the current release.\nThe \"level\" field provides information about the severity or nature of the\nmessage. Possible values are \"Error\", \"Warning\", \"Information\",\n\"Alpha\", and \"Beta\". \"Alpha\" and \"Beta\" indicate settings related\nto activated alpha or beta features.\nIt is not possible to solve an analysis that has any issues at the \"Error\"\nseverity level. An attempt to invoke the solve command while there are\nany errors results in an immediate failure.\nIf the \"path\" field is set, it contains a string representation of the path\nto the setting to which the message pertains. This is given in the form of\nchained Python attribute accesses starting from the setup attribute.\nThus, if an issue were detected that is specific to the absolute_gap_tolerance\nsetting in a particular coupling interface, a \"path\" such as the following would\nbe provided:\n'coupling_interface[\"Interface-1\"].mapping_control.absolute_gap_tolerance'\nParent\nSummary\nsetup_root\n‘root’ object\nget_status_messages\nInjectedCommand\n\"message\"\n\"level\"\n\"path\"\n\"message\"\nget_status_messages\n\"level\"\n\"Error\"\n\"Warning\"\n\"Information\"\n\"Alpha\"\n\"Beta\"\n\"Alpha\"\n\"Beta\"\n\"Error\"\nsolve\n\"path\"\nsetup\nabsolute_gap_tolerance\n\"path\"\n'coupling_interface[\"Interface-1\"].mapping_control.absolute_gap_tolerance'\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_status_messages",
        "href": "api/core/settings/_autosummary/api/get_status_messages.html#ansys.systemcoupling.core.adaptor.api_25_1.get_status_messages.get_status_messages",
        "title": "get_status_messages > get_status_messages > get_status_messages",
        "section": "get_status_messages > get_status_messages",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_status_messages.get_status_messages(name=None, parent=None)\n\nBases: InjectedCommand\n\nProvides information relating to the current state of the analysis setup.\n\nThe return value is a list of dictionaries. Each dictionary holds a\nsingle message about the setup status, along with some associated information.\nThe dictionary has string-valued fields: \"message\", \"level\",\nand \"path\".\n\nThe \"message\" field is the actual text of the message.\n\nIn the current release, generated messages have not been adapted to\nthe PySystemCoupling environment and may use naming and terminology that\nis native to the System Coupling application and its own command line\ninterface.\n\nBecause there is generally a straightforward mapping to the PySystemCoupling\nexposure of settings and so on, the messages should not be difficult\nto interpret. Nevertheless, the get_status_messages method should\nbe regarded as beta functionality in the current release.\n\nThe \"level\" field provides information about the severity or nature of the\nmessage. Possible values are \"Error\", \"Warning\", \"Information\",\n\"Alpha\", and \"Beta\". \"Alpha\" and \"Beta\" indicate settings related\nto activated alpha or beta features.\n\nIt is not possible to solve an analysis that has any issues at the \"Error\"\nseverity level. An attempt to invoke the solve command while there are\nany errors results in an immediate failure.\n\nIf the \"path\" field is set, it contains a string representation of the path\nto the setting to which the message pertains. This is given in the form of\nchained Python attribute accesses starting from the setup attribute.\n\nThus, if an issue were detected that is specific to the absolute_gap_tolerance\nsetting in a particular coupling interface, a \"path\" such as the following would\nbe provided:\n\n'coupling_interface[\"Interface-1\"].mapping_control.absolute_gap_tolerance'\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "IntegerList.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/fluent_input",
        "href": "api/core/settings/_autosummary/api/fluent_input.html#fluent_input",
        "title": "fluent_input",
        "section": "fluent_input",
        "text": "Bases: Container\nFluent input.\nType of solver input file(s) to be used for the Fluent run.\nAllowed values:\n“InitialCaseFile” - (Default) A case file will be defined as a\nsolver input for the coupled analysis run.\n“InitialCaseAndDataFile” - A Fluent case file and data file\nwill be defined as solver inputs for the coupled analysis run.\n“JournalFile” - A journal file will be defined as the solver\ninput for the coupled analysis run.\nSet Fluent initial case file.\nSet Fluent initial data file.\nSet Fluent autosave frequency to System Coupling output control frequency to generate .flprj file.\nSet Fluent journal file.\nParent\nSummary\nexecution_control\nConfigure execution control for a coupling participant.\nfluent_input\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/fluent_input",
        "href": "api/core/settings/_autosummary/api/fluent_input.html#ansys.systemcoupling.core.adaptor.api_25_1.fluent_input.fluent_input",
        "title": "fluent_input > fluent_input > fluent_input",
        "section": "fluent_input > fluent_input",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.fluent_input.fluent_input(name=None, parent=None)\n\nBases: Container\n\nFluent input.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_thermal_data_transfer_options",
        "href": "api/core/settings/_autosummary/api/get_thermal_data_transfer_options.html#get_thermal_data_transfer_options",
        "title": "get_thermal_data_transfer_options",
        "section": "get_thermal_data_transfer_options",
        "text": "Bases: Command\nGiven an interface name, returns a list of available possible options for\nadd_thermal_data_transfers given the context, and whether those\ndata transfers are actually available. When only one option is conceptually\npossible (e.g., not a surface-surface transfer), the returned dictionary is\nempty.\nString indicating the name of the interface.\nParent\nSummary\nsetup_root\n‘root’ object\nget_thermal_data_transfer_options\nCommand\nadd_thermal_data_transfers\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_thermal_data_transfer_options",
        "href": "api/core/settings/_autosummary/api/get_thermal_data_transfer_options.html#ansys.systemcoupling.core.adaptor.api_25_1.get_thermal_data_transfer_options.get_thermal_data_transfer_options",
        "title": "get_thermal_data_transfer_options > get_thermal_data_transfer_options > get_thermal_data_transfer_options",
        "section": "get_thermal_data_transfer_options > get_thermal_data_transfer_options",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_thermal_data_transfer_options.get_thermal_data_transfer_options(name=None, parent=None)\n\nBases: Command\n\nGiven an interface name, returns a list of available possible options for\nadd_thermal_data_transfers given the context, and whether those\ndata transfers are actually available. When only one option is conceptually\npossible (e.g., not a surface-surface transfer), the returned dictionary is\nempty.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with the native System Coupling names.\nto_syc_keys\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod NamedContainer.to_syc_keys(value)\n\nConvert value to have keys with the native System Coupling names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.String.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod String.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod Boolean.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/dimensionality",
        "href": "api/core/settings/_autosummary/api/dimensionality.html#dimensionality",
        "title": "dimensionality",
        "section": "dimensionality",
        "text": "Bases: Container\nConfigure attribute dimensionality.\nExponent of length dimension.\nExponent of time dimension.\nExponent of mass dimension.\nExponent of temperature dimension.\nExponent of amount of substance dimension.\nExponent of electric current dimension.\nExponent of luminous intensity dimension.\nExponent of angle dimension.\nParent\nSummary\nattribute_child\nConfigure a variable’s attributes.\ndimensionality\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/dimensionality",
        "href": "api/core/settings/_autosummary/api/dimensionality.html#ansys.systemcoupling.core.adaptor.api_25_1.dimensionality.dimensionality",
        "title": "dimensionality > dimensionality > dimensionality",
        "section": "dimensionality > dimensionality",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.dimensionality.dimensionality(name=None, parent=None)\n\nBases: Container\n\nConfigure attribute dimensionality.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "StrOrIntDictListDict.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/step",
        "href": "api/core/settings/_autosummary/api/step.html#step",
        "title": "step",
        "section": "step",
        "text": "Bases: Command\nInteractive command that initializes the analysis (if necessary) and\nruns the specified number of coupling steps before pausing the coupled\nanalysis.\nDisabled when a solution is already in progress.\nDisabled for iterations-only steady analyses.\nBy default, runs a single step. If given the optional count argument,\nthen runs the specified number of steps.\nFor restarts, the open command must be run before the step command.\nWhen you run this command, System Coupling initializes the analysis if\nneeded and then begins the solution. When the specified number of coupling\nsteps has been run, the solution is paused, providing you with an\nopportunity to interact with the analysis.\nNote that if the execution_control option for a participant is set to\nExternallyManaged, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\nWhen the solution is resumed, either by reissuing this command or by\nrunning the solve command, System Coupling restarts the analysis at the\npoint it left off and continues the solution with the next step.\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\nInteger specifying the number of steps to be run. Defaults to 1.\nParent\nSummary\nsolution_root\n‘root’ object\nstep\nCommand\ncount\nopen\nstep\nexecution_control\nsolve\npython:int\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/step",
        "href": "api/core/settings/_autosummary/api/step.html#ansys.systemcoupling.core.adaptor.api_25_1.step.step",
        "title": "step > step > step",
        "section": "step > step",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.step.step(name=None, parent=None)\n\nBases: Command\n\nInteractive command that initializes the analysis (if necessary) and\nruns the specified number of coupling steps before pausing the coupled\nanalysis.\n\nDisabled when a solution is already in progress.\n\nDisabled for iterations-only steady analyses.\n\nBy default, runs a single step. If given the optional count argument,\nthen runs the specified number of steps.\n\nFor restarts, the open command must be run before the step command.\n\nWhen you run this command, System Coupling initializes the analysis if\nneeded and then begins the solution. When the specified number of coupling\nsteps has been run, the solution is paused, providing you with an\nopportunity to interact with the analysis.\n\nNote that if the execution_control option for a participant is set to\nExternallyManaged, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\n\nWhen the solution is resumed, either by reissuing this command or by\nrunning the solve command, System Coupling restarts the analysis at the\npoint it left off and continues the solution with the next step.\n\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\n\nParameters\n\ncount\n\npython:int, optional\n\nInteger specifying the number of steps to be run. Defaults to 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "RealVector.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/start_participants",
        "href": "api/core/settings/_autosummary/api/start_participants.html#start_participants",
        "title": "start_participants",
        "section": "start_participants",
        "text": "Bases: Command\nImportant: This command is deprecated. Consider adopting workflows\nwhere participants are started by another method, such as the initialize,\nstep, or solve commands.\nInteractive command that reads the participants’ System Coupling\nParticipant setup files (SCP) and starts participants on separate\nsub-processes. By default, automatically starts all participants and blocks\nsolution progress until all participants are connected.\nIf omitted and the solve, initialize, or step command is issued, then\nparticipants are started automatically during the execution of the command.\nNote that if the execution_control option for a participant is set to\nExternallyManaged, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\nThis argument has been deprecated and will be removed in future releases.\nParent\nSummary\nsolution_root\n‘root’ object\nstart_participants\nCommand\ninitialize\nstep\nsolve\nsolve\ninitialize\nstep\nexecution_control\nList\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/start_participants",
        "href": "api/core/settings/_autosummary/api/start_participants.html#ansys.systemcoupling.core.adaptor.api_25_1.start_participants.start_participants",
        "title": "start_participants > start_participants > start_participants",
        "section": "start_participants > start_participants",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.start_participants.start_participants(name=None, parent=None)\n\nBases: Command\n\nImportant: This command is deprecated. Consider adopting workflows\nwhere participants are started by another method, such as the initialize,\nstep, or solve commands.\n\nInteractive command that reads the participants’ System Coupling\nParticipant setup files (SCP) and starts participants on separate\nsub-processes. By default, automatically starts all participants and blocks\nsolution progress until all participants are connected.\n\nIf omitted and the solve, initialize, or step command is issued, then\nparticipants are started automatically during the execution of the command.\n\nNote that if the execution_control option for a participant is set to\nExternallyManaged, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\n\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\n\nParameters\n\nparticipant_names\n\nList, optional\n\nThis argument has been deprecated and will be removed in future releases.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "RealVector.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression_function_child",
        "href": "api/core/settings/_autosummary/api/expression_function_child.html#expression_function_child",
        "title": "expression_function_child",
        "section": "expression_function_child",
        "text": "Bases: Container\nMakes an external Python function accessible from expressions.\nName of the Python module that exports the function.\nName of the function in the module.\nName to use when referencing the function in an expression.\nParent\nSummary\nexpression_function\nMakes an external Python function accessible from expressions.\nexpression_function_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression_function_child",
        "href": "api/core/settings/_autosummary/api/expression_function_child.html#ansys.systemcoupling.core.adaptor.api_25_1.expression_function_child.expression_function_child",
        "title": "expression_function_child > expression_function_child > expression_function_child",
        "section": "expression_function_child > expression_function_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.expression_function_child.expression_function_child(name=None, parent=None)\n\nBases: Container\n\nMakes an external Python function accessible from expressions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod Boolean.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python property name to native System Coupling name.\nThe name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod Container.to_syc_name(name)\n\nConvert Python property name to native System Coupling name.\n\nThe name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod RealVector.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/side_child",
        "href": "api/core/settings/_autosummary/api/side_child.html#side_child",
        "title": "side_child",
        "section": "side_child",
        "text": "Bases: Container\nConfigure one side of a coupling interface.\nName of the participant on this interface side.\nList of participant regions involved in this interface side.\nReference frame of this side.\nInstancing name for this side (leave unset if not required).\nParent\nSummary\nside\nConfigure one side of a coupling interface.\nside_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/side_child",
        "href": "api/core/settings/_autosummary/api/side_child.html#ansys.systemcoupling.core.adaptor.api_25_1.side_child.side_child",
        "title": "side_child > side_child > side_child",
        "section": "side_child > side_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.side_child.side_child(name=None, parent=None)\n\nBases: Container\n\nConfigure one side of a coupling interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod StrOrIntDictListDict.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/case",
        "href": "api/core/adaptor/case.html#case-persistence-commands",
        "title": "Case persistence commands",
        "section": "Case persistence commands",
        "text": "Case persistence commands are made available in the case\nattribute on the Session class. This attribute exposes System Coupling’s\ncommands related to analysis case management and persistence.\nFor more information, see the case_root class.\nCase persistence commands\ncase\nSession\ncase_root\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "Filename.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod BooleanList.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod Boolean.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_execution_command",
        "href": "api/core/settings/_autosummary/api/get_execution_command.html#get_execution_command",
        "title": "get_execution_command",
        "section": "get_execution_command",
        "text": "Bases: Command\nGets the execution command needed to start the specified participant\nName of the participant for which the execution command will\nbe returned.\nParent\nSummary\nsetup_root\n‘root’ object\nget_execution_command\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_execution_command",
        "href": "api/core/settings/_autosummary/api/get_execution_command.html#ansys.systemcoupling.core.adaptor.api_25_1.get_execution_command.get_execution_command",
        "title": "get_execution_command > get_execution_command > get_execution_command",
        "section": "get_execution_command > get_execution_command",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_execution_command.get_execution_command(name=None, parent=None)\n\nBases: Command\n\nGets the execution command needed to start the specified participant\n\nParameters\n\nparticipant_name\n\npython:str\n\nName of the participant for which the execution command will\nbe returned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod ParticipantSession.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/activate_hidden",
        "href": "api/core/settings/_autosummary/api/activate_hidden.html#activate_hidden",
        "title": "activate_hidden",
        "section": "activate_hidden",
        "text": "Bases: Container\nContains settings to control exposure of hidden features.\nTurn on exposure of Beta features.\nTurn on exposure of Alpha features. (Beta features must be turned on first)\nAllow a case with zero participants and zero coupling interfaces to be set up.\nParent\nSummary\nsetup_root\n‘root’ object\nactivate_hidden\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/activate_hidden",
        "href": "api/core/settings/_autosummary/api/activate_hidden.html#ansys.systemcoupling.core.adaptor.api_25_1.activate_hidden.activate_hidden",
        "title": "activate_hidden > activate_hidden > activate_hidden",
        "section": "activate_hidden > activate_hidden",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.activate_hidden.activate_hidden(name=None, parent=None)\n\nBases: Container\n\nContains settings to control exposure of hidden features.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/open_snapshot",
        "href": "api/core/settings/_autosummary/api/open_snapshot.html#open_snapshot",
        "title": "open_snapshot",
        "section": "open_snapshot",
        "text": "Bases: Command\nOpens a snapshot containing a previously saved state of the simulation.\nAll state (files and directories) stored in the snapshot will be restored.\nIf other state exists in the working directory, then it will not be\nmodified by this command.\nNote: Snapshot cannot be opened if participants have been started.\nThe name of the snapshot to be opened. This is optional if and only if\nthere is only one snapshot available to be loaded. If multiple\nsnapshots exist, then the snapshot name must be specified.\nParent\nSummary\ncase_root\n‘root’ object\nopen_snapshot\nCommand\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/open_snapshot",
        "href": "api/core/settings/_autosummary/api/open_snapshot.html#ansys.systemcoupling.core.adaptor.api_25_1.open_snapshot.open_snapshot",
        "title": "open_snapshot > open_snapshot > open_snapshot",
        "section": "open_snapshot > open_snapshot",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.open_snapshot.open_snapshot(name=None, parent=None)\n\nBases: Command\n\nOpens a snapshot containing a previously saved state of the simulation.\nAll state (files and directories) stored in the snapshot will be restored.\nIf other state exists in the working directory, then it will not be\nmodified by this command.\n\nNote: Snapshot cannot be opened if participants have been started.\n\nParameters\n\nsnapshot_name\n\npython:str, optional\n\nThe name of the snapshot to be opened. This is optional if and only if\nthere is only one snapshot available to be loaded. If multiple\nsnapshots exist, then the snapshot name must be specified.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "ParticipantSession.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "Filename.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod BooleanList.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/update_participant",
        "href": "api/core/settings/_autosummary/api/update_participant.html#update_participant",
        "title": "update_participant",
        "section": "update_participant",
        "text": "Bases: Command\nGiven the name of a participant, updates the state of the participant.\nAvailable for DEFAULT-SRV, CFD-SRV, MECH-SRV, and SCDT-SRV and\nAEDT participants.\nAs part of the update, System Coupling updates all regions, variables,\nand parameters defined in the participant, including all variable\nattributes. Regions, variables, and parameters may be added to the\nparticipant but may not be removed.\nYou may specify an input file using an optional argument. If an input\nfile is not provided, then the original input file will be reimported.\nNote: AEDT participants must be updated using an scp file.\nIf the update process fails, System Coupling displays an error. In this\ncase, you can either update the setup in the participant application to\nremove any issues with the update process or delete the participant\nfrom the analysis and then re-add it using the updated input file.\nParticipant name. Must be the name of an existing participant.\nName of the input file for the participant to be added.\nCurrently supported formats are SCP files, mechanical server\n(*.rst) files, cfd server (*.csv) files, and system coupling\ndata server (*.scdt/axdt/csv) files.\nParent\nSummary\nsetup_root\n‘root’ object\nupdate_participant\nCommand\npython:str\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/update_participant",
        "href": "api/core/settings/_autosummary/api/update_participant.html#ansys.systemcoupling.core.adaptor.api_25_1.update_participant.update_participant",
        "title": "update_participant > update_participant > update_participant",
        "section": "update_participant > update_participant",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.update_participant.update_participant(name=None, parent=None)\n\nBases: Command\n\nGiven the name of a participant, updates the state of the participant.\n\nAvailable for DEFAULT-SRV, CFD-SRV, MECH-SRV, and SCDT-SRV and\nAEDT participants.\n\nAs part of the update, System Coupling updates all regions, variables,\nand parameters defined in the participant, including all variable\nattributes. Regions, variables, and parameters may be added to the\nparticipant but may not be removed.\n\nYou may specify an input file using an optional argument. If an input\nfile is not provided, then the original input file will be reimported.\n\nNote: AEDT participants must be updated using an scp file.\n\nIf the update process fails, System Coupling displays an error. In this\ncase, you can either update the setup in the participant application to\nremove any issues with the update process or delete the participant\nfrom the analysis and then re-add it using the updated input file.\n\nParameters\n\nparticipant_name\n\npython:str\n\nParticipant name. Must be the name of an existing participant.\n\ninput_file\n\npython:str, optional\n\nName of the input file for the participant to be added.\nCurrently supported formats are SCP files, mechanical server\n(*.rst) files, cfd server (*.csv) files, and system coupling\ndata server (*.scdt/axdt/csv) files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/side",
        "href": "api/core/settings/_autosummary/api/side.html#side",
        "title": "side",
        "section": "side",
        "text": "Bases: NamedContainer[side_child]\nConfigure one side of a coupling interface.\nside_child\nParent\nSummary\ncoupling_interface_child\nConfigure a coupling interface.\nside\nNamedContainer\nside_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/side",
        "href": "api/core/settings/_autosummary/api/side.html#ansys.systemcoupling.core.adaptor.api_25_1.side.side",
        "title": "side > side > side",
        "section": "side > side",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.side.side(name=None, parent=None)\n\nBases: NamedContainer[side_child]\n\nConfigure one side of a coupling interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/variable",
        "href": "api/core/settings/_autosummary/api/variable.html#variable",
        "title": "variable",
        "section": "variable",
        "text": "Bases: NamedContainer[variable_child]\nConfigure a variable for the coupling participant.\nvariable_child\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nvariable\nNamedContainer\nvariable_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/variable",
        "href": "api/core/settings/_autosummary/api/variable.html#ansys.systemcoupling.core.adaptor.api_25_1.variable.variable",
        "title": "variable > variable > variable",
        "section": "variable > variable",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.variable.variable(name=None, parent=None)\n\nBases: NamedContainer[variable_child]\n\nConfigure a variable for the coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "Boolean.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.html#ansyssystemcouplingcoreadaptorimpltypesreallist",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.RealList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.RealList",
        "text": "Provides a RealList object that represents a real list setting.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.RealList\nRealList\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.html#ansys.systemcoupling.core.adaptor.impl.types.RealList",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.RealList > ansys.systemcoupling.core.adaptor.impl.types.RealList > RealList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.RealList > RealList",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.RealList(name=None, parent=None)\n\nProvides a RealList object that represents a real list setting.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/settings/_autosummary/api/external_data_file",
        "href": "api/core/settings/_autosummary/api/external_data_file.html#external_data_file",
        "title": "external_data_file",
        "section": "external_data_file",
        "text": "Bases: Container\nParticipant external data file settings.\nPath to file for communication with a coupling participant.\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nexternal_data_file\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/external_data_file",
        "href": "api/core/settings/_autosummary/api/external_data_file.html#ansys.systemcoupling.core.adaptor.api_25_1.external_data_file.external_data_file",
        "title": "external_data_file > external_data_file > external_data_file",
        "section": "external_data_file > external_data_file",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.external_data_file.external_data_file(name=None, parent=None)\n\nBases: Container\n\nParticipant external data file settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/abort",
        "href": "api/core/settings/_autosummary/api/abort.html#abort",
        "title": "abort",
        "section": "abort",
        "text": "Bases: InjectedCommand\nAborts a solve in progress.\nSee also interrupt. In contrast to an interrupted solve,\nan aborted solve cannot be resumed.\nText to describe the reason for the abort.\nThis might be used for such purposes as providing\nadditional annotation in transcript output.\nParent\nSummary\nsolution_root\n‘root’ object\nabort\nInjectedCommand\ninterrupt\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/abort",
        "href": "api/core/settings/_autosummary/api/abort.html#ansys.systemcoupling.core.adaptor.api_25_1.abort.abort",
        "title": "abort > abort > abort",
        "section": "abort > abort",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.abort.abort(name=None, parent=None)\n\nBases: InjectedCommand\n\nAborts a solve in progress.\n\nSee also interrupt. In contrast to an interrupted solve,\nan aborted solve cannot be resumed.\n\nParameters\n\nreason_msg\n\npython:str, optional\n\nText to describe the reason for the abort.\n\nThis might be used for such purposes as providing\nadditional annotation in transcript output.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/generate_input_file",
        "href": "api/core/settings/_autosummary/api/generate_input_file.html#generate_input_file",
        "title": "generate_input_file",
        "section": "generate_input_file",
        "text": "Bases: Command\nGenerates the input journal file for a given Fluent participant.\nName of the participant for which the execution command will\nbe returned.\nName of the journal script to be written. Note that this name is relative\nto the participant’s working directory.\nParent\nSummary\nsetup_root\n‘root’ object\ngenerate_input_file\nCommand\npython:str\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/generate_input_file",
        "href": "api/core/settings/_autosummary/api/generate_input_file.html#ansys.systemcoupling.core.adaptor.api_25_1.generate_input_file.generate_input_file",
        "title": "generate_input_file > generate_input_file > generate_input_file",
        "section": "generate_input_file > generate_input_file",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.generate_input_file.generate_input_file(name=None, parent=None)\n\nBases: Command\n\nGenerates the input journal file for a given Fluent participant.\n\nParameters\n\nparticipant_name\n\npython:str\n\nName of the participant for which the execution command will\nbe returned.\n\nfile_name\n\npython:str\n\nName of the journal script to be written. Note that this name is relative\nto the participant’s working directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/type",
        "href": "api/core/settings/_autosummary/api/type.html#type",
        "title": "type",
        "section": "type",
        "text": "Bases: Container\nFile type for result output.\nAllowed values:\n“EnsightGold”\n“DVS”\nOutput in Binary or ASCII format.\nParent\nSummary\nresults\nConfigures output of postprocessing results data.\ntype\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/type",
        "href": "api/core/settings/_autosummary/api/type.html#ansys.systemcoupling.core.adaptor.api_25_1.type.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.type.type(name=None, parent=None)\n\nBases: Container\n\nFile type for result output.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_aerodamping_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_aerodamping_data_transfers.html#add_aerodamping_data_transfers",
        "title": "add_aerodamping_data_transfers",
        "section": "add_aerodamping_data_transfers",
        "text": "Bases: Command\nAdds data transfer for each specified mode shape.\nReturns the name of the Data Transfers created.\nString indicating the name of the interface on which the data transfer\nis to be created.\nList of mode shapes to transfer. If not provided, a\ndata transfer is created for each available modeshape.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_aerodamping_data_transfers\nCommand\npython:str\nList\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_aerodamping_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_aerodamping_data_transfers.html#ansys.systemcoupling.core.adaptor.api_25_1.add_aerodamping_data_transfers.add_aerodamping_data_transfers",
        "title": "add_aerodamping_data_transfers > add_aerodamping_data_transfers > add_aerodamping_data_transfers",
        "section": "add_aerodamping_data_transfers > add_aerodamping_data_transfers",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_aerodamping_data_transfers.add_aerodamping_data_transfers(name=None, parent=None)\n\nBases: Command\n\nAdds data transfer for each specified mode shape.\n\nReturns the name of the Data Transfers created.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface on which the data transfer\nis to be created.\n\nmode_shapes\n\nList, optional\n\nList of mode shapes to transfer. If not provided, a\ndata transfer is created for each available modeshape.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/unmapped_value_options",
        "href": "api/core/settings/_autosummary/api/unmapped_value_options.html#unmapped_value_options",
        "title": "unmapped_value_options",
        "section": "unmapped_value_options",
        "text": "Bases: Container\nUnmapped value settings.\nMatrix verbosity.\nSolver verbosity.\nSolver (“GMRES” or “FGMRES”).\nSolver relative tolerance\nSolver maximum iterations.\nSolver maximum search directions.\nPreconditioner type (“None” or “ILUT”).\nTolerance for ILUT.\nMaximum fill level for ILUT.\nPivot tolerance for ILUT.\nTolerance (angle, in degrees) for which to consider nearby faces to be sufficiently\naligned to be included in the algorithm.\nRadial basis function shape parameter for Gaussian shape function.\nControl whether the radial basis function linear correction is active.\nTolerance to use for checking colinearity of nearby data when using the radial\nbasis functions for non-overlap extrapolation.\nParent\nSummary\nanalysis_control\nConfigure coupling controls.\nunmapped_value_options\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/unmapped_value_options",
        "href": "api/core/settings/_autosummary/api/unmapped_value_options.html#ansys.systemcoupling.core.adaptor.api_25_1.unmapped_value_options.unmapped_value_options",
        "title": "unmapped_value_options > unmapped_value_options > unmapped_value_options",
        "section": "unmapped_value_options > unmapped_value_options",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.unmapped_value_options.unmapped_value_options(name=None, parent=None)\n\nBases: Container\n\nUnmapped value settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/reference_frame_child",
        "href": "api/core/settings/_autosummary/api/reference_frame_child.html#reference_frame_child",
        "title": "reference_frame_child",
        "section": "reference_frame_child",
        "text": "Bases: Container\nProvide a transformation relative to a ParentReferenceFrame.\nMethod used to define the transformation from the parent reference frame.\n“ByTransformation” - Define the reference frame by one or more\ntransformation operations.\n“Automatic” - Align source and target automatically.\n“ByMatrix” - Only available if Alpha features are activated.\nSet the parent reference frame.\nList names of transformations in the order in which they apply.\nAvailable for the ByTransformation option.\nDefine the transformation matrix when ByTransformation option is active.\nChild\nSummary\ntransformation\nUse to apply transformations to coupling interface sides to control\nParent\nSummary\nreference_frame\nProvide a transformation relative to a ParentReferenceFrame.\nreference_frame_child\nContainer\nByTransformation\nByTransformation\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/reference_frame_child",
        "href": "api/core/settings/_autosummary/api/reference_frame_child.html#ansys.systemcoupling.core.adaptor.api_25_1.reference_frame_child.reference_frame_child",
        "title": "reference_frame_child > reference_frame_child > reference_frame_child",
        "section": "reference_frame_child > reference_frame_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.reference_frame_child.reference_frame_child(name=None, parent=None)\n\nBases: Container\n\nProvide a transformation relative to a ParentReferenceFrame.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/solution_root",
        "href": "api/core/settings/_autosummary/api/solution_root.html#solution_root",
        "title": "solution_root",
        "section": "solution_root",
        "text": "Bases: Container\n‘root’ object\nCommand\nSummary\nabort\nAborts a solve in progress.\nconnect_ensight_dvs\nAllow System Coupling to create DVS clients and connect these clients to\ncreate_restart_point\nInteractive command that creates a restart point at the end of the\nget_machines\nGet currently available machines.\nget_transformation\nGiven an interface and side, returns the resultant transformation, in\ninitialize\nInteractive command that initializes a coupled analysis.\ninterrupt\nInterrupts a solve in progress.\nopen_results_in_ensight\nAllows for System Coupling results to be postprocessed in EnSight.\npartition_participants\nProvide a utility for setting the parallel algorithm, parallel partitioning\nshow_plot\nShows plots of transfer values and convergence for data transfers\nshutdown\nInteractive command that shuts down a coupled analysis.\nsolve\nStarts the participants (if necessary) and solves the coupled analysis. By\nstart_participants\nImportant: This command is deprecated. Consider adopting workflows\nstep\nInteractive command that initializes the analysis (if necessary) and\nwrite_csv_chart_files\nFor each coupling interface, exports a CSV file containing chart data\nwrite_ensight\nWrite a file with mesh and results which can be loaded into Ensight for\nsolution_root\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/solution_root",
        "href": "api/core/settings/_autosummary/api/solution_root.html#ansys.systemcoupling.core.adaptor.api_25_1.solution_root.solution_root",
        "title": "solution_root > solution_root > solution_root",
        "section": "solution_root > solution_root",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.solution_root.solution_root(name=None, parent=None)\n\nBases: Container\n\n‘root’ object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "IntegerList.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the string for a native System Coupling name to a Python variable name.\nThis method converts the native names in camel case to snake case.\nstr\nto_python_name\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "ansys.systemcoupling.core.adaptor.impl.types.to_python_name(syc_name)\n\nConvert the string for a native System Coupling name to a Python variable name.\n\nThis method converts the native names in camel case to snake case.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.case",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.case.html#case",
        "title": "case",
        "section": "case",
        "text": "Pythonic client-side form of the System Coupling case persistence API.\ncase\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.case",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.case.html#ansys.systemcoupling.core.session.Session.case",
        "title": "case > case > case",
        "section": "case > case",
        "text": "property Session.case: case_root\n\nPythonic client-side form of the System Coupling case persistence API.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod ParticipantSession.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod StringList.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.String.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "String.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/shutdown",
        "href": "api/core/settings/_autosummary/api/shutdown.html#shutdown",
        "title": "shutdown",
        "section": "shutdown",
        "text": "Bases: Command\nInteractive command that shuts down a coupled analysis.\nshutdown includes ending the coupling run and signaling participants\nto end the run. This produces a clean shutdown, generating the final\nrestart point and corresponding results file before disconnecting\nfrom participants.\nAfter participants are disconnected, the coupling service writes\ntiming details to the transcript. If participants were started\nautomatically, it ends participant processes.\nWhen System Coupling disconnects from the analysis and shuts down, the GUI\nServer file is removed from the working directory.\nParent\nSummary\nsolution_root\n‘root’ object\nshutdown\nCommand\nshutdown\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/shutdown",
        "href": "api/core/settings/_autosummary/api/shutdown.html#ansys.systemcoupling.core.adaptor.api_25_1.shutdown.shutdown",
        "title": "shutdown > shutdown > shutdown",
        "section": "shutdown > shutdown",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.shutdown.shutdown(name=None, parent=None)\n\nBases: Command\n\nInteractive command that shuts down a coupled analysis.\n\nshutdown includes ending the coupling run and signaling participants\nto end the run. This produces a clean shutdown, generating the final\nrestart point and corresponding results file before disconnecting\nfrom participants.\n\nAfter participants are disconnected, the coupling service writes\ntiming details to the transcript. If participants were started\nautomatically, it ends participant processes.\n\nWhen System Coupling disconnects from the analysis and shuts down, the GUI\nServer file is removed from the working directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod SettingsBase.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/instancing_child",
        "href": "api/core/settings/_autosummary/api/instancing_child.html#instancing_child",
        "title": "instancing_child",
        "section": "instancing_child",
        "text": "Bases: Container\nDefine instancing for an interface side.\nAvailable when cylindrical geometry instancing has been added to\nthe data model.\nRotationAxis controls how the axis of rotation is defined.\nUNDOCUMENTED\nTotal number of instances (including the first instance) in\na full 360 degree rotation of the participant mesh. This value\nincludes the reference instance (with the participant mesh).\nAll instances defined for the instancing object have identical\nangles.\nNumber of instances to be included in the mapping when instancing\nis applied.\nRequired when the number of instances to be used for mapping does\nnot match the number of instances in a full circle. Default\nassumes a 360 degree rotation of the participant mesh. This value\nincludes the reference instance (with the participant mesh).\nReference frame that defines the orientation of the instancing.\nRotation will be around the z-axis of the reference frame,\nfollowing the right-hand rule.\nPrincipal axis of rotation for instancing\nDefine the starting point of a user-defined axis.\nDefine the end point of a user-defined axis.\nOffset (in radians) about the rotation axis for the first instance\nParent\nSummary\ninstancing\nDefine instancing for an interface side.\ninstancing_child\nContainer\nRotationAxis\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/instancing_child",
        "href": "api/core/settings/_autosummary/api/instancing_child.html#ansys.systemcoupling.core.adaptor.api_25_1.instancing_child.instancing_child",
        "title": "instancing_child > instancing_child > instancing_child",
        "section": "instancing_child > instancing_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.instancing_child.instancing_child(name=None, parent=None)\n\nBases: Container\n\nDefine instancing for an interface side.\n\nAvailable when cylindrical geometry instancing has been added to\nthe data model.\n\nRotationAxis controls how the axis of rotation is defined.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/syc_persistence",
        "href": "users_guide/syc_persistence.html#analysis-persistence",
        "title": "Analysis persistence",
        "section": "Analysis persistence",
        "text": "Use the case attribute of Session to access commands relating to the persistence and overall state of an analysis case:\nSaving and opening a case\nSaving a case snapshot\nClearing/resetting the entire state\nIn the code snippets that follow, the case variable is assumed to have been assigned as follows:\nAnalysis persistence\ncase\nSession\ncase"
    },
    {
        "objectID": "users_guide/syc_persistence",
        "href": "users_guide/syc_persistence.html#saving-and-opening-a-case",
        "title": "Analysis persistence > Saving and opening a case",
        "section": "Saving and opening a case",
        "text": "Files defining the state of an analysis case are always saved and loaded from a SyC/ subdirectory which exists, by default, in the working directory.\nOpening a case restores the analysis settings at the time of saving, and\nloads results data if it exists.\nSimilarly for saving the current state of a case:\nWhen saving a case, the SyC directory is created if it does not already exist.\nSettings data is saved in a file called settings.h5.\nIf the case has been successfully solved, restart files exist (these are files with names of the form\nRestart_step<n> or Restart_iter<n>), depending on whether the analysis\nis a transient or steady cases. The restart files allow the\nresults to be loaded at any point partway through the analysis for which a restart\nfile exists. For example, if results were saved at the end of step 2, then the coupling_step\noption may be provided to open:\nThe frequency with which restart files are written during a solution is controlled by\nthe setting setup.output_control.option.\nOpening a case at a restart point that is not the final step/iteration causes\nlater restart files to be deleted. Typically, the reason for opening at an\nearlier point is to re-run the analysis from that point. If it is important to\nsave all of the results, the ref_snapshots facility may be used.\nThe results data itself is stored in the Results subdirectory of SyC.\nSaving and opening a case\nSyC/\ncoupling_step\nopen\nsetup.output_control.option"
    },
    {
        "objectID": "users_guide/syc_persistence",
        "href": "users_guide/syc_persistence.html#case-snapshots",
        "title": "Analysis persistence > Case snapshots",
        "section": "Case snapshots",
        "text": "Snapshot capabilities allow you to capture the current state of a coupled\nanalysis as a whole and then later restore the analysis to that state.\nSnapshots give you the ability to save and return to a specific point in a coupled analysis.\nA snapshot captures the current state of the coupled analysis as a whole (rather than just of the data model).\nIt includes all the files and directories contained in System Coupling’s working directory that are necessary\nto restore the coupled analysis to its current state — specifically, the SyC subdirectory and the coupling\nworking directories of all loaded coupling participants.\nThe snapshot facility relies on the SyC directory and the participants’ working directories being\nsubdirectories of the System Coupling working directory.\nSnapshots are saved in a subdirectory SyCSnapshots that exists in the working directory alongside\nthe SyC directory. Each snapshot is saved as a zip file. A snapshot named Initial.zip is\ncreated automatically when a solve is started (if it does not already exist); otherwise,\nsnapshots are managed on demand using the API commands as discussed below.\nThe basic operations supported are:\nSaving a snapshot\nLoading a snapshot\nDeleting a snapshot\nQuerying available snapshots\nCase snapshots"
    },
    {
        "objectID": "users_guide/syc_persistence",
        "href": "users_guide/syc_persistence.html#clearing-the-current-state",
        "title": "Analysis persistence > Clearing the current state",
        "section": "Clearing the current state",
        "text": "Occasionally, it might be useful to be able to clear the entire state of the settings and\nresults that are loaded in the current System Coupling session.\nTo do this, call the clear_state command:\nAnother option for achieving the same result is to exit the current session and create a new one:\nClearing the current state\nclear_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/basic_settings_types",
        "href": "api/core/adaptor/basic_settings_types.html#basic-setting-types",
        "title": "Basic setting types",
        "section": "Basic setting types",
        "text": "Although organized hierarchically into dictionary-like structures, all System\nCoupling settings are ultimately instances of basic Python built-in types or are simple\ncontainers of such types.\nThe basic types are:\nString (str)\nInteger (int)\nReal (float)\nBoolean (bool)\nSystem Coupling supports expressions for real valued settings, and these are specified as strings.\nTherefore a Python type hint RealType is defined in the API to\nallow this option to be expressed.\nSimilarly, type hints are defined for the derived list types.\nThese additional type hint definitions are documented in the following sections.\nBasic setting types\nstr\nint\nfloat\nbool"
    },
    {
        "objectID": "api/core/adaptor/basic_settings_types",
        "href": "api/core/adaptor/basic_settings_types.html#realtype",
        "title": "Basic setting types > RealType",
        "section": "RealType",
        "text": "Union[float, str] - the underlying data model type is float but an expression string may also\nbe assigned.\nRealType\nRealType\nUnion[float, str]\nfloat"
    },
    {
        "objectID": "api/core/adaptor/basic_settings_types",
        "href": "api/core/adaptor/basic_settings_types.html#stringlisttype",
        "title": "Basic setting types > StringListType",
        "section": "StringListType",
        "text": "List[str] - list of str values.\nStringListType\nStringListType\nList[str]\nstr"
    },
    {
        "objectID": "api/core/adaptor/basic_settings_types",
        "href": "api/core/adaptor/basic_settings_types.html#integerlisttype",
        "title": "Basic setting types > IntegerListType",
        "section": "IntegerListType",
        "text": "List[int] - list of int values.\nIntegerListType\nIntegerListType\nList[int]\nint"
    },
    {
        "objectID": "api/core/adaptor/basic_settings_types",
        "href": "api/core/adaptor/basic_settings_types.html#reallisttype",
        "title": "Basic setting types > RealListType",
        "section": "RealListType",
        "text": "List[RealType] - list of RealType values.\nRealListType\nRealListType\nList[RealType]"
    },
    {
        "objectID": "api/core/adaptor/basic_settings_types",
        "href": "api/core/adaptor/basic_settings_types.html#realvectortype",
        "title": "Basic setting types > RealVectorType",
        "section": "RealVectorType",
        "text": "Tuple[RealType, RealType, RealType] - 3-tuple of RealType values. Holds a real 3D vector or coordinate value.\nRealVectorType\nRealVectorType\nTuple[RealType, RealType, RealType]"
    },
    {
        "objectID": "api/core/adaptor/basic_settings_types",
        "href": "api/core/adaptor/basic_settings_types.html#boollisttype",
        "title": "Basic setting types > BoolListType",
        "section": "BoolListType",
        "text": "List[bool] - list of bool values.\nBoolListType\nBoolListType\nList[bool]\nbool\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/create_restart_point",
        "href": "api/core/settings/_autosummary/api/create_restart_point.html#create_restart_point",
        "title": "create_restart_point",
        "section": "create_restart_point",
        "text": "Bases: Command\nInteractive command that creates a restart point at the end of the\nlast completed coupling step.\nSignals the System Coupling service and all coupling participants that a\nrestart point should be created before the next coupling step begins. The\nrestart point is created in addition to restart points created by the\noutput_control setting in the data model.\nNote that some participants write their restart files only when the\ncoupling run resumes, so their files will not be available immediately\nafter the command is issued.\nResults information for the coupling step is written to a file named\naccording to the convention Results_#.h5, where _# is the number of\nthe coupling step. By default, the restart files are written to the SyC\ndirectory, which is automatically created by the System Coupling service\nwhen restart points are created.\nParent\nSummary\nsolution_root\n‘root’ object\ncreate_restart_point\nCommand\noutput_control\nResults_#.h5\n_#\nSyC\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/create_restart_point",
        "href": "api/core/settings/_autosummary/api/create_restart_point.html#ansys.systemcoupling.core.adaptor.api_25_1.create_restart_point.create_restart_point",
        "title": "create_restart_point > create_restart_point > create_restart_point",
        "section": "create_restart_point > create_restart_point",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.create_restart_point.create_restart_point(name=None, parent=None)\n\nBases: Command\n\nInteractive command that creates a restart point at the end of the\nlast completed coupling step.\n\nSignals the System Coupling service and all coupling participants that a\nrestart point should be created before the next coupling step begins. The\nrestart point is created in addition to restart points created by the\noutput_control setting in the data model.\n\nNote that some participants write their restart files only when the\ncoupling run resumes, so their files will not be available immediately\nafter the command is issued.\n\nResults information for the coupling step is written to a file named\naccording to the convention Results_#.h5, where _# is the number of\nthe coupling step. By default, the restart files are written to the SyC\ndirectory, which is automatically created by the System Coupling service\nwhen restart points are created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.exit",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.exit.html#exit",
        "title": "exit",
        "section": "exit",
        "text": "Close the System Coupling server instance.\nAfter the server instance is closed, the current instance of\nthis class is not usable. Create a new instance if required.\nNone\nexit\nNone\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.exit",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.exit.html#ansys.systemcoupling.core.session.Session.exit",
        "title": "exit > exit > exit",
        "section": "exit > exit",
        "text": "Session.exit()\n\nClose the System Coupling server instance.\n\nAfter the server instance is closed, the current instance of\nthis class is not usable. Create a new instance if required.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "Boolean.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "Filename.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod RealList.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod StrOrIntDictList.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_region_names_for_participant",
        "href": "api/core/settings/_autosummary/api/get_region_names_for_participant.html#get_region_names_for_participant",
        "title": "get_region_names_for_participant",
        "section": "get_region_names_for_participant",
        "text": "Bases: Command\nGets all of the specified participant’s regions.\nReturns a dictionary with the regions as keys and the corresponding\ndisplay names as values.\nString indicating the participant for which regions are returned.\nParent\nSummary\nsetup_root\n‘root’ object\nget_region_names_for_participant\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_region_names_for_participant",
        "href": "api/core/settings/_autosummary/api/get_region_names_for_participant.html#ansys.systemcoupling.core.adaptor.api_25_1.get_region_names_for_participant.get_region_names_for_participant",
        "title": "get_region_names_for_participant > get_region_names_for_participant > get_region_names_for_participant",
        "section": "get_region_names_for_participant > get_region_names_for_participant",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_region_names_for_participant.get_region_names_for_participant(name=None, parent=None)\n\nBases: Command\n\nGets all of the specified participant’s regions.\n\nReturns a dictionary with the regions as keys and the corresponding\ndisplay names as values.\n\nParameters\n\nparticipant_name\n\npython:str\n\nString indicating the participant for which regions are returned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.html#ansyssystemcouplingcoreadaptorimpltypesnamedcontainer",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.NamedContainer",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.NamedContainer",
        "text": "Provides a container for named instances of Container objects.\nA NamedContainer object is a Container object, similar to a Python\ndictionary object.\nGenerally, many such objects can be created with different names.\nList of mames of the commands.\n__init__([name, parent])\nInitialize an instance of the NamedContainer class.\ncreate(name)\nCreate a named object.\nget_object_names()\nGet object names.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nitems()\nItems.\nkeys()\nObject names.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with PySystemCoupling names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with the native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nvalues()\nObject values.\ncommand_names\n\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.NamedContainer\nContainer\nNamedContainer\nContainer\n__init__\nNamedContainer\ncreate\nget_object_names\nget_property_state\nprop\nget_state\nitems\nkeys\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nvalues\ncommand_names\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.NamedContainer > ansys.systemcoupling.core.adaptor.impl.types.NamedContainer > NamedContainer",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.NamedContainer > NamedContainer",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.NamedContainer(name=None, parent=None)\n\nProvides a container for named instances of Container objects.\n\nA NamedContainer object is a Container object, similar to a Python\ndictionary object.\n\nGenerally, many such objects can be created with different names.\n\nAttributes\n\ncommand_names: list[str]\n\nList of mames of the commands.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the NamedContainer class.\n\ncreate(name)\n\nCreate a named object.\n\nget_object_names()\n\nGet object names.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nitems()\n\nItems.\n\nkeys()\n\nObject names.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with PySystemCoupling names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with the native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nvalues()\n\nObject values.\n\n\n\nAttributes\n\n\n\n\n\n\n\ncommand_names\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_object_names",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_object_names.html#get_object_names",
        "title": "get_object_names",
        "section": "get_object_names",
        "text": "Get object names.\nget_object_names\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_object_names",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_object_names.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_object_names",
        "title": "get_object_names > get_object_names > get_object_names",
        "section": "get_object_names > get_object_names",
        "text": "NamedContainer.get_object_names()\n\nGet object names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "RealVector.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "SettingsBase.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "StringList.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/solution_control",
        "href": "api/core/settings/_autosummary/api/solution_control.html#solution_control",
        "title": "solution_control",
        "section": "solution_control",
        "text": "Bases: Container\nConfigure solution controls.\nDetermine how the analysis duration is specified.\nAllowed values:\n“EndTime” - Available for transient analyses. Execute coupling\nsteps until the analysis reaches the specified end time.\n“NumberOfSteps” - Perform coupling steps until the specified\nnumber of steps is reached.\nSet co-simulation end time.\nSet number of coupling steps.\nSet coupling time step size.\nSet minimum iterations within coupling step.\nSet maximum iterations within coupling step.\nIf True (the default), prefer to use IPv4 address rather than hostname for\nparticipant server connections. There is no guarantee that this request\ncan be satisfied for all participants.\nIf True, prefer to use local host address rather than network address for\nparticipant server connections. There is no guarantee that this request\ncan be satisfied for all participants.\nChild\nSummary\navailable_ports\nSpecify ports available for co-simulation.\nParent\nSummary\nsetup_root\n‘root’ object\nsolution_control\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/solution_control",
        "href": "api/core/settings/_autosummary/api/solution_control.html#ansys.systemcoupling.core.adaptor.api_25_1.solution_control.solution_control",
        "title": "solution_control > solution_control > solution_control",
        "section": "solution_control > solution_control",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.solution_control.solution_control(name=None, parent=None)\n\nBases: Container\n\nConfigure solution controls.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_participant",
        "href": "api/core/settings/_autosummary/api/add_participant.html#add_participant",
        "title": "add_participant",
        "section": "add_participant",
        "text": "Bases: InjectedCommand\nThis command operates in one of two modes, depending on how it is called.\nEither a single argument, participant_session, should be provided, or some\ncombination of the other optional arguments not including participant_session\nshould be provided.\nIn the participant_session mode, the session object is queried to\nextract the information needed to define a new coupling_participant\nobject in the setup datamodel. A reference to the session is also retained,\nand this will play a further role if solve is called later. In that case,\nthe participant solver will be driven from the Python environment in which the\nparticipant and PySystemCoupling sessions are active and System Coupling will\nregard the participant solver as “externally managed” (see the execution_control\nsettings in coupling_participant for details of this mode).\nThe participant_session mode currently has limited support in the\nbroader Ansys Python ecosystem - at present, only PyFluent supports\nthe API required of the session object and product versions of Fluent and\nSystem Coupling need to be at least 24.1. This capability should be\nregarded as Beta as it may be subject to revision when extended to other\nproducts.\nThe remainder of the documentation describes the more usual non-session mode.\nAdds a coupling participant to the data model.\nWhen executed, this command adds the new participant to the analysis\nwithout removing any interfaces or data transfers created previously.\nCannot be called after participants have been started.\nReturns the name of the participant.\nThere are several options that can be selected to add the\nparticipant - via a file, via a participant executable, or via a\nPython script. Some of these options may be combined. For example,\nsometimes it is useful to use an input file while at the same time\nproviding a custom participant executable or Python script.\nOption 1: Using an input file\nGiven an input file containing participant coupling information, reads the\nspecified file, pushes the participant’s information to the data model.\nOption 2: Using a participant executable\nGiven the path to the executable for this participant (and optionally,\nadditional arguments and/or working directory), start the participant\nexecutable, connect to the participant using the socket connection,\nand get the participant’s information and add it to the data model.\nOption 3: Using a Python script\nThis can be seen as a special case of Option 2 (using an executable),\nbut instead of an executable, a Python script is used. System Coupling\nwill invoke a specialized script to set up the environment so\nthat the Python script can more easily interact with System Coupling.\nParticipant session object conforming to the ParticipantProtocol protocol class.\nParticipant type. To get a list of supported participant types, use\nthe get_supported_participant_types() query. If unspecified,\nadd_participant will attempt to deduce the type from input_file.\nName of the input file for the participant to be added.\nCurrently supported formats are SCP files, Forte input (FTSIM)\nfiles, mechanical server (*.rst) files, cfd server (*.csv) files,\nFMU (*.fmu) files, and System Coupling data server (*.scdt/axdt/csv) files.\nPath to the executable file for the participant to be added.\nAny additional arguments to be passed to the participant’s executable.\nPath to the working directory for this participant.\nInstead of the executable, use a Python script and wrap it with\nSystem Coupling-provided .bat/.sh scripts to set up the environment\ncorrectly before calling this Python script.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_participant\nInjectedCommand\nparticipant_session\nparticipant_session\nparticipant_session\ncoupling_participant\nsolve\nparticipant_session\nParticipantProtocol\noptional\nParticipantProtocol\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_participant",
        "href": "api/core/settings/_autosummary/api/add_participant.html#ansys.systemcoupling.core.adaptor.api_25_1.add_participant.add_participant",
        "title": "add_participant > add_participant > add_participant",
        "section": "add_participant > add_participant",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_participant.add_participant(name=None, parent=None)\n\nBases: InjectedCommand\n\nThis command operates in one of two modes, depending on how it is called.\nEither a single argument, participant_session, should be provided, or some\ncombination of the other optional arguments not including participant_session\nshould be provided.\n\nIn the participant_session mode, the session object is queried to\nextract the information needed to define a new coupling_participant\nobject in the setup datamodel. A reference to the session is also retained,\nand this will play a further role if solve is called later. In that case,\nthe participant solver will be driven from the Python environment in which the\nparticipant and PySystemCoupling sessions are active and System Coupling will\nregard the participant solver as “externally managed” (see the execution_control\nsettings in coupling_participant for details of this mode).\n\nThe participant_session mode currently has limited support in the\nbroader Ansys Python ecosystem - at present, only PyFluent supports\nthe API required of the session object and product versions of Fluent and\nSystem Coupling need to be at least 24.1. This capability should be\nregarded as Beta as it may be subject to revision when extended to other\nproducts.\n\nThe remainder of the documentation describes the more usual non-session mode.\n\nAdds a coupling participant to the data model.\n\nWhen executed, this command adds the new participant to the analysis\nwithout removing any interfaces or data transfers created previously.\n\nCannot be called after participants have been started.\n\nReturns the name of the participant.\n\nThere are several options that can be selected to add the\nparticipant - via a file, via a participant executable, or via a\nPython script. Some of these options may be combined. For example,\nsometimes it is useful to use an input file while at the same time\nproviding a custom participant executable or Python script.\n\nOption 1: Using an input file\n\nGiven an input file containing participant coupling information, reads the\nspecified file, pushes the participant’s information to the data model.\n\nOption 2: Using a participant executable\n\nGiven the path to the executable for this participant (and optionally,\nadditional arguments and/or working directory), start the participant\nexecutable, connect to the participant using the socket connection,\nand get the participant’s information and add it to the data model.\n\nOption 3: Using a Python script\n\nThis can be seen as a special case of Option 2 (using an executable),\nbut instead of an executable, a Python script is used. System Coupling\nwill invoke a specialized script to set up the environment so\nthat the Python script can more easily interact with System Coupling.\n\nParameters\n\nparticipant_session\n\nParticipantProtocol, optional\n\nParticipant session object conforming to the ParticipantProtocol protocol class.\n\nparticipant_type\n\npython:str, optional\n\nParticipant type. To get a list of supported participant types, use\nthe get_supported_participant_types() query. If unspecified,\nadd_participant will attempt to deduce the type from input_file.\n\ninput_file\n\npython:str, optional\n\nName of the input file for the participant to be added.\nCurrently supported formats are SCP files, Forte input (FTSIM)\nfiles, mechanical server (*.rst) files, cfd server (*.csv) files,\nFMU (*.fmu) files, and System Coupling data server (*.scdt/axdt/csv) files.\n\nexecutable\n\npython:str, optional\n\nPath to the executable file for the participant to be added.\n\nadditional_arguments\n\npython:str, optional\n\nAny additional arguments to be passed to the participant’s executable.\n\nworking_directory\n\npython:str, optional\n\nPath to the working directory for this participant.\n\npython_script\n\npython:str, optional\n\nInstead of the executable, use a Python script and wrap it with\nSystem Coupling-provided .bat/.sh scripts to set up the environment\ncorrectly before calling this Python script.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "SettingsBase.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod StringList.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.Container.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod Container.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod ParticipantSession.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod Integer.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "BooleanList.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/show_plot",
        "href": "api/core/settings/_autosummary/api/show_plot.html#show_plot",
        "title": "show_plot",
        "section": "show_plot",
        "text": "Bases: InjectedCommand\nShows plots of transfer values and convergence for data transfers\nof a coupling interface.\nSpecification of which interface to plot.\nSpecification of which data transfers to plot. Defaults\nto None, which means plot all data transfers.\nWorking directory (defaults = “.”).\nWhether to show convergence plots (defaults to True).\nWhether to show transfer value plots (defaults to True).\nParent\nSummary\nsolution_root\n‘root’ object\nshow_plot\nInjectedCommand\npython:str\nList\noptional\nNone\npython:str\noptional\noptional\nTrue\noptional\nTrue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/show_plot",
        "href": "api/core/settings/_autosummary/api/show_plot.html#ansys.systemcoupling.core.adaptor.api_25_1.show_plot.show_plot",
        "title": "show_plot > show_plot > show_plot",
        "section": "show_plot > show_plot",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.show_plot.show_plot(name=None, parent=None)\n\nBases: InjectedCommand\n\nShows plots of transfer values and convergence for data transfers\nof a coupling interface.\n\nParameters\n\ninterface_name\n\npython:str\n\nSpecification of which interface to plot.\n\ntransfer_names\n\nList, optional\n\nSpecification of which data transfers to plot. Defaults\nto None, which means plot all data transfers.\n\nworking_dir\n\npython:str, optional\n\nWorking directory (defaults = “.”).\n\nshow_convergence\n\nbool, optional\n\nWhether to show convergence plots (defaults to True).\n\nshow_transfer_values\n\nbool, optional\n\nWhether to show transfer value plots (defaults to True).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod StrOrIntDictList.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_interface_child",
        "href": "api/core/settings/_autosummary/api/coupling_interface_child.html#coupling_interface_child",
        "title": "coupling_interface_child",
        "section": "coupling_interface_child",
        "text": "Bases: Container\nConfigure a coupling interface.\nSet the display name of an object.\nChild\nSummary\nside\nConfigure one side of a coupling interface.\ndata_transfer\nConfigure data transfers for a coupling interface.\nmapping_control\nConfigure controls for mapping.\nParent\nSummary\ncoupling_interface\nConfigure a coupling interface.\ncoupling_interface_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_interface_child",
        "href": "api/core/settings/_autosummary/api/coupling_interface_child.html#ansys.systemcoupling.core.adaptor.api_25_1.coupling_interface_child.coupling_interface_child",
        "title": "coupling_interface_child > coupling_interface_child > coupling_interface_child",
        "section": "coupling_interface_child > coupling_interface_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.coupling_interface_child.coupling_interface_child(name=None, parent=None)\n\nBases: Container\n\nConfigure a coupling interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/attribute",
        "href": "api/core/settings/_autosummary/api/attribute.html#attribute",
        "title": "attribute",
        "section": "attribute",
        "text": "Bases: NamedContainer[attribute_child]\nConfigure a variable’s attributes.\nattribute_child\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nvariable_child\nConfigure a variable for the coupling participant.\nattribute\nNamedContainer\nattribute_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/attribute",
        "href": "api/core/settings/_autosummary/api/attribute.html#ansys.systemcoupling.core.adaptor.api_25_1.attribute.attribute",
        "title": "attribute > attribute > attribute",
        "section": "attribute > attribute",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.attribute.attribute(name=None, parent=None)\n\nBases: NamedContainer[attribute_child]\n\nConfigure a variable’s attributes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/syc_solution",
        "href": "users_guide/syc_solution.html#solving-an-analysis",
        "title": "Solving an analysis",
        "section": "Solving an analysis",
        "text": "As in ref_syc_analysis_setup, a PySystemCoupling Session object is assumed to have\nbeen created and is referred to as syc_session in the code snippets.\nThis section focuses on the solution part of the API (syc_session.solution), which provides\noperations associated with solving an analysis and examining results data.\nSolving an analysis\nSession\nsyc_session\nsolution\nsyc_session.solution"
    },
    {
        "objectID": "users_guide/syc_solution",
        "href": "users_guide/syc_solution.html#the-solve-command",
        "title": "Solving an analysis > The solve command",
        "section": "The solve command",
        "text": "If you have set up an analysis and it has no errors, you may attempt to solve it by calling solve.\nBefore beginning the solve, you can enable output streaming to use the solver transcript output to track the solution’s progress.\nCurrently, all commands in the PySystemCoupling API (including solve) are executed synchronously. This is a reflection of how the underlying operations currently work in System Coupling.\nBecause solve tends to be a long-running operation, it can be useful to execute it\nasynchronously in the Python environment. This is not supported explicitly, because\nin the current version of the API, there is no protection against trying to make calls\nconcurrently. However, you can call solve asynchronously by “manual” coding using Python\nthreads:\nThe majority of the session’s API should be avoided while the thread is active.\nAn exception is that it is possible to interrupt or force the end of a solve.\nThe solve command\nsolve\nsolve\nsolve\nsolve\nsolve"
    },
    {
        "objectID": "users_guide/syc_solution",
        "href": "users_guide/syc_solution.html#interrupting-and-aborting-a-solve",
        "title": "Solving an analysis > Interrupting and aborting a solve",
        "section": "Interrupting and aborting a solve",
        "text": "You can interrupt or force the end of a solve using the solution.interrupt() and solution.abort() calls. These are unusual PySystemCoupling calls in that they must be called in a different thread from the one in which solve is executing.\nBoth calls have the effect of stopping the solve that is in progress. The key difference\nis that interrupt allows you to resume the solve (by calling solve again).\nInterrupting and aborting a solve\nsolution.interrupt()\nsolution.abort()\nsolve\ninterrupt\nsolve"
    },
    {
        "objectID": "users_guide/syc_solution",
        "href": "users_guide/syc_solution.html#low-level-solution-control",
        "title": "Solving an analysis > Low-level solution control",
        "section": "Low-level solution control",
        "text": "Commands are available for more advanced scenarios offering lower-level control over the\nsolution process — specifically initialize, step, create_restart_point\nand shutdown. Roughly speaking, these perform the individual actions that are usually\nencapsulated in a simple solve call, allowing custom code to be executed between these\nactions.\nSuch advanced usage is not within the scope of this guide.\nLow-level solution control\ninitialize\nstep\ncreate_restart_point\nshutdown\nsolve"
    },
    {
        "objectID": "users_guide/syc_solution",
        "href": "users_guide/syc_solution.html#postprocessing-support",
        "title": "Solving an analysis > Postprocessing support",
        "section": "Postprocessing support",
        "text": "You can examine the results for the individual participants in the analysis by using their respective postprocessing applications. For details, see the relevant product documentation.\nFor System Coupling-specific results, data can be written in EnSight format. This allows you to use Ansys EnSight for visualization, animation, and postprocessing. PySystemCoupling also supports the writing of some convergence diagnostics in CSV format.\nPostprocessing support"
    },
    {
        "objectID": "users_guide/syc_solution",
        "href": "users_guide/syc_solution.html#generating-ensight-data",
        "title": "Solving an analysis > Generating EnSight data",
        "section": "Generating EnSight data",
        "text": "When a solution is available, you can specify that EnSight files are written on demand:\nAlternatively, you can use the output_control settings to specify the automatic generation of EnSight data at certain points during the solution:\nUsing EnSight to postprocess output data is not covered in this guide. For more information, see the relevant System Coupling and EnSight product documentation.\nGenerating EnSight data\noutput_control"
    },
    {
        "objectID": "users_guide/syc_solution",
        "href": "users_guide/syc_solution.html#convergence-diagnostic-data",
        "title": "Solving an analysis > Convergence diagnostic data",
        "section": "Convergence diagnostic data",
        "text": "When a solution is available, you can specify that CSV-formatted convergence data is written on demand:\nThis creates one file per coupling interface, where the file is named <interface name>.csv. Each file contains the interface’s convergence and transfer data for each iteration.\nAlternatively, you can use the output_control settings to turn on automatic writing of these files:\nConvergence diagnostic data\n<interface name>.csv\noutput_control\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_supported_participant_types",
        "href": "api/core/settings/_autosummary/api/get_supported_participant_types.html#get_supported_participant_types",
        "title": "get_supported_participant_types",
        "section": "get_supported_participant_types",
        "text": "Bases: Command\nReturns a list of participant types that are supported by System Coupling.\nParent\nSummary\nsetup_root\n‘root’ object\nget_supported_participant_types\nCommand\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_supported_participant_types",
        "href": "api/core/settings/_autosummary/api/get_supported_participant_types.html#ansys.systemcoupling.core.adaptor.api_25_1.get_supported_participant_types.get_supported_participant_types",
        "title": "get_supported_participant_types > get_supported_participant_types > get_supported_participant_types",
        "section": "get_supported_participant_types > get_supported_participant_types",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_supported_participant_types.get_supported_participant_types(name=None, parent=None)\n\nBases: Command\n\nReturns a list of participant types that are supported by System Coupling.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod IntegerList.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "NamedContainer.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod Filename.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod Boolean.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod RealList.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod StrFloatPairList.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/live_visualization",
        "href": "api/core/settings/_autosummary/api/live_visualization.html#live_visualization",
        "title": "live_visualization",
        "section": "live_visualization",
        "text": "Bases: NamedContainer[live_visualization_child]\nConfigures live visualization via EnSight DVS.\nlive_visualization_child\nParent\nSummary\noutput_control\nConfigure output controls.\nlive_visualization\nNamedContainer\nlive_visualization_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/live_visualization",
        "href": "api/core/settings/_autosummary/api/live_visualization.html#ansys.systemcoupling.core.adaptor.api_25_1.live_visualization.live_visualization",
        "title": "live_visualization > live_visualization > live_visualization",
        "section": "live_visualization > live_visualization",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.live_visualization.live_visualization(name=None, parent=None)\n\nBases: NamedContainer[live_visualization_child]\n\nConfigures live visualization via EnSight DVS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.String.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod String.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/reference_frame",
        "href": "api/core/settings/_autosummary/api/reference_frame.html#reference_frame",
        "title": "reference_frame",
        "section": "reference_frame",
        "text": "Bases: NamedContainer[reference_frame_child]\nProvide a transformation relative to a ParentReferenceFrame.\nreference_frame_child\nParent\nSummary\nlibrary\nContains objects that can be referenced from elsewhere in the data model.\nreference_frame\nNamedContainer\nreference_frame_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/reference_frame",
        "href": "api/core/settings/_autosummary/api/reference_frame.html#ansys.systemcoupling.core.adaptor.api_25_1.reference_frame.reference_frame",
        "title": "reference_frame > reference_frame > reference_frame",
        "section": "reference_frame > reference_frame",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.reference_frame.reference_frame(name=None, parent=None)\n\nBases: NamedContainer[reference_frame_child]\n\nProvide a transformation relative to a ParentReferenceFrame.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/ascii_output",
        "href": "api/core/settings/_autosummary/api/ascii_output.html#ascii_output",
        "title": "ascii_output",
        "section": "ascii_output",
        "text": "Bases: Container\nOutput interface data as ASCII.\nControl ASCII interface data output.\nAllowed values:\n“Off”\n“EveryStep” (for step-based analyses)\n“EveryIteration” (for iteration-based analyses)\nASCII output format type.\nAllowed values:\n“Axdt”\n“Csv”\nParent\nSummary\noutput_control\nConfigure output controls.\nascii_output\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/ascii_output",
        "href": "api/core/settings/_autosummary/api/ascii_output.html#ansys.systemcoupling.core.adaptor.api_25_1.ascii_output.ascii_output",
        "title": "ascii_output > ascii_output > ascii_output",
        "section": "ascii_output > ascii_output",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.ascii_output.ascii_output(name=None, parent=None)\n\nBases: Container\n\nOutput interface data as ASCII.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.solution",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.solution.html#solution",
        "title": "solution",
        "section": "solution",
        "text": "Pythonic client-side form of the System Coupling solution API.\nsolution\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.solution",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.solution.html#ansys.systemcoupling.core.session.Session.solution",
        "title": "solution > solution > solution",
        "section": "solution > solution",
        "text": "property Session.solution: solution_root\n\nPythonic client-side form of the System Coupling solution API.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_participant",
        "href": "api/core/settings/_autosummary/api/coupling_participant.html#coupling_participant",
        "title": "coupling_participant",
        "section": "coupling_participant",
        "text": "Bases: NamedContainer[coupling_participant_child]\nConfigure a coupling participant.\nThese settings are typically populated by using the add_participant\ncommand.\ncoupling_participant_child\nParent\nSummary\nsetup_root\n‘root’ object\ncoupling_participant\nNamedContainer\ncoupling_participant_child\nadd_participant\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_participant",
        "href": "api/core/settings/_autosummary/api/coupling_participant.html#ansys.systemcoupling.core.adaptor.api_25_1.coupling_participant.coupling_participant",
        "title": "coupling_participant > coupling_participant > coupling_participant",
        "section": "coupling_participant > coupling_participant",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.coupling_participant.coupling_participant(name=None, parent=None)\n\nBases: NamedContainer[coupling_participant_child]\n\nConfigure a coupling participant.\n\nThese settings are typically populated by using the add_participant\ncommand.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "StringList.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod StrOrIntDictList.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.upload_file",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.upload_file.html#upload_file",
        "title": "upload_file",
        "section": "upload_file",
        "text": "For internal use only: upload a file to the PIM-managed instance.\nReduces to a no-op if the System Coupling instance is not managed by PIM.\nThe remote file may optionally be given a different name from the local one\nand, if not, any directory prefix is stripped in the PIM case.\nUnless overwrite is True, a FileExistsError will be raised if\nthe remote file already exists.\nlocal file name\nremote file name - default is None\nwhether to overwrite the remote file if it already exists - default is False\nThe remote file name, excluding any directory prefix that might have been\npresent in file_name.\nupload_file\noverwrite\nTrue\nFileExistsError\npython:str\npython:str\noptional\npython:str\nfile_name\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.upload_file",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.upload_file.html#ansys.systemcoupling.core.session.Session.upload_file",
        "title": "upload_file > upload_file > upload_file",
        "section": "upload_file > upload_file",
        "text": "Session.upload_file(file_name, remote_file_name=None, overwrite=False)\n\nFor internal use only: upload a file to the PIM-managed instance.\n\nReduces to a no-op if the System Coupling instance is not managed by PIM.\n\nThe remote file may optionally be given a different name from the local one\nand, if not, any directory prefix is stripped in the PIM case.\n\nUnless overwrite is True, a FileExistsError will be raised if\nthe remote file already exists.\n\nParameters\n\nfile_name\n\npython:str\n\nlocal file name\n\nremote_file_name\n\npython:str, optional\n\nremote file name - default is None\n\noverwrite: bool, optional\n\nwhether to overwrite the remote file if it already exists - default is False\n\nReturns\n\npython:str\n\nThe remote file name, excluding any directory prefix that might have been\npresent in file_name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/case_root",
        "href": "api/core/settings/_autosummary/api/case_root.html#case_root",
        "title": "case_root",
        "section": "case_root",
        "text": "Bases: Container\n‘root’ object\nCommand\nSummary\nclear_state\nClears the state of the entire System Coupling service, removing all\ndelete_snapshot\nDeletes a snapshot if it exists.\nopen\nReads the state of a coupled analysis. The state consists of settings to\nopen_snapshot\nOpens a snapshot containing a previously saved state of the simulation.\nsave\nSaves the state of the coupled analysis data model.\nsave_snapshot\nSaves a snapshot of the current state of the simulation. Snapshot will\ncase_root\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/case_root",
        "href": "api/core/settings/_autosummary/api/case_root.html#ansys.systemcoupling.core.adaptor.api_25_1.case_root.case_root",
        "title": "case_root > case_root > case_root",
        "section": "case_root > case_root",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.case_root.case_root(name=None, parent=None)\n\nBases: Container\n\n‘root’ object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/api_types",
        "href": "api/core/adaptor/api_types.html#api-implementation-types",
        "title": "API implementation types",
        "section": "API implementation types",
        "text": "types\nImplementation types for the System Coupling adaptor API.\nAPI implementation types\nAPI implementation types\ntypes\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.PathCommand.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod PathCommand.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod Integer.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "StrFloatPairList.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "StrOrIntDictListDict.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod String.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.html#ansyssystemcouplingcoreadaptorimpltypesrealvector",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.RealVector",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.RealVector",
        "text": "Provides a RealVector object that represents a 3D vector.\nA RealVector object represents a real vector setting consisting of\nthree real values.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.RealVector\nRealVector\nRealVector\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.RealVector > ansys.systemcoupling.core.adaptor.impl.types.RealVector > RealVector",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.RealVector > RealVector",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.RealVector(name=None, parent=None)\n\nProvides a RealVector object that represents a 3D vector.\n\nA RealVector object represents a real vector setting consisting of\nthree real values.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/settings/_autosummary/api/output_control",
        "href": "api/core/settings/_autosummary/api/output_control.html#output_control",
        "title": "output_control",
        "section": "output_control",
        "text": "Bases: Container\nConfigure output controls.\nSpecifies when restart points are generated.\nAllowed values (step-based analyses only):\n“LastStep” - Generates a restart point only for the last\ncoupling step completed.\n“EveryStep” -\nGenerate a restart point at the end of every coupling step.\n“StepInterval” - Generates a restart point at the end of\ncoupling steps at the interval specified by the output\nfrequency setting.\nAllowed values (iteration-based analyses only):\n“LastIteration” - Generates a restart point only for the\nlast coupling iteration completed.\n“EveryIteration” - Generate a restart point at the end\nof every coupling iteration.\n“IterationInterval” - Generates a restart point at the\nend of coupling iterations at the interval specified by\nthe output frequency setting.\nWrite chart data in CSV format during solve.\nWrite initial snapshot.\nNumber of digits after decimal point in transcript.\nWrite transfer diagnostics dictionary to file.\nWrite mapping weights to file after calculation.\nWrite residuals to results files.\nSpecify output frequency.\nChild\nSummary\nresults\nConfigures output of postprocessing results data.\nascii_output\nOutput interface data as ASCII.\nlive_visualization\nConfigures live visualization via EnSight DVS.\nParent\nSummary\nsetup_root\n‘root’ object\noutput_control\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/output_control",
        "href": "api/core/settings/_autosummary/api/output_control.html#ansys.systemcoupling.core.adaptor.api_25_1.output_control.output_control",
        "title": "output_control > output_control > output_control",
        "section": "output_control > output_control",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.output_control.output_control(name=None, parent=None)\n\nBases: Container\n\nConfigure output controls.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/instancing",
        "href": "api/core/settings/_autosummary/api/instancing.html#instancing",
        "title": "instancing",
        "section": "instancing",
        "text": "Bases: NamedContainer[instancing_child]\nDefine instancing for an interface side.\nAvailable when cylindrical geometry instancing has been added to\nthe data model.\nRotationAxis controls how the axis of rotation is defined.\ninstancing_child\nParent\nSummary\nlibrary\nContains objects that can be referenced from elsewhere in the data model.\ninstancing\nNamedContainer\ninstancing_child\nRotationAxis\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/instancing",
        "href": "api/core/settings/_autosummary/api/instancing.html#ansys.systemcoupling.core.adaptor.api_25_1.instancing.instancing",
        "title": "instancing > instancing > instancing",
        "section": "instancing > instancing",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.instancing.instancing(name=None, parent=None)\n\nBases: NamedContainer[instancing_child]\n\nDefine instancing for an interface side.\n\nAvailable when cylindrical geometry instancing has been added to\nthe data model.\n\nRotationAxis controls how the axis of rotation is defined.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "Integer.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod RealList.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/open_results_in_ensight",
        "href": "api/core/settings/_autosummary/api/open_results_in_ensight.html#open_results_in_ensight",
        "title": "open_results_in_ensight",
        "section": "open_results_in_ensight",
        "text": "Bases: Command\nAllows for System Coupling results to be postprocessed in EnSight.\nWhen this command is issued, System Coupling looks for the results.enc\nfile in the SyC/results subdirectory of the current working directory.\nWhen System Coupling finds the file, it loads the file into EnSight and\ngenerates a confirmation message indicating that results are being opened.\nIf System Coupling is unable to find the results.enc file and/or the\nEnSight executable, then it raises an error.\nThe open_results_in_ensight command may be issued multiple times from the same\ninstance of System Coupling. Each time the command is issued, a new\ninstance of the EnSight application is opened. Any existing instances of\nEnSight remain open, both when additional instances are created and when\nSystem Coupling exits.\nThe basename of the EnSight case file if using a non-standard file\nname. Overrides the default file name results.enc.\nThe path to the EnSight case if using a non-standard location.\nOverrides the default path of SyC/results.\nParent\nSummary\nsolution_root\n‘root’ object\nopen_results_in_ensight\nCommand\nresults.enc\nSyC/results\nresults.enc\nopen_results_in_ensight\npython:str\noptional\nresults.enc\npython:str\noptional\nSyC/results\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/open_results_in_ensight",
        "href": "api/core/settings/_autosummary/api/open_results_in_ensight.html#ansys.systemcoupling.core.adaptor.api_25_1.open_results_in_ensight.open_results_in_ensight",
        "title": "open_results_in_ensight > open_results_in_ensight > open_results_in_ensight",
        "section": "open_results_in_ensight > open_results_in_ensight",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.open_results_in_ensight.open_results_in_ensight(name=None, parent=None)\n\nBases: Command\n\nAllows for System Coupling results to be postprocessed in EnSight.\n\nWhen this command is issued, System Coupling looks for the results.enc\nfile in the SyC/results subdirectory of the current working directory.\n\nWhen System Coupling finds the file, it loads the file into EnSight and\ngenerates a confirmation message indicating that results are being opened.\n\nIf System Coupling is unable to find the results.enc file and/or the\nEnSight executable, then it raises an error.\n\nThe open_results_in_ensight command may be issued multiple times from the same\ninstance of System Coupling. Each time the command is issued, a new\ninstance of the EnSight application is opened. Any existing instances of\nEnSight remain open, both when additional instances are created and when\nSystem Coupling exits.\n\nParameters\n\nfile_name\n\npython:str, optional\n\nThe basename of the EnSight case file if using a non-standard file\nname. Overrides the default file name results.enc.\n\nfile_path\n\npython:str, optional\n\nThe path to the EnSight case if using a non-standard location.\nOverrides the default path of SyC/results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/clear_state",
        "href": "api/core/settings/_autosummary/api/clear_state.html#clear_state",
        "title": "clear_state",
        "section": "clear_state",
        "text": "Bases: InjectedCommand\nClears the state of the entire System Coupling service, removing all\ndata model items, parameter values, and calculated values.\nCannot be run after participants have been started.\nParent\nSummary\ncase_root\n‘root’ object\nclear_state\nInjectedCommand\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/clear_state",
        "href": "api/core/settings/_autosummary/api/clear_state.html#ansys.systemcoupling.core.adaptor.api_25_1.clear_state.clear_state",
        "title": "clear_state > clear_state > clear_state",
        "section": "clear_state > clear_state",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.clear_state.clear_state(name=None, parent=None)\n\nBases: InjectedCommand\n\nClears the state of the entire System Coupling service, removing all\ndata model items, parameter values, and calculated values.\n\nCannot be run after participants have been started.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod StringList.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/save",
        "href": "api/core/settings/_autosummary/api/save.html#save",
        "title": "save",
        "section": "save",
        "text": "Bases: Command\nSaves the state of the coupled analysis data model.\nAnalysis settings are written to a single Settings.h5 file which\ncan be used to reload analysis settings.\nRestart files for all restart points in the current co-simulation will\nbe written when this command is called. Existing restart files from\nprevious System Coupling versions will be renamed to conform to the new\nnaming scheme.\nRestart files are named according to the convention\nRestart_step#.h5 or Restart_iter#.h5, where # is the index of\nthe corresponding coupling step or iteration.\nReturns a Boolean value of True if the files were saved successfully;\notherwise, returns a value of False.\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\nBy default, writes to the SyC sub-directory of the current working\ndirectory. This behavior may be modified by providing file_path.\nWriteable directory to which the SyC directory is added. (Settings and\nresults .h5 files will be written to the SyC directory.)\nParent\nSummary\ncase_root\n‘root’ object\nsave\nCommand\nRestart_step#.h5\nRestart_iter#.h5\n#\nTrue\nFalse\nSyC\nfile_path\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/save",
        "href": "api/core/settings/_autosummary/api/save.html#ansys.systemcoupling.core.adaptor.api_25_1.save.save",
        "title": "save > save > save",
        "section": "save > save",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.save.save(name=None, parent=None)\n\nBases: Command\n\nSaves the state of the coupled analysis data model.\n\nAnalysis settings are written to a single Settings.h5 file which\ncan be used to reload analysis settings.\n\nRestart files for all restart points in the current co-simulation will\nbe written when this command is called. Existing restart files from\nprevious System Coupling versions will be renamed to conform to the new\nnaming scheme.\n\nRestart files are named according to the convention\nRestart_step#.h5 or Restart_iter#.h5, where # is the index of\nthe corresponding coupling step or iteration.\n\nReturns a Boolean value of True if the files were saved successfully;\notherwise, returns a value of False.\n\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\n\nBy default, writes to the SyC sub-directory of the current working\ndirectory. This behavior may be modified by providing file_path.\n\nParameters\n\nfile_path\n\npython:str, optional\n\nWriteable directory to which the SyC directory is added. (Settings and\nresults .h5 files will be written to the SyC directory.)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression",
        "href": "api/core/settings/_autosummary/api/expression.html#expression",
        "title": "expression",
        "section": "expression",
        "text": "Bases: NamedContainer[expression_child]\nDefine a named expression that can be referenced in other expressions.\nexpression_child\nParent\nSummary\nlibrary\nContains objects that can be referenced from elsewhere in the data model.\nexpression\nNamedContainer\nexpression_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression",
        "href": "api/core/settings/_autosummary/api/expression.html#ansys.systemcoupling.core.adaptor.api_25_1.expression.expression",
        "title": "expression > expression > expression",
        "section": "expression > expression",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.expression.expression(name=None, parent=None)\n\nBases: NamedContainer[expression_child]\n\nDefine a named expression that can be referenced in other expressions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.String.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "String.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.html#ansyssystemcouplingcoreadaptorimpltypesstring",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.String",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.String",
        "text": "Provides a String object that represents a string value setting.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.String\nString\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.html#ansys.systemcoupling.core.adaptor.impl.types.String",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.String > ansys.systemcoupling.core.adaptor.impl.types.String > String",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.String > String",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.String(name=None, parent=None)\n\nProvides a String object that represents a string value setting.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod NamedContainer.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "StrOrIntDictList.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "SettingsBase.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod NamedContainer.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_expression_function",
        "href": "api/core/settings/_autosummary/api/add_expression_function.html#add_expression_function",
        "title": "add_expression_function",
        "section": "add_expression_function",
        "text": "Bases: Command\nCreates an expression function object in the data model that makes\navailable an external Python function for use in expressions.\nThe parameters specified should correspond to a module and function\nthat exists and can successfully be loaded when the application\nstarts. Otherwise, the data model object will be created but there\nwill be validation errors and the function will not be available for\nuse.\nThe name of the Python module (in the ‘Modules’ sub-directory of\nthe working directory) from which the function is to be obtained.\nThe name of the function in the module. If no function_name is\nspecified, this will also be the name by which the function should\nbe referenced when used in an expression.\nOptionally specify a different name from function which should be\nthe name used to reference the function in an expression.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_expression_function\nCommand\npython:str\npython:str\nfunction_name\npython:str\noptional\nfunction\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_expression_function",
        "href": "api/core/settings/_autosummary/api/add_expression_function.html#ansys.systemcoupling.core.adaptor.api_25_1.add_expression_function.add_expression_function",
        "title": "add_expression_function > add_expression_function > add_expression_function",
        "section": "add_expression_function > add_expression_function",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_expression_function.add_expression_function(name=None, parent=None)\n\nBases: Command\n\nCreates an expression function object in the data model that makes\navailable an external Python function for use in expressions.\n\nThe parameters specified should correspond to a module and function\nthat exists and can successfully be loaded when the application\nstarts. Otherwise, the data model object will be created but there\nwill be validation errors and the function will not be available for\nuse.\n\nParameters\n\nmodule\n\npython:str\n\nThe name of the Python module (in the ‘Modules’ sub-directory of\nthe working directory) from which the function is to be obtained.\n\nfunction\n\npython:str\n\nThe name of the function in the module. If no function_name is\nspecified, this will also be the name by which the function should\nbe referenced when used in an expression.\n\nfunction_name\n\npython:str, optional\n\nOptionally specify a different name from function which should be\nthe name used to reference the function in an expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod StrFloatPairList.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/fmu_parameter",
        "href": "api/core/settings/_autosummary/api/fmu_parameter.html#fmu_parameter",
        "title": "fmu_parameter",
        "section": "fmu_parameter",
        "text": "Bases: NamedContainer[fmu_parameter_child]\nConfigure a parameter for an FMU coupling participant.\nfmu_parameter_child\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nfmu_parameter\nNamedContainer\nfmu_parameter_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/fmu_parameter",
        "href": "api/core/settings/_autosummary/api/fmu_parameter.html#ansys.systemcoupling.core.adaptor.api_25_1.fmu_parameter.fmu_parameter",
        "title": "fmu_parameter > fmu_parameter > fmu_parameter",
        "section": "fmu_parameter > fmu_parameter",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.fmu_parameter.fmu_parameter(name=None, parent=None)\n\nBases: NamedContainer[fmu_parameter_child]\n\nConfigure a parameter for an FMU coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.html#ansyssystemcouplingcoreadaptorimpltypescontainer",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Container",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Container",
        "text": "Provides a Container object for primitive values and other settings objects.\nA Container may contain child objects that are further objects of\ntype Container, objects of the NamedContainer type, or various\ntypes of command object. Child objects are accessed as attributes.\nConcrete instances of the Container object usually provide access to\nprimitive settings (such as real values and string values) as Python properties.\nThe following attributes are mainly for implementation purposes.\nList of names for the child objects.\nList of names of the commands.\nList of tuples, each comprising property name, System Coupling property name,\nand type identifier.\n__init__([name, parent])\nInitialize an instance of the Container class.\nget_property_options(name)\nGet the currently available options for a specified property\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert native System Coupling property name to Python name.\nto_syc_keys(value)\nConvert value to have keys with System Coupling names.\nto_syc_name(name)\nConvert Python property name to native System Coupling name.\nchild_names\n\ncommand_names\n\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nproperty_names_types\n\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.Container\nContainer\nsettings\nContainer\nContainer\nNamedContainer\ncommand\nContainer\n__init__\nContainer\nget_property_options\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nchild_names\ncommand_names\nobj_name\npath\nproperty_names_types\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.html#ansys.systemcoupling.core.adaptor.impl.types.Container",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Container > ansys.systemcoupling.core.adaptor.impl.types.Container > Container",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Container > Container",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.Container(name=None, parent=None)\n\nProvides a Container object for primitive values and other settings objects.\n\nA Container may contain child objects that are further objects of\ntype Container, objects of the NamedContainer type, or various\ntypes of command object. Child objects are accessed as attributes.\n\nConcrete instances of the Container object usually provide access to\nprimitive settings (such as real values and string values) as Python properties.\n\nThe following attributes are mainly for implementation purposes.\n\nAttributes\n\nchild_names: list[str]\n\nList of names for the child objects.\n\ncommand_names: list[str]\n\nList of names of the commands.\n\nproperty_names_types: List[Tuple[str, str, str]]\n\nList of tuples, each comprising property name, System Coupling property name,\nand type identifier.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Container class.\n\nget_property_options(name)\n\nGet the currently available options for a specified property\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert native System Coupling property name to Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with System Coupling names.\n\nto_syc_name(name)\n\nConvert Python property name to native System Coupling name.\n\n\n\nAttributes\n\n\n\n\n\n\n\nchild_names\n\n\n\ncommand_names\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nproperty_names_types\n\n\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.Real.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod Real.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/fmu_parameter_child",
        "href": "api/core/settings/_autosummary/api/fmu_parameter_child.html#fmu_parameter_child",
        "title": "fmu_parameter_child",
        "section": "fmu_parameter_child",
        "text": "Bases: Container\nConfigure a parameter for an FMU coupling participant.\nFMUParameter’s data type as reported by the participant.\nAllowed values:\nReal\nInteger\nLogical\nString\nEnumeration\nParameter’s display name as defined by the participant solver.\nParameter’s display name as defined in System Coupling.\nReal data start value.\nReal data minimum value.\nReal data maximum value.\nInteger data start value.\nInteger data minimum value.\nInteger data maximum value.\nLogical data start value.\nString data start value.\nEnumeration data start value.\nEnumeration data minimum value.\nEnumeration data maximum value.\nParent\nSummary\nfmu_parameter\nConfigure a parameter for an FMU coupling participant.\nfmu_parameter_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/fmu_parameter_child",
        "href": "api/core/settings/_autosummary/api/fmu_parameter_child.html#ansys.systemcoupling.core.adaptor.api_25_1.fmu_parameter_child.fmu_parameter_child",
        "title": "fmu_parameter_child > fmu_parameter_child > fmu_parameter_child",
        "section": "fmu_parameter_child > fmu_parameter_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.fmu_parameter_child.fmu_parameter_child(name=None, parent=None)\n\nBases: Container\n\nConfigure a parameter for an FMU coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod ParticipantSession.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/delete_snapshot",
        "href": "api/core/settings/_autosummary/api/delete_snapshot.html#delete_snapshot",
        "title": "delete_snapshot",
        "section": "delete_snapshot",
        "text": "Bases: Command\nDeletes a snapshot if it exists.\nName of the snapshot to be deleted.\nParent\nSummary\ncase_root\n‘root’ object\ndelete_snapshot\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/delete_snapshot",
        "href": "api/core/settings/_autosummary/api/delete_snapshot.html#ansys.systemcoupling.core.adaptor.api_25_1.delete_snapshot.delete_snapshot",
        "title": "delete_snapshot > delete_snapshot > delete_snapshot",
        "section": "delete_snapshot > delete_snapshot",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.delete_snapshot.delete_snapshot(name=None, parent=None)\n\nBases: Command\n\nDeletes a snapshot if it exists.\n\nParameters\n\nsnapshot_name\n\npython:str\n\nName of the snapshot to be deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod StrOrIntDictListDict.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod Boolean.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "RealVector.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/system_coupling_concepts",
        "href": "users_guide/system_coupling_concepts.html#system-coupling-concepts",
        "title": "System Coupling concepts",
        "section": "System Coupling concepts",
        "text": "A coupled analysis involves two or more participant solvers. System Coupling is responsible for\ncoordinating the progress of each solution and for transferring variable data between the solvers\nat appropriate points during the solution.\nFor example, in a Fluid-Structure Interaction (FSI) case, pressure data is transferred from the\nfluid to the structural solver, and displacement data is transferred from the structural solver\nto the fluid solver. Because each solver is generally working with a different mesh, the transfer\nof data involves a mapping of the data from one mesh to the other. System Coupling is responsible\nfor performing this task.\nDescriptions follow of the main concepts.\nThese are the solvers, representing different physics types, that are being coupled.\nThe participants expose variables. These are the quantities that are potentially available\nto be transferred.\nThe participants also expose the potential regions on which the data may be transferred.\nFor example, in an FSI case, the relevant fluid regions would be the wall boundaries where\npressure is being transferred to the structure.\nThese are the interfaces between participants.\nEach interface has two sides.\nEach side is associated with a participant and with a subset of the regions exposed by\nthis participant.\nEach interface must define at least one data transfer, which is a one-way transfer of\na particular variable (such as pressure or displacement) between the two participants’\nsides of the transfer’s containing interface. For a given transfer, one of the sides\nis regarded as the source of the data, and the other side is regarded as the target\nof the data. This defines the direction of the transfer.\nA coupled analysis can be one-way or two-way, depending on whether transfers are\ndefined in one or both directions on the interface.\nSetting up a coupled analysis involves populating a hierarchical data model of settings.\nThe data model closely follows the concepts that have been outlined here. For more information,\nsee  ref_syc_datamodel.\nSystem Coupling concepts\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "StrOrIntDictList.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/data_transfer",
        "href": "api/core/settings/_autosummary/api/data_transfer.html#data_transfer",
        "title": "data_transfer",
        "section": "data_transfer",
        "text": "Bases: NamedContainer[data_transfer_child]\nConfigure data transfers for a coupling interface.\ndata_transfer_child\nParent\nSummary\ncoupling_interface_child\nConfigure a coupling interface.\ndata_transfer\nNamedContainer\ndata_transfer_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/data_transfer",
        "href": "api/core/settings/_autosummary/api/data_transfer.html#ansys.systemcoupling.core.adaptor.api_25_1.data_transfer.data_transfer",
        "title": "data_transfer > data_transfer > data_transfer",
        "section": "data_transfer > data_transfer",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.data_transfer.data_transfer(name=None, parent=None)\n\nBases: NamedContainer[data_transfer_child]\n\nConfigure data transfers for a coupling interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Container.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "Container.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "Filename.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#oscillating-plate",
        "title": "Oscillating plate",
        "section": "Oscillating plate",
        "text": "This example is a version of the Oscillating Plate case that is\noften used as a tutorial for System Coupling. This two-way, fluid-structure\ninteraction (FSI) case is based on co-simulation of a transient oscillating\nplate with surface data transfers.\nAnsys Mechanical APDL (MAPDL) is used to perform a transient structural analysis.\nAnsys Fluent is used to perform a transient fluid-flow analysis.\nSystem Coupling coordinates the coupled solution involving the above products to\nsolve the multiphysics problem via co-simulation.\nProblem description\nAn oscillating plate resides within a fluid-filled cavity. A thin plate is\nanchored to the bottom of a closed cavity filled with fluid (air):\nThere is no friction between the plate and the side of the cavity. An\ninitial constant force in x-direction is applied to one side of the thin plate\nfor the first 0.5 seconds to distort it. Once this pressure is released, the plate\noscillates back and forth to regain its equilibrium, and the\nsurrounding air damps this oscillation. The plate and surrounding\nair are simulated for a few oscillations to allow an examination of the\nmotion of the plate as it is damped.\nOscillating plate"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#import-modules-download-files-launch-products",
        "title": "Oscillating plate > Import modules, download files, launch products",
        "section": "Import modules, download files, launch products",
        "text": "Setting up this example consists of performing imports, downloading\nthe input file, and launching the required products.\nImport modules, download files, launch products"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#perform-required-imports",
        "title": "Oscillating plate > Perform required imports",
        "section": "Perform required imports",
        "text": "Import ansys-systemcoupling-core, ansys-fluent-core and\nansys-mapdl-core and other required packages.\nPerform required imports\nansys-systemcoupling-core\nansys-fluent-core\nansys-mapdl-core"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#download-the-input-file",
        "title": "Oscillating plate > Download the input file",
        "section": "Download the input file",
        "text": "This example uses one pre-created file - a Fluent input file that contains\nthe fluids setup.\nDownload the input file"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#launch-products",
        "title": "Oscillating plate > Launch products",
        "section": "Launch products",
        "text": "Launch instances of the Mechanical APDL, Fluent, and System Coupling\nand return client (session) objects that allow you to interact with\nthese products via APIs exposed into the current Python environment.\nLaunch products"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#setup",
        "title": "Oscillating plate > Setup",
        "section": "Setup",
        "text": "The setup consists of setting up the structural analysis,\nthe fluids analysis, and the coupled analysis.\nSetup"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#set-up-the-structural-analysis",
        "title": "Oscillating plate > Set up the structural analysis",
        "section": "Set up the structural analysis",
        "text": "Enter Mechancal APDL setup\nDefine material properties.\nSet element types to SOLID186.\nMake geometry.\nAdd fixed support at y=0.\nAdd the FSI interface.\nSet up the rest of the transient analysis\nSet up the structural analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#set-up-the-fluid-analysis",
        "title": "Oscillating plate > Set up the fluid analysis",
        "section": "Set up the fluid analysis",
        "text": "Read the pre-created case file\nSet up the fluid analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#set-up-the-coupled-analysis",
        "title": "Oscillating plate > Set up the coupled analysis",
        "section": "Set up the coupled analysis",
        "text": "System Coupling setup involves adding the structural and fluid\nparticipants, adding coupled interfaces and data transfers,\nand setting other coupled analysis properties.\nAdd participants by passing session handles to System Coupling.\nAdd a coupling interface and data transfers.\nTime step size, end time, output controls\nSet up the coupled analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#solution",
        "title": "Oscillating plate > Solution",
        "section": "Solution",
        "text": "Solution"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#post-processing",
        "title": "Oscillating plate > Post-processing",
        "section": "Post-processing",
        "text": "Post-process the structural results\nPost-process the fluids results\nPost-process the System Coupling results - display the charts\nshowing displacement and force values during the simulation\nPost-processing"
    },
    {
        "objectID": "examples/00-systemcoupling/oscillating_plate",
        "href": "examples/00-systemcoupling/oscillating_plate.html#exit",
        "title": "Oscillating plate > Exit",
        "section": "Exit",
        "text": "Total running time of the script: (7 minutes 23.898 seconds)\nDownload Jupyter notebook: oscillating_plate.ipynb\nDownload Python source code: oscillating_plate.py\nDownload zipped: oscillating_plate.zip\nGallery generated by Sphinx-Gallery\nExit\nDownload Jupyter notebook: oscillating_plate.ipynb\nDownload Python source code: oscillating_plate.py\nDownload zipped: oscillating_plate.zip\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.html#ansyssystemcouplingcoreadaptorimpltypesbooleanlist",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.BooleanList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.BooleanList",
        "text": "Provides a BooleanList object that represents a Boolean list setting.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.BooleanList\nBooleanList\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.BooleanList > ansys.systemcoupling.core.adaptor.impl.types.BooleanList > BooleanList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.BooleanList > BooleanList",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.BooleanList(name=None, parent=None)\n\nProvides a BooleanList object that represents a Boolean list setting.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "StringList.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/setup",
        "href": "api/core/adaptor/setup.html#analysis-setup-commands",
        "title": "Analysis setup commands",
        "section": "Analysis setup commands",
        "text": "Analysis setup commands are made available in the setup\nattribute on the Session class. This attribute exposes\nSystem Coupling’s data model for setting up an analysis and all commands related\nto this setup.\nFor more information, see the setup_root class.\nAnalysis setup commands\nsetup\nSession\nsetup_root\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.String.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "String.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod NamedContainer.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.keys.html#keys",
        "title": "keys",
        "section": "keys",
        "text": "Object names.\nkeys\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.keys.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.keys",
        "title": "keys > keys > keys",
        "section": "keys > keys",
        "text": "NamedContainer.keys()\n\nObject names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/region_child",
        "href": "api/core/settings/_autosummary/api/region_child.html#region_child",
        "title": "region_child",
        "section": "region_child",
        "text": "Bases: Container\nConfigure a region for the coupling participant.\nRegion topology type.\nAllowed values:\n“Surface”\n“Volume” (3D participants only)\nInput variables for the region or FMU.\nOutput variables for the region or FMU.\nDisplay name of the region.\nRegion discretization type (“Mesh Region” or “Point Cloud Region”).\nParent\nSummary\nregion\nConfigure a region for the coupling participant.\nregion_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/region_child",
        "href": "api/core/settings/_autosummary/api/region_child.html#ansys.systemcoupling.core.adaptor.api_25_1.region_child.region_child",
        "title": "region_child > region_child > region_child",
        "section": "region_child > region_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.region_child.region_child(name=None, parent=None)\n\nBases: Container\n\nConfigure a region for the coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#analysis-setup",
        "title": "Analysis setup",
        "section": "Analysis setup",
        "text": "This page describes the basic workflow for setting up a coupled analysis from scratch.\nIt assumes that a PySystemCoupling Session object (syc_session) has been created.\nThe focus here is on the setup attribute (syc_session.setup) for the Session object.\nThis attribute defines the analysis in terms of the data model.\nFor descriptions of the Session object’s solution and case attributes, see these pages:\nref_syc_solution: Operations related to solving an analysis and examining the solution\nref_syc_persistence: Operations for saving and resuming cases\nAnalysis setup\nSession\nsyc_session\nsetup\nsyc_session.setup\nSession\nSession\nsolution\ncase"
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#set-up-participant-cases",
        "title": "Analysis setup > Set up participant cases",
        "section": "Set up participant cases",
        "text": "Any participant that is involved in a coupled analysis must set up its case to solve its part of\nthe coupled physics analysis. Typically, this is very similar to setting up a standalone case\nfor this solver. Each participant has its own way of specifying data transfers to and from\nSystem Coupling. For example, Fluent uses fluid boundary conditions.\nWhile information on setting up participant cases is beyond the scope of this guide, you\ncan see the System Coupling documentation for examples.\nSet up participant cases"
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#add-participants",
        "title": "Analysis setup > Add participants",
        "section": "Add participants",
        "text": "The add_participant command is used to define information about the participants involved\nin the analysis.\nIn its most common usage, this command accepts a file containing essential data about a participant,\nsuch as the variables it exposes and the regions on which they are available.\nThe name of the created coupling_participant object is returned in each case.\nThis code shows how you can capture the name in a variable to assist with subsequent access\nto the object:\nThe add_participant command not only creates a participant object but also helps\nto initialize other aspects of the data model state. After the preceding code\nadds Fluent and MAPDL participants, the analysis_control, solution_control, and\noutput_control objects are created with default values. For more information,\nsee the following output from the print_state command. Ellipses (...) appear where\ndetails are omitted from the output.\nAdd participants\nadd_participant\ncoupling_participant\nadd_participant\nanalysis_control\nsolution_control\noutput_control\nprint_state\n..."
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#set-unset-values",
        "title": "Analysis setup > Set unset values",
        "section": "Set unset values",
        "text": "In the preceding print_state output, most settings are assigned default values.\nA value of <None> indicates an unset (missing) value.\nFor some settings in the data model, the string \"None\" is a legitimate value.\nFor example, the default for the analysis_control.global_stabilization.option\nsetting is \"None\". To avoid ambiguity, the print_state output\ndisplays <None> for unset values.\nIf queried in Python, an unset value holds the Python None object or an empty list\n([]) for a setting whose value is a list.\nIn the preceding setup, the important unset values are those for solution_control settings.\nThese unset values are addressed later because they are considered to be errors in the setup.\nUnless values are provided, the solution is blocked.\nWhile some settings in the above coupling_participant objects have <None> values, these\nunset values are not considered to be missing values nor indicate any kind of error in the\nsetup. They are rather more specialized optional settings that have not been provided in\nthe relevant input files.\nGenerally, the coupling_participant state can be considered to be read-only once it has\nbeen created. Further edits should not be necessary.\nSet unset values\nprint_state\n<None>\n\"None\"\nanalysis_control.global_stabilization.option\n\"None\"\nprint_state\n<None>\nNone\n[]\nsolution_control\ncoupling_participant\n<None>\ncoupling_participant"
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#create-interfaces",
        "title": "Analysis setup > Create interfaces",
        "section": "Create interfaces",
        "text": "Each coupled analysis must have at least one coupling interface. Coupling interfaces must be\nadded to the analysis individually. When adding a coupling interface, you must specify the\nparticipant name and the regions to be associated with each side of the coupling interface.\nInterface names must be unique within the coupled analysis. When coupling interfaces are added,\nthey are assigned default names according to the convention CouplingInterface#, where #\nindicates the order in which the interfaces were created. For example, if three interfaces are\ncreated, they are named CouplingInterface1, CouplingInterface2, and CouplingInterface3.\nThis code shows how you use the add_interface command to add an interface to the analysis:\nThe add_interface command returns the name of the interface created. This name\nis saved in a variable for later use.\nCreate interfaces\nCouplingInterface#\n#\nCouplingInterface1\nCouplingInterface2\nCouplingInterface3\nadd_interface\nadd_interface"
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#add-data-transfers",
        "title": "Analysis setup > Add data transfers",
        "section": "Add data transfers",
        "text": "Each interface must contain at least one data transfer specification in the form of a\nnamed data_transfer object. When adding a data transfer, you must specify the\ninterface on which the transfer is to be added, the target side for the transfer,\nand the variables to be associated with each side of the interface.\nThe following code shows how you use the add_data_transfer command to add a data transfer\nto an interface. The interface name is the value that is returned by the add_interface\ncommand.\nThis code shows how you can examine the state of the resulting interface:\nAdd data transfers\ndata_transfer\nadd_data_transfer\nadd_interface"
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#check-for-errors-and-finalize-settings",
        "title": "Analysis setup > Check for errors and finalize settings",
        "section": "Check for errors and finalize settings",
        "text": "The setup is essentially complete at this point. However, as mentioned earlier,\nsome unset settings remain. If you were to try to solve the analysis at this\npoint, it would fail immediately with a raised exception because of the unset values.\nTo query for any errors in the setup, call the get_status_messages command. This\ncommand also returns any current warnings, informational messages, and any active settings\nthat are at Alpha or Beta level.\nAs shown in the following code, the return value of the get_status_messages command\nis a list of dictionaries, where each dictionary provides the details of a message. You\ncan use the level field in a message dictionary to filter the message list:\nThe 'path' field in a message dictionary indicates the location in the data model\nto which the message pertains. In the preceding output, this points to the solution_control\nobject, but the specific settings causing the error are indicated in the message itself.\nHowever, the setting names referenced in the message (such as 'TimeStepSize' and\n'EndTime') are in the form that is used in System Coupling’s native API. This reflects the\nway that get_status_messages is exposed into PySystemCoupling, which does not currently\nallow for reliable automatic translation to PySystemCoupling naming. You should\nbe able to infer the PySystemCoupling names relatively easily by assuming a conversion\nfrom camel case to snake case.\nThe following code addresses the 'TimeStepSize' and 'EndTime' errors by assigning values to\nend_time and time_step_size in the solution_control object. These settings define,\nrespectively, the duration of the transient coupled analysis and the time interval between\neach coupling step.\nCheck for errors and finalize settings\nget_status_messages\nget_status_messages\nlevel\n'path'\nsolution_control\n'TimeStepSize'\n'EndTime'\nget_status_messages\n'TimeStepSize'\n'EndTime'\nend_time\ntime_step_size\nsolution_control"
    },
    {
        "objectID": "users_guide/analysis_setup",
        "href": "users_guide/analysis_setup.html#perform-additional-steps",
        "title": "Analysis setup > Perform additional steps",
        "section": "Perform additional steps",
        "text": "By performing the preceding steps, you have created a minimal workflow for a basic analysis\nsetup. With this setup, you can attempt to solve the case. For more information, see\nref_syc_solution.\nAt this time, you might want to save the case or take a snapshot. For more information,\nsee ref_syc_persistence.\nAlthough a complete setup has been defined, you could apply many optional settings.\nFor example, you might want to control the frequency with which solution data is saved or\napply advanced settings to control the solution algorithm.\nIn addition, you can create other data model object types to introduce more advanced\nfeatures, such as expressions and reference frames, to the analysis. While advanced\nfeatures are beyond the scope of this guide, the data model and its contents are fully\ndocumented in ref_index_api. Additional guidance is available in the\nSystem Coupling documentation.\nPerform additional steps\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the NamedContainer class.\nNme of the object if a named-object child. The default\nis None.\nParen to the object. The default is None.\n__init__\nNamedContainer\npython:str\noptional\nNone\nNone\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "NamedContainer.__init__(name=None, parent=None)\n\nInitialize an instance of the NamedContainer class.\n\nParameters\n\nname\n\npython:str, optional\n\nNme of the object if a named-object child. The default\nis None.\n\nparent: Base, optional\n\nParen to the object. The default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.html#ansyssystemcouplingcoreadaptorimpltypesstrorintdictlist",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList",
        "text": "Provides a StrOrIntDictList object that represents a list of simple dictionary values\nwith string keys and string or integer values.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList\nStrOrIntDictList\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList > ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList > StrOrIntDictList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList > StrOrIntDictList",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList(name=None, parent=None)\n\nProvides a StrOrIntDictList object that represents a list of simple dictionary values\nwith string keys and string or integer values.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/settings/_autosummary/api/variable_child",
        "href": "api/core/settings/_autosummary/api/variable_child.html#variable_child",
        "title": "variable_child",
        "section": "variable_child",
        "text": "Bases: Container\nConfigure a variable for the coupling participant.\nQuantity type of the variable.\nAllowed values:\n“Unspecified”\n“Force”\n“Incremental Displacement”\n“Temperature”\n“Heat Rate”\n“Heat Transfer Coefficient”\n“Convection Reference Temperature”\n“Mode Shape”\n“Electrical Conductivity”\nData location of the variable (“Node” or “Element”).\nVariable’s display name as defined by the participant solver.\nVariable’s display name as defined in System Coupling.\nVariable’s data type as reported by the participant.\nAllowed values (non-FMU case):\nReal\nComplex\nAllowed values (FMU):\nReal\nInteger\nLogical\nString\nEnumeration\nReal data start value.\nInteger data start value.\nLogical data start value.\nString data start value.\nEnumeration data start value.\nReal data minimum value.\nReal data maximum value.\nInteger data minimum value.\nInteger data maximum value.\nEnumeration data minimum value.\nEnumeration data maximum value.\nIndicates the variable tensor type (“Scalar” or “Vector”).\n“Vector” is not supported for the FMU case.\nIndicates whether this is an extensive property.\nChild\nSummary\nattribute\nConfigure a variable’s attributes.\nParent\nSummary\nvariable\nConfigure a variable for the coupling participant.\nvariable_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/variable_child",
        "href": "api/core/settings/_autosummary/api/variable_child.html#ansys.systemcoupling.core.adaptor.api_25_1.variable_child.variable_child",
        "title": "variable_child > variable_child > variable_child",
        "section": "variable_child > variable_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.variable_child.variable_child(name=None, parent=None)\n\nBases: Container\n\nConfigure a variable for the coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_ordered_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_ordered_data_transfers.html#add_ordered_data_transfers",
        "title": "add_ordered_data_transfers",
        "section": "add_ordered_data_transfers",
        "text": "Bases: Command\nAdds data transfer for each ordered pair of variables in an FMU-FMU interface.\nReturns the name of the Data Transfers created.\nString indicating the name of the interface on which the data transfer\nis to be created.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_ordered_data_transfers\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_ordered_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_ordered_data_transfers.html#ansys.systemcoupling.core.adaptor.api_25_1.add_ordered_data_transfers.add_ordered_data_transfers",
        "title": "add_ordered_data_transfers > add_ordered_data_transfers > add_ordered_data_transfers",
        "section": "add_ordered_data_transfers > add_ordered_data_transfers",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_ordered_data_transfers.add_ordered_data_transfers(name=None, parent=None)\n\nBases: Command\n\nAdds data transfer for each ordered pair of variables in an FMU-FMU interface.\n\nReturns the name of the Data Transfers created.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface on which the data transfer\nis to be created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/native_api_class",
        "href": "api/core/adaptor/native_api_class.html#nativeapi",
        "title": "NativeApi",
        "section": "NativeApi",
        "text": "Exposes the native System Coupling command and query API into\nPySystemCoupling.\nThis class allows commands and queries to be scripted similarly to how it\nis done in System Coupling’s own command-line interface (CLI). The main difference\nis that rather than being exposed into the global Python environment,\nhere commands and queries are made available as attributes of this class.\nThe path-based syntax of the native API is also supported. However,\ninstead of using the global DatamodelRoot() query as the path root,\nuse the instance of this class as the root. (Note that while\nDatamodelRoot can be called here, it returns the string value\nof the root path, so it cannot be used in the same way as in the System\nCoupling CLI.)\nProvides access to the native System Coupling commands and queries API\nas attributes of this class’s instance.\nFor example, the System Coupling Solve() command can be invoked on an\ninstance of the syc class as follows:\nThis is equivalent to using the execute_command method like this:\nsyc.execute_command('Solve')\nThis method also supports a convenient data model access syntax, which is\nvery close to that available in the native CLI.\nFor example, if System Coupling exposes a data model object SolutionControl,\nthen various operations are supported, as shown below.\nQuery state of object:\nNote that this is an alternative to:\nQuery value of object property:\nSet multiple object object properties:\nSet single property:\nIn general, full “path” access to the data model is supported, including\nnamed object syntax familiar from the native CLI:\nName of the attribute being accessed.\nExecute the named command or query and return the result.\nAll commands and queries take one or more keyword arguments. Some\nof these arguments can be optional, depending on the command or query.\nA query returns a value of a type that is dependent on the\nquery.\nA few commands return a value (again with a type dependent on\nthe command), but most return None.\nNote that the __getattr__-based exposure of the API provides\na more convenient syntax.\nName of the command (or query) to execute.\nKeyword arguments to the command.\nNativeApi\nNativeApi\nDatamodelRoot()\nDatamodelRoot\nSolve()\nsyc\nsyc.execute_command('Solve')\nSolutionControl\nNone\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/native_api_class",
        "href": "api/core/adaptor/native_api_class.html#ansys.systemcoupling.core.native_api.NativeApi",
        "title": "NativeApi > NativeApi > NativeApi",
        "section": "NativeApi > NativeApi",
        "text": "class ansys.systemcoupling.core.native_api.NativeApi(rpc_impl)\n\nExposes the native System Coupling command and query API into\nPySystemCoupling.\n\nThis class allows commands and queries to be scripted similarly to how it\nis done in System Coupling’s own command-line interface (CLI). The main difference\nis that rather than being exposed into the global Python environment,\nhere commands and queries are made available as attributes of this class.\n\nThe path-based syntax of the native API is also supported. However,\ninstead of using the global DatamodelRoot() query as the path root,\nuse the instance of this class as the root. (Note that while\nDatamodelRoot can be called here, it returns the string value\nof the root path, so it cannot be used in the same way as in the System\nCoupling CLI.)\n\n!! processed by numpydoc !!\n\n\n\n__getattr__(name)\n\nProvides access to the native System Coupling commands and queries API\nas attributes of this class’s instance.\n\nFor example, the System Coupling Solve() command can be invoked on an\ninstance of the syc class as follows:\n\nsyc.Solve()\n\nThis is equivalent to using the execute_command method like this:\n\nsyc.execute_command('Solve')\n\nThis method also supports a convenient data model access syntax, which is\nvery close to that available in the native CLI.\n\nFor example, if System Coupling exposes a data model object SolutionControl,\nthen various operations are supported, as shown below.\n\nQuery state of object:\n\nstate = syc.SolutionControl.GetState()\n\nNote that this is an alternative to:\n\nstate = syc.execute_command('GetState',\n                            ObjectPath='/SystemCoupling/SolutionControl')\n\nQuery value of object property:\n\noption = syc.SolutionControl.DurationOption\n\nSet multiple object object properties:\n\nsyc.SolutionControl = {\n    'DurationOption': 'NumberOfSteps',\n    'NumberofSteps': 5\n}\n\nSet single property:\n\nsyc.SolutionControl.NumberOfSteps = 6\n\nIn general, full “path” access to the data model is supported, including\nnamed object syntax familiar from the native CLI:\n\nsyc.CouplingInterface['intf1'].DataTransfer['temp']...\n\nParameters\n\nname\n\nName of the attribute being accessed.\n\n!! processed by numpydoc !!\n\n\n\nexecute_command(name, **kwargs)\n\nExecute the named command or query and return the result.\n\nAll commands and queries take one or more keyword arguments. Some\nof these arguments can be optional, depending on the command or query.\n\nA query returns a value of a type that is dependent on the\nquery.\n\nA few commands return a value (again with a type dependent on\nthe command), but most return None.\n\nNote that the __getattr__-based exposure of the API provides\na more convenient syntax.\n\nParameters\n\nname\n\nName of the command (or query) to execute.\n\nkwargs\n\nKeyword arguments to the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/native_api_class",
        "href": "api/core/adaptor/native_api_class.html#ansys.systemcoupling.core.native_api.NativeApi.__getattr__",
        "title": "NativeApi > NativeApi > __getattr__",
        "section": "NativeApi > __getattr__",
        "text": "__getattr__(name)\n\nProvides access to the native System Coupling commands and queries API\nas attributes of this class’s instance.\n\nFor example, the System Coupling Solve() command can be invoked on an\ninstance of the syc class as follows:\n\nsyc.Solve()\n\nThis is equivalent to using the execute_command method like this:\n\nsyc.execute_command('Solve')\n\nThis method also supports a convenient data model access syntax, which is\nvery close to that available in the native CLI.\n\nFor example, if System Coupling exposes a data model object SolutionControl,\nthen various operations are supported, as shown below.\n\nQuery state of object:\n\nstate = syc.SolutionControl.GetState()\n\nNote that this is an alternative to:\n\nstate = syc.execute_command('GetState',\n                            ObjectPath='/SystemCoupling/SolutionControl')\n\nQuery value of object property:\n\noption = syc.SolutionControl.DurationOption\n\nSet multiple object object properties:\n\nsyc.SolutionControl = {\n    'DurationOption': 'NumberOfSteps',\n    'NumberofSteps': 5\n}\n\nSet single property:\n\nsyc.SolutionControl.NumberOfSteps = 6\n\nIn general, full “path” access to the data model is supported, including\nnamed object syntax familiar from the native CLI:\n\nsyc.CouplingInterface['intf1'].DataTransfer['temp']...\n\nParameters\n\nname\n\nName of the attribute being accessed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/native_api_class",
        "href": "api/core/adaptor/native_api_class.html#ansys.systemcoupling.core.native_api.NativeApi.execute_command",
        "title": "NativeApi > NativeApi > execute_command",
        "section": "NativeApi > execute_command",
        "text": "execute_command(name, **kwargs)\n\nExecute the named command or query and return the result.\n\nAll commands and queries take one or more keyword arguments. Some\nof these arguments can be optional, depending on the command or query.\n\nA query returns a value of a type that is dependent on the\nquery.\n\nA few commands return a value (again with a type dependent on\nthe command), but most return None.\n\nNote that the __getattr__-based exposure of the API provides\na more convenient syntax.\n\nParameters\n\nname\n\nName of the command (or query) to execute.\n\nkwargs\n\nKeyword arguments to the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression_function",
        "href": "api/core/settings/_autosummary/api/expression_function.html#expression_function",
        "title": "expression_function",
        "section": "expression_function",
        "text": "Bases: NamedContainer[expression_function_child]\nMakes an external Python function accessible from expressions.\nexpression_function_child\nParent\nSummary\nlibrary\nContains objects that can be referenced from elsewhere in the data model.\nexpression_function\nNamedContainer\nexpression_function_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression_function",
        "href": "api/core/settings/_autosummary/api/expression_function.html#ansys.systemcoupling.core.adaptor.api_25_1.expression_function.expression_function",
        "title": "expression_function > expression_function > expression_function",
        "section": "expression_function > expression_function",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.expression_function.expression_function(name=None, parent=None)\n\nBases: NamedContainer[expression_function_child]\n\nMakes an external Python function accessible from expressions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "StrOrIntDictListDict.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod Integer.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/connect_ensight_dvs",
        "href": "api/core/settings/_autosummary/api/connect_ensight_dvs.html#connect_ensight_dvs",
        "title": "connect_ensight_dvs",
        "section": "connect_ensight_dvs",
        "text": "Bases: Command\nAllow System Coupling to create DVS clients and connect these clients to\nthe dvs server that is already launched in another process/thread remotely.\nWhen this command is issued, System Coupling is connected to remote EnSight\nand the in-situ data streaming from system coupling to EnSight is ready.\nDVS Server port that System Coupling would connect to. Default value is 50055.\nDVS Server host name that System Coupling would connect to. Default value is “127.0.0.1”.\nParent\nSummary\nsolution_root\n‘root’ object\nconnect_ensight_dvs\nCommand\npython:int\noptional\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/connect_ensight_dvs",
        "href": "api/core/settings/_autosummary/api/connect_ensight_dvs.html#ansys.systemcoupling.core.adaptor.api_25_1.connect_ensight_dvs.connect_ensight_dvs",
        "title": "connect_ensight_dvs > connect_ensight_dvs > connect_ensight_dvs",
        "section": "connect_ensight_dvs > connect_ensight_dvs",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.connect_ensight_dvs.connect_ensight_dvs(name=None, parent=None)\n\nBases: Command\n\nAllow System Coupling to create DVS clients and connect these clients to\nthe dvs server that is already launched in another process/thread remotely.\n\nWhen this command is issued, System Coupling is connected to remote EnSight\nand the in-situ data streaming from system coupling to EnSight is ready.\n\nParameters\n\nport\n\npython:int, optional\n\nDVS Server port that System Coupling would connect to. Default value is 50055.\n\nhost_name\n\npython:str, optional\n\nDVS Server host name that System Coupling would connect to. Default value is “127.0.0.1”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "BooleanList.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "11:49.147 total execution time for 4 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-systemcoupling_oscillating_plate.py (../../examples/00-systemcoupling/oscillating_plate.py)\n07:23.898\n0.0\nsphx_glr_examples_00-systemcoupling_turek_hron_fsi2.py (../../examples/00-systemcoupling/turek_hron_fsi2.py)\n02:23.926\n0.0\nsphx_glr_examples_00-systemcoupling_fluid_swirl.py (../../examples/00-systemcoupling/fluid_swirl.py)\n01:26.914\n0.0\nsphx_glr_examples_00-systemcoupling_heating_tank_fmu_fmu.py (../../examples/00-systemcoupling/heating_tank_fmu_fmu.py)\n00:34.409\n0.0\nComputation times\n../../examples/00-systemcoupling/oscillating_plate.py\n../../examples/00-systemcoupling/turek_hron_fsi2.py\n../../examples/00-systemcoupling/fluid_swirl.py\n../../examples/00-systemcoupling/heating_tank_fmu_fmu.py\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert native System Coupling property name to Python name.\nThe name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod Container.to_python_name(name)\n\nConvert native System Coupling property name to Python name.\n\nThe name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/syc_datamodel",
        "href": "users_guide/syc_datamodel.html#system-coupling-data-model",
        "title": "System Coupling data model",
        "section": "System Coupling data model",
        "text": "The System Coupling data model is a hierarchical structure represented in the PySystemCoupling API\nas nested attributes. Ultimately, the nested attributes end at primitive values, which are the\nbasic settings defining the setup. The nested structure allows the data to be organized in a way\nthat fits with the underlying concepts of a System Coupling analysis.\nSystem Coupling data model"
    },
    {
        "objectID": "users_guide/syc_datamodel",
        "href": "users_guide/syc_datamodel.html#data-model-structure",
        "title": "System Coupling data model > Data model structure",
        "section": "Data model structure",
        "text": "The following image shows the hierarchy of objects in the System Coupling data model. These objects\nhold a collection of primitive settings and/or additional child objects. The primitive settings\nare named values of different value types, such as integer, boolean, and string.\nIn the image, highlighting distinguishes items representing objects at a level of the\nhierarchy with only one unnamed instance versus multiple named instances:\nHighlighted items represent objects for which only one unnamed instance can exist at this level\n(singletons).\nNon-highlighted items represent objects for which multiple named instances can exist at this\nlevel.\nIn general, object names can be freely chosen. The exception is the side object, for which exactly\ntwo instances exist. These two instances have fixed names: One and Two.\nData model structure\ninteger\nboolean\nstring\nside\nOne\nTwo"
    },
    {
        "objectID": "users_guide/syc_datamodel",
        "href": "users_guide/syc_datamodel.html#access-the-data-model",
        "title": "System Coupling data model > Access the data model",
        "section": "Access the data model",
        "text": "The setup attribute of the Session object is used to access the data model. The objects in the data model are\nattributes of the setup attribute. For example, this code accesses the analysis_control object:\nAs noted, the data model objects hold basic settings of different value types.\nFor example, the analysis_control object contains an analysis_type setting having a\nstring value type. Valid values are Steady and Transient. This setting\ndefines the type of analysis to be performed.\nThis code shows how you set and query the analysis_type setting:\nTo access a named object, use a syntax like Python dictionary lookups:\nAccess the data model\nsetup\nSession\nsetup\nanalysis_control\nanalysis_control\nanalysis_type\nstring\nSteady\nTransient\nanalysis_type"
    },
    {
        "objectID": "users_guide/syc_datamodel",
        "href": "users_guide/syc_datamodel.html#populate-the-data-model",
        "title": "System Coupling data model > Populate the data model",
        "section": "Populate the data model",
        "text": "The preceding code examples assume that the data model is already populated with data, so that the\nobjects referenced from the hierarchy already exist. This would be the situation when you modify\nan existing case, perhaps one that had previously been set up and saved, and you have now re-opened.\nWhen setting up an analysis from scratch, you must create the objects. In principle,\nyou can do this using direct, low-level, operations on the data model, but this is not recommended.\nInstead,you should use the higher-level commands that are provided by the\nAPI. For more information, see ref_syc_analysis_setup.\nNevertheless, it can sometimes be useful to know how to create an object directly in the\ndata model, as shown in the following code examples.\nYou can access unnamed objects, such as analysis_control attributes, even when\nthey are initially empty. You can confirm this using the print_state() method:\nWhen you apply a setting to such an object, this not only sets a value for the specified\nsetting but also sets the default values for other settings (where possible):\nTo create a named object instance, use the create() method on the\nobject’s type attribute:\nThe preceding code examples are for illustration only. A coupling_participant\nobject requires very specific data for it to be initialized in a useful manner. Usually,\nthis data is derived from some external source. The add_participant() command,\nwhich is the recommended method for creating a participant, exists to help with this.\nThis command and various other commands are available as methods on the session’s\nsetup attribute. For more information, see ref_syc_analysis_setup and\nref_setup.\nPopulate the data model\nanalysis_control\nprint_state()\ncreate()\ncoupling_participant\nadd_participant()\nsetup\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_interface",
        "href": "api/core/settings/_autosummary/api/add_interface.html#add_interface",
        "title": "add_interface",
        "section": "add_interface",
        "text": "Bases: Command\nAdds an interface based on the participant and region names specified\nas arguments for each side of the interface. This command requires that\nyou specify participants using their names as described below in\nEssential Keyword Arguments. Non-FMU participants must provide a list\nof regions as described below in Optional Keyword Arguments. For FMU\ninterfaces, specifying the regions are not allowed.\nCannot be run after participants have been started.\nReturns the name of the Interface created.\nString indicating the name of the participant to be associated with\nside “One” of the interface.\nString indicating the name of the participant to be associated with\nside “Two”of the interface.\nList specifying the name(s) of region(s) to be added to side One of\nthe interface. Must be provided if side_one_participant is not an FMU.\nList specifying the name(s) of region(s) to be added to side Two of\nthe interface. Must be provided if side_one_participant is not an FMU.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_interface\nCommand\npython:str\npython:str\nList\noptional\nside_one_participant\nList\noptional\nside_one_participant\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_interface",
        "href": "api/core/settings/_autosummary/api/add_interface.html#ansys.systemcoupling.core.adaptor.api_25_1.add_interface.add_interface",
        "title": "add_interface > add_interface > add_interface",
        "section": "add_interface > add_interface",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_interface.add_interface(name=None, parent=None)\n\nBases: Command\n\nAdds an interface based on the participant and region names specified\nas arguments for each side of the interface. This command requires that\nyou specify participants using their names as described below in\nEssential Keyword Arguments. Non-FMU participants must provide a list\nof regions as described below in Optional Keyword Arguments. For FMU\ninterfaces, specifying the regions are not allowed.\n\nCannot be run after participants have been started.\n\nReturns the name of the Interface created.\n\nParameters\n\nside_one_participant\n\npython:str\n\nString indicating the name of the participant to be associated with\nside “One” of the interface.\n\nside_two_participant\n\npython:str\n\nString indicating the name of the participant to be associated with\nside “Two”of the interface.\n\nside_one_regions\n\nList, optional\n\nList specifying the name(s) of region(s) to be added to side One of\nthe interface. Must be provided if side_one_participant is not an FMU.\n\nside_two_regions\n\nList, optional\n\nList specifying the name(s) of region(s) to be added to side Two of\nthe interface. Must be provided if side_one_participant is not an FMU.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "StrFloatPairList.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/parameter_child",
        "href": "api/core/settings/_autosummary/api/parameter_child.html#parameter_child",
        "title": "parameter_child",
        "section": "parameter_child",
        "text": "Bases: Container\nConfigure a parameter for the coupling participant.\nParameter’s display name as defined by the participant solver.\nParameter’s display name as defined in System Coupling.\nParameter’s data type as reported by the participant.\nAllowed values:\nReal\nIndicates the parameter tensor type (“Scalar” only).\nParent\nSummary\nparameter\nConfigure a parameter for the coupling participant.\nparameter_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/parameter_child",
        "href": "api/core/settings/_autosummary/api/parameter_child.html#ansys.systemcoupling.core.adaptor.api_25_1.parameter_child.parameter_child",
        "title": "parameter_child > parameter_child > parameter_child",
        "section": "parameter_child > parameter_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.parameter_child.parameter_child(name=None, parent=None)\n\nBases: Container\n\nConfigure a parameter for the coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod Real.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "StrOrIntDictListDict.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "Filename.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod SettingsBase.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/initialize",
        "href": "api/core/settings/_autosummary/api/initialize.html#initialize",
        "title": "initialize",
        "section": "initialize",
        "text": "Bases: Command\nInteractive command that initializes a coupled analysis.\nInitialization includes preparing System Coupling, making connections\nbetween System Coupling and all participants, starting participants (if\nnecessary), and writing participant build information to the Transcript\nand Log.\nNote that if the execution_control option for a participant is set to\n“ExternallyManaged”, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\nParent\nSummary\nsolution_root\n‘root’ object\ninitialize\nCommand\nexecution_control\noption\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/initialize",
        "href": "api/core/settings/_autosummary/api/initialize.html#ansys.systemcoupling.core.adaptor.api_25_1.initialize.initialize",
        "title": "initialize > initialize > initialize",
        "section": "initialize > initialize",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.initialize.initialize(name=None, parent=None)\n\nBases: Command\n\nInteractive command that initializes a coupled analysis.\n\nInitialization includes preparing System Coupling, making connections\nbetween System Coupling and all participants, starting participants (if\nnecessary), and writing participant build information to the Transcript\nand Log.\n\nNote that if the execution_control option for a participant is set to\n“ExternallyManaged”, then System Coupling will not start the participant\nusing either this command or any of the other commands that automatically\nstart participants. The user is expected to manually start the participant.\nThis function will not return until all participants have been connected.\n\nNote that this command will raise an exception if another instance of\nSystem Coupling is solving in the current working directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod Real.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Real.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod Real.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.Base.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "Base.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "StrOrIntDictList.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod StringList.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/global_stabilization",
        "href": "api/core/settings/_autosummary/api/global_stabilization.html#global_stabilization",
        "title": "global_stabilization",
        "section": "global_stabilization",
        "text": "Bases: Container\nGlobal stabilization settings.\nStabilization type.\nAllowed values:\n“None”\n“Quasi-Newton”\nNumber of pre-stabilization iterations to perform.\nRelaxation factor applied for pre-stabilization iterations.\nControls the maximum number of timesteps to retain.\nControls the maximum number of iterations to retain.\nControls the maximum number of timesteps to retain.\nValues are interpreted as:\n0 : none\n1 : basic\n2 : advanced\n3 : write matrix files\nWeight factor when multiple transfers are stabilized.\nAllowed values:\n“Constant”\n“Value”\n“Residual”\n“ResidualSum”\n“InverseResidual”\n“InverseResidualSum”\nQR filter tolerance for current step.\nQR filter tolerance for old steps.\nSVD singular value tolerance for rank-deficiency\nQR solver options.\nAllowed values:\n“QR_MGS”\n“QR_augmentedMGS” (default)\n“QR_pivot”\n“SVD”\n“SVD_augmented”\nParent\nSummary\nanalysis_control\nConfigure coupling controls.\nglobal_stabilization\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/global_stabilization",
        "href": "api/core/settings/_autosummary/api/global_stabilization.html#ansys.systemcoupling.core.adaptor.api_25_1.global_stabilization.global_stabilization",
        "title": "global_stabilization > global_stabilization > global_stabilization",
        "section": "global_stabilization > global_stabilization",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.global_stabilization.global_stabilization(name=None, parent=None)\n\nBases: Container\n\nGlobal stabilization settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.html#ansyssystemcouplingcoreadaptorimpltypessettingsbase",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.SettingsBase",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.SettingsBase",
        "text": "Provides the base class for settings objects.\nget_state()\nGet the current state of the object.\nset_state(state)\nSet the state of the object.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.SettingsBase\nsettings\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.SettingsBase > ansys.systemcoupling.core.adaptor.impl.types.SettingsBase > SettingsBase",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.SettingsBase > SettingsBase",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.SettingsBase(name=None, parent=None)\n\nProvides the base class for settings objects.\n\nMethods\n\n\n\n\n\nget_state()\n\nGet the current state of the object.\n\nset_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.String.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "String.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#pysystemcoupling-documentation-091",
        "title": "PySystemCoupling documentation 0.9.1",
        "section": "PySystemCoupling documentation 0.9.1",
        "text": "PySystemCoupling documentation 0.9.1"
    },
    {
        "objectID": "index",
        "href": "index.html#what-is-ansys-system-coupling",
        "title": "PySystemCoupling documentation 0.9.1 > What is Ansys System Coupling?",
        "section": "What is Ansys System Coupling?",
        "text": "The Ansys portfolio of simulation software allows you to create multidisciplinary physics analyses,\nnot only within the context of a single product but also through the use of Ansys System Coupling.\nSystem Coupling is software for solving multiphysics problems by connecting independent physics\nsolvers and coordinating the exchange of the solution data. This enables accurate capturing of the\ncomplex interactions between physical models, typically simulated in separate solvers.\nSystem Coupling connects to several existing Ansys physics solvers, including Ansys Fluent, Ansys CFX,\nAnsys Forte, Ansys MAPDL, and Ansys Electronics Desktop. Examples of problems that can be solved\nby System Coupling include Fluid-Structure Interaction (FSI), Conjugate Heat Transfer (CHT), and Joule\nHeating.\nSystem Coupling capabilities include the ability to:\nSolve steady and transient coupled analyses\nCouple surface and volume regions\nCouple any scalar or vector, real or complex fields\nWhat is Ansys System Coupling?"
    },
    {
        "objectID": "index",
        "href": "index.html#what-is-pysystemcoupling",
        "title": "PySystemCoupling documentation 0.9.1 > What is PySystemCoupling?",
        "section": "What is PySystemCoupling?",
        "text": "PySystemCoupling is part of the PyAnsys ecosystem. It lets you\nuse System Coupling within or alongside any Python environment, whether in conjunction\nwith other Ansys Python libraries and packages or with other external Python products.\nPySystemCoupling implements a client-server architecture. Internally, it uses\nGoogle remote procedure call (gRPC) interfaces to launch or connect\nwith a running System Coupling process as a server. However, you only need to interact\nwith the Python interface.\nYou can use PySystemCoupling to programmatically create, interact with, and control a\nSystem Coupling session to create your own customized workspace. In addition, you can\nuse PySystemCoupling to enhance your productivity with highly configurable,\ncustomized scripts.\nWhat is PySystemCoupling?"
    },
    {
        "objectID": "index",
        "href": "index.html#license",
        "title": "PySystemCoupling documentation 0.9.1 > License",
        "section": "License",
        "text": "PySystemCoupling is licensed under the MIT license.\nThe ansys-systemcoupling-core package makes no commercial claim over Ansys\nwhatsoever.  It extends the functionality of Ansys System Coupling by\nadding a Python interface to the System Coupling service without changing the\ncore behavior or license of the original software. Interactively controlling\nSystem Coupling via PySystemCoupling requires a legally licensed\nlocal copy of System Coupling.\nFor more information about System Coupling,\nvisit the Ansys System Coupling page on the Ansys website.\nLicense\nansys-systemcoupling-core"
    },
    {
        "objectID": "index",
        "href": "index.html#project-index",
        "title": "PySystemCoupling documentation 0.9.1 > Project index",
        "section": "Project index",
        "text": "genindex\nProject index\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/mapping_control",
        "href": "api/core/settings/_autosummary/api/mapping_control.html#mapping_control",
        "title": "mapping_control",
        "section": "mapping_control",
        "text": "Bases: Container\nConfigure controls for mapping.\nControls whether to stop if the intersection is poor\nSystem Coupling terminates with an error if the intersected fractions are below this threshold (in both directions)\nControls how face alignment is used during mapping.\nAllowed values:\n“ProgramControlled” (default)\n“OppositeOrientation”\n“SameOrientation”\n“AnyOrientation”\nAbsolute gap tolerance value.\nMaximum gap size relative to face size.\nRelative tolerance used to control when weights are dropped.\nAngle [degrees] between adjacent source mesh faces above which the\nmapping algorithm will stop searching for mapping candidates.\nIf a face intersects but a target node lies outside of the source face, then\nmap the node if the projected distance to the face / sqrt(srcArea) is less\nthan this tolerance, otherwise leave as unmapped.\nReciprocity blend factor for conservative mapping.\nReciprocity blend factor for profile-preserving mapping.\nDetermines when the Intensive option is used for conservative mapping.\nAllowed values:\n“ProgramControlled” (default)\n“Off”\n“On”\nDetermines if the normal component of a vector is preserved.\nAllowed values:\n“ProgramControlled” (default)\n“Off”\n“On”\nSource element overlap fraction to trigger volume mapping conservation fix.\n0.0 is default. 1.0 effectively disables it.\nControls radial basis function formulation.\nAllowed values:\n“Gaussian” (default)\n“ThinPlateSpline”\nSets the shape parameter beta when using Gaussian radial basis functions.\nControls whether linear polynomial augmentation is added to the RBF stencil for\nlow order regular element types (tet, hex, pyramid, wedge).\nLength scale factor used to determine if source nodes are removed from RBF\nstencil when too close.\nLength scale factor at which to start tapering the extrapolative effect for profile-preserving mapping.\nMaximum factor allowed to extrapolate for profile-preserving mapping.\nControls whether to clip target values to the min/max of the local source values for profile-preserving transfers.\nParent\nSummary\ncoupling_interface_child\nConfigure a coupling interface.\nmapping_control\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/mapping_control",
        "href": "api/core/settings/_autosummary/api/mapping_control.html#ansys.systemcoupling.core.adaptor.api_25_1.mapping_control.mapping_control",
        "title": "mapping_control > mapping_control > mapping_control",
        "section": "mapping_control > mapping_control",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.mapping_control.mapping_control(name=None, parent=None)\n\nBases: Container\n\nConfigure controls for mapping.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod StrOrIntDictList.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar with\nthis guide before attempting to contribute to PySystemCoupling.\nThe following contribution information is specific to PySystemCoupling.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest PySystemCoupling release in development\nmode, run:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-the-generated-api-code",
        "title": "Contribute > Build the generated API code",
        "section": "Build the generated API code",
        "text": "In the packaged version of PySystemCoupling, Python classes are generated during the\npackage build to provide an API to System Coupling facilities. The classes are largely\ngenerated from metadata queried from a running instance of System Coupling.\nFor local development, you must perform this additional generation step manually,\nafter the preceding steps for cloning and installing the package.\nThe generated code is written to the directory src/ansys/systemcoupling/core/adaptor/api_<version>,\nwhere <version> is the version of the System Coupling instance that was run in the background\nby the generation script. For example, the version 25_1 corresponds to the System Coupling 2024 R2.\nThe default is 25_1, which means that this release of System Coupling is expected to be at the\ninstallation location given by the AWP_ROOT251 environment variable.\nYou can override the default behavior and run a different version, and generate the API classes for\nthis different version, by setting either the SYSC_ROOT environment variable to point to the\nroot directory of your System Coupling installation or the AWP_ROOT environment variable to\npoint to the root of an Ansys installation. If SYSC_ROOT and AWP_ROOT environment variables\nare both set, the former takes priority. Additionally, both of these environment variables take priority\nover the AWP_ROOT251 environment variable.\nBuild the generated API code\nsrc/ansys/systemcoupling/core/adaptor/api_<version>\n<version>\n25_1\n25_1\nAWP_ROOT251\nSYSC_ROOT\nAWP_ROOT\nSYSC_ROOT\nAWP_ROOT\nAWP_ROOT251"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-documentation",
        "title": "Contribute > Build documentation",
        "section": "Build documentation",
        "text": "Before building the PySystemCoupling documentation locally, ensure that you have followed the\nsteps to generate the API classes as described in ref_generate_api. This is necessary\nbecause some of the documentation is extracted from these API classes.\nBecause multiple versions of the API classes can exist, you must set the PYSYC_DOC_BUILD_VERSION\nenvironment variable to tell the documentation build which version to use. Given that there is\nno default for this environment variable, you must set it. The value should be a string in the\nsame form as the <version> component of the api_<version> directory. For example,\n“24_1”.\nWith this variable set, run these commands to build the documentation:\nAfter the build completes, the HTML documentation is located in the\n_builds/html directory. You can load the index.html file in\nthis directory into a web browser.\nYou can clear all HTML files from the _builds/html directory with:\nBuild documentation\nPYSYC_DOC_BUILD_VERSION\n<version>\napi_<version>\n_builds/html\nindex.html\n_builds/html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#run-sphinx-gallery-examples",
        "title": "Contribute > Run Sphinx Gallery examples",
        "section": "Run Sphinx Gallery examples",
        "text": "The Sphinx Gallery examples are not run as part of a local documentation build by\ndefault.\nTo override the default behavior and rebuild the entire documentation, including\nregeneration of the Sphinx Gallery examples, set the PYSYC_BUILD_SPHINX_GALLERY\nenvironment variable. Because only its existence is examined, you can give any value\nto this environment variable.\nRun Sphinx Gallery examples\nPYSYC_BUILD_SPHINX_GALLERY"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PySystemCoupling Issues page to\nsubmit questions, report bugs, and request new features.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PySystemCoupling is compliant with the PyAnsys code style. It uses the tool\npre-commit to check the code style. You can\ninstall and activate this tool with:\nWhen pre-commit is active, it automatically runs style checks on every git commit\nto your branch.\nAlternatively, you can directly run pre-commit at any time\nwith this command:\nAdhere to code style\ngit commit\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "Boolean.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.Container.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "Container.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Real.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "Real.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/data_transfer_child",
        "href": "api/core/settings/_autosummary/api/data_transfer_child.html#data_transfer_child",
        "title": "data_transfer_child",
        "section": "data_transfer_child",
        "text": "Bases: Container\nConfigure data transfers for a coupling interface.\nDisplay name of the data transfer.\nControls whether this data transfer is suppressed\nTarget side (“One” or “Two”) of this data transfer.\nHow the transfer data is specified.\nAllowed values:\n“UsingVariable” - The data being transferred is defined as a\nsingle source-side variable.\n“UsingExpression” - The data being transferred is defined as\nan expression in terms of source-side variables.\nVariable associated with the source side of the interface.\nSpecified only for variable-based transfers (and not expression-based).\nVariable associated with the target side of the interface.\nExpression string (or constant real value) defining the data being\ntransferred from the source.\nSpecified only for expression-based transfers.\nAny variable referenced must be a source side variable.\nSpecify whether to apply ramping to the data transfer.\nRamping is used to slow the application of the source-side value on the\ntarget side of the interface.\nAllowed values:\n“None” - No ramping to be applied.\n“Linear” - Apply linear ramping.\nFactor multiplying the current data transfer values for specified quantity when\nunder-relaxing them against the previous values.\nRMS-based target value used when evaluating convergence of the specified\nquantity within a coupling iteration.\nType of mapping used for the data transfer. (Read only.)\nPossible values:\n“Conservative” - A conservative mapping algorithm is used\nfor transfers of extensive quantities.\n“ProfilePreserving” - A profile-preserving mapping algorithm\nis used for transfers of intensive quantities.\nOption to fill target values not mapped by the regular mapping algorithm\nMethod to initialize first transfer in new coupling step.\nChild\nSummary\nstabilization\nStabilization and Acceleration method.\nParent\nSummary\ndata_transfer\nConfigure data transfers for a coupling interface.\ndata_transfer_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/data_transfer_child",
        "href": "api/core/settings/_autosummary/api/data_transfer_child.html#ansys.systemcoupling.core.adaptor.api_25_1.data_transfer_child.data_transfer_child",
        "title": "data_transfer_child > data_transfer_child > data_transfer_child",
        "section": "data_transfer_child > data_transfer_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.data_transfer_child.data_transfer_child(name=None, parent=None)\n\nBases: Container\n\nConfigure data transfers for a coupling interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_add_data_transfer_group_commands",
        "href": "api/core/settings/_autosummary/api/get_add_data_transfer_group_commands.html#get_add_data_transfer_group_commands",
        "title": "get_add_data_transfer_group_commands",
        "section": "get_add_data_transfer_group_commands",
        "text": "Bases: Command\nGiven an interface name, returns a list with possible commands\nfor adding data transfer groups.\nString indicating the name of the interface.\nParent\nSummary\nsetup_root\n‘root’ object\nget_add_data_transfer_group_commands\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_add_data_transfer_group_commands",
        "href": "api/core/settings/_autosummary/api/get_add_data_transfer_group_commands.html#ansys.systemcoupling.core.adaptor.api_25_1.get_add_data_transfer_group_commands.get_add_data_transfer_group_commands",
        "title": "get_add_data_transfer_group_commands > get_add_data_transfer_group_commands > get_add_data_transfer_group_commands",
        "section": "get_add_data_transfer_group_commands > get_add_data_transfer_group_commands",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_add_data_transfer_group_commands.get_add_data_transfer_group_commands(name=None, parent=None)\n\nBases: Command\n\nGiven an interface name, returns a list with possible commands\nfor adding data transfer groups.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/write_ensight",
        "href": "api/core/settings/_autosummary/api/write_ensight.html#write_ensight",
        "title": "write_ensight",
        "section": "write_ensight",
        "text": "Bases: Command\nWrite a file with mesh and results which can be loaded into Ensight for\npost processing.\nBase name for Ensight files. It will generate <base>.encas file which\nshould be loaded into Ensight. Other files are generated for geometry\nand variables.\nTo control if file is to be written in binary format or ASCII. ASCII\nslows down performance, but may be useful for debugging and seeing\nraw data.\nParent\nSummary\nsolution_root\n‘root’ object\nwrite_ensight\nCommand\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/write_ensight",
        "href": "api/core/settings/_autosummary/api/write_ensight.html#ansys.systemcoupling.core.adaptor.api_25_1.write_ensight.write_ensight",
        "title": "write_ensight > write_ensight > write_ensight",
        "section": "write_ensight > write_ensight",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.write_ensight.write_ensight(name=None, parent=None)\n\nBases: Command\n\nWrite a file with mesh and results which can be loaded into Ensight for\npost processing.\n\nParameters\n\nfile_name\n\npython:str\n\nBase name for Ensight files. It will generate <base>.encas file which\nshould be loaded into Ensight. Other files are generated for geometry\nand variables.\n\nbinary\n\nbool, optional\n\nTo control if file is to be written in binary format or ASCII. ASCII\nslows down performance, but may be useful for debugging and seeing\nraw data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "Boolean.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.Command.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod Command.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_setup_summary",
        "href": "api/core/settings/_autosummary/api/get_setup_summary.html#get_setup_summary",
        "title": "get_setup_summary",
        "section": "get_setup_summary",
        "text": "Bases: InjectedCommand\nReturns a string containing a formatted summary of the\ncoupled analysis setup.\nThis summary is printed in the System Coupling transcript\noutput at the beginning of a solve. However, it is sometimes\nuseful to see the summary before starting the solve.\nThe summary output is generated by System Coupling and is not\nmodified for PySystemCoupling purposes. Any datamodel type names\nthat are referenced in the summary therefore might not\nbe fully consistent with PySystemCoupling conventions.\nParent\nSummary\nsetup_root\n‘root’ object\nget_setup_summary\nInjectedCommand\ndatamodel\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_setup_summary",
        "href": "api/core/settings/_autosummary/api/get_setup_summary.html#ansys.systemcoupling.core.adaptor.api_25_1.get_setup_summary.get_setup_summary",
        "title": "get_setup_summary > get_setup_summary > get_setup_summary",
        "section": "get_setup_summary > get_setup_summary",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_setup_summary.get_setup_summary(name=None, parent=None)\n\nBases: InjectedCommand\n\nReturns a string containing a formatted summary of the\ncoupled analysis setup.\n\nThis summary is printed in the System Coupling transcript\noutput at the beginning of a solve. However, it is sometimes\nuseful to see the summary before starting the solve.\n\nThe summary output is generated by System Coupling and is not\nmodified for PySystemCoupling purposes. Any datamodel type names\nthat are referenced in the summary therefore might not\nbe fully consistent with PySystemCoupling conventions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_options",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_options.html#get_property_options",
        "title": "get_property_options",
        "section": "get_property_options",
        "text": "Get the currently available options for a specified property\nThis method is applicable as follows:\n:rtype: StringList\nIt may only be called for String and StringList properties. An\nexception is thrown otherwise.\nIt should only be called for properties that are known currently to be\nactive in the data model. This requirement is not yet enforced or validated.\nHowever, if it is violated, the content of any value returned is unspecified.\nIt should only be called for properties that are known to be constrained\nto a certain list of allowed values. An empty list is returned in other\ncases.\nget_property_options\nStringList\nString\nStringList\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_options",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_options.html#ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_options",
        "title": "get_property_options > get_property_options > get_property_options",
        "section": "get_property_options > get_property_options",
        "text": "Container.get_property_options(name)\n\nGet the currently available options for a specified property\n\nThis method is applicable as follows:\n:rtype: StringList\n\nIt may only be called for String and StringList properties. An\nexception is thrown otherwise.\n\nIt should only be called for properties that are known currently to be\nactive in the data model. This requirement is not yet enforced or validated.\nHowever, if it is violated, the content of any value returned is unspecified.\n\nIt should only be called for properties that are known to be constrained\nto a certain list of allowed values. An empty list is returned in other\ncases.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "ParticipantSession.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod SettingsBase.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "StrFloatPairList.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "Filename.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/import_system_coupling_input_file",
        "href": "api/core/settings/_autosummary/api/import_system_coupling_input_file.html#import_system_coupling_input_file",
        "title": "import_system_coupling_input_file",
        "section": "import_system_coupling_input_file",
        "text": "Bases: Command\nReads the specified System Coupling SCI file and pushes its information\ninto the data model. The SCI file is the required System Coupling input\nformat for the initial run of a coupled analysis set up in Workbench.\nAfter the initial run based on an imported SCI file, a reissue\nof the import_system_coupling_input_file command is unnecessary and is\nnot recommended unless the setup has changed.\nCannot be run after participants have been started.\nPath and file name for the SCI file to be read.\nParent\nSummary\nsetup_root\n‘root’ object\nimport_system_coupling_input_file\nCommand\nimport_system_coupling_input_file\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/import_system_coupling_input_file",
        "href": "api/core/settings/_autosummary/api/import_system_coupling_input_file.html#ansys.systemcoupling.core.adaptor.api_25_1.import_system_coupling_input_file.import_system_coupling_input_file",
        "title": "import_system_coupling_input_file > import_system_coupling_input_file > import_system_coupling_input_file",
        "section": "import_system_coupling_input_file > import_system_coupling_input_file",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.import_system_coupling_input_file.import_system_coupling_input_file(name=None, parent=None)\n\nBases: Command\n\nReads the specified System Coupling SCI file and pushes its information\ninto the data model. The SCI file is the required System Coupling input\nformat for the initial run of a coupled analysis set up in Workbench.\n\nAfter the initial run based on an imported SCI file, a reissue\nof the import_system_coupling_input_file command is unnecessary and is\nnot recommended unless the setup has changed.\n\nCannot be run after participants have been started.\n\nParameters\n\nfile_path\n\npython:str\n\nPath and file name for the SCI file to be read.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/session",
        "href": "api/core/session.html#session",
        "title": "Session",
        "section": "Session",
        "text": "The Session class is the client interface to a System Coupling service\ninstance, providing a Pythonic API for setting up and solving coupled analyses.\nsession.Session(rpc)\nClient interface to a System Coupling server instance, providing an API to set up and solve coupled analyses.\nThe Session class also exposes a quasi-private property to access\nthe System Coupling native API directly. For more information, see\nref_native_api_property and ref_native_api_class.\nSession\nSession\nsession.Session\nSession\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/results",
        "href": "api/core/settings/_autosummary/api/results.html#results",
        "title": "results",
        "section": "results",
        "text": "Bases: Container\nConfigures output of postprocessing results data.\nSpecifies whether and when results files are generated.\nAllowed values:\n“ProgramControlled” - Generate postprocessing results at the same\nfrequency as restart points, as defined by the output control option\nsetting. If no restart frequency is defined, then results are\ngenerated at the end of the last coupling step.\n“Off” - Generation of postprocessing results is disabled.\nAllowed values for step-based analyses:\n“LastStep” - Generate results only for the last coupling step completed.\n“EveryStep” - Generate results at the end of every coupling step.\n“StepInterval” - Generate results at the end of coupling steps at\nthe interval specified by the output frequency setting.\nAllowed values for iteration-based analyses:\n“LastIteration” - Generate results only for the last coupling\niteration completed.\n“EveryIteration” - Generate results at the end of every coupling\niteration.\n“IterationInterval” - Generate results at the end of coupling\niterations at the interval specified by the output frequency setting.\nControl whether instances are output.\nAllowed values:\n“ProgramControlled”\n“ReferenceOnly”\n“All”\nSpecify output frequency.\nChild\nSummary\ntype\nFile type for result output.\nParent\nSummary\noutput_control\nConfigure output controls.\nresults\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/results",
        "href": "api/core/settings/_autosummary/api/results.html#ansys.systemcoupling.core.adaptor.api_25_1.results.results",
        "title": "results > results > results",
        "section": "results > results",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.results.results(name=None, parent=None)\n\nBases: Container\n\nConfigures output of postprocessing results data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_machines",
        "href": "api/core/settings/_autosummary/api/get_machines.html#get_machines",
        "title": "get_machines",
        "section": "get_machines",
        "text": "Bases: Command\nGet currently available machines.\nParent\nSummary\nsolution_root\n‘root’ object\nget_machines\nCommand\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_machines",
        "href": "api/core/settings/_autosummary/api/get_machines.html#ansys.systemcoupling.core.adaptor.api_25_1.get_machines.get_machines",
        "title": "get_machines > get_machines > get_machines",
        "section": "get_machines > get_machines",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_machines.get_machines(name=None, parent=None)\n\nBases: Command\n\nGet currently available machines.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nto_python_keys\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Container.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod Container.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/parameter",
        "href": "api/core/settings/_autosummary/api/parameter.html#parameter",
        "title": "parameter",
        "section": "parameter",
        "text": "Bases: NamedContainer[parameter_child]\nConfigure a parameter for the coupling participant.\nparameter_child\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nparameter\nNamedContainer\nparameter_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/parameter",
        "href": "api/core/settings/_autosummary/api/parameter.html#ansys.systemcoupling.core.adaptor.api_25_1.parameter.parameter",
        "title": "parameter > parameter > parameter",
        "section": "parameter > parameter",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.parameter.parameter(name=None, parent=None)\n\nBases: NamedContainer[parameter_child]\n\nConfigure a parameter for the coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Container class.\nName of the object if a named-object child.\nParent of the object.\n__init__\nContainer\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.Container.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "Container.__init__(name=None, parent=None)\n\nInitialize an instance of the Container class.\n\nParameters\n\nname\n\npython:str\n\nName of the object if a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "BooleanList.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "IntegerList.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod StrFloatPairList.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_interface_by_display_names",
        "href": "api/core/settings/_autosummary/api/add_interface_by_display_names.html#add_interface_by_display_names",
        "title": "add_interface_by_display_names",
        "section": "add_interface_by_display_names",
        "text": "Bases: Command\nImportant: This command is deprecated. To add an interface, use the\nadd_interface command instead.\nAdds an interface based on the participant and region display names specified\nas arguments for each side of the interface. This command requires that you\nspecify participants and regions using their display names (see parameter\ndescriptions for details).\nCannot be run after participants have been started.\nReturns the name of the Interface created.\nString indicating the name of the participant to be associated with\nside “One” of the interface.\nList specifying the name(s) of region(s) to be added to side “One” of\nthe interface.\nString indicating the name of the participant to be associated with\nside “Two” of the interface.\nList specifying the name(s) of region(s) to be added to side “Two”\nof the interface.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_interface_by_display_names\nCommand\nadd_interface\npython:str\nList\npython:str\nList\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_interface_by_display_names",
        "href": "api/core/settings/_autosummary/api/add_interface_by_display_names.html#ansys.systemcoupling.core.adaptor.api_25_1.add_interface_by_display_names.add_interface_by_display_names",
        "title": "add_interface_by_display_names > add_interface_by_display_names > add_interface_by_display_names",
        "section": "add_interface_by_display_names > add_interface_by_display_names",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_interface_by_display_names.add_interface_by_display_names(name=None, parent=None)\n\nBases: Command\n\nImportant: This command is deprecated. To add an interface, use the\nadd_interface command instead.\n\nAdds an interface based on the participant and region display names specified\nas arguments for each side of the interface. This command requires that you\nspecify participants and regions using their display names (see parameter\ndescriptions for details).\n\nCannot be run after participants have been started.\n\nReturns the name of the Interface created.\n\nParameters\n\nside_one_participant\n\npython:str\n\nString indicating the name of the participant to be associated with\nside “One” of the interface.\n\nside_one_regions\n\nList\n\nList specifying the name(s) of region(s) to be added to side “One” of\nthe interface.\n\nside_two_participant\n\npython:str\n\nString indicating the name of the participant to be associated with\nside “Two” of the interface.\n\nside_two_regions\n\nList\n\nList specifying the name(s) of region(s) to be added to side “Two”\nof the interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_reference_frame",
        "href": "api/core/settings/_autosummary/api/add_reference_frame.html#add_reference_frame",
        "title": "add_reference_frame",
        "section": "add_reference_frame",
        "text": "Bases: Command\nAdd a reference frame to the datamodel\nThe function will add a blank reference frame to the datamodel. Any\ntransformations must be added separately.\nReference frame name will be “Frame-#” where # is the first positive\ninteger which yields a unique frame name.\nReturns the name of the reference frame.\nName of a reference frame that the added frame should use as the\nparent. If the argument is not provided, the default parent reference\nframe “GlobalReferenceFrame” will be added.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_reference_frame\nCommand\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_reference_frame",
        "href": "api/core/settings/_autosummary/api/add_reference_frame.html#ansys.systemcoupling.core.adaptor.api_25_1.add_reference_frame.add_reference_frame",
        "title": "add_reference_frame > add_reference_frame > add_reference_frame",
        "section": "add_reference_frame > add_reference_frame",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_reference_frame.add_reference_frame(name=None, parent=None)\n\nBases: Command\n\nAdd a reference frame to the datamodel\n\nThe function will add a blank reference frame to the datamodel. Any\ntransformations must be added separately.\n\nReference frame name will be “Frame-#” where # is the first positive\ninteger which yields a unique frame name.\n\nReturns the name of the reference frame.\n\nParameters\n\nparent_reference_frame\n\npython:str, optional\n\nName of a reference frame that the added frame should use as the\nparent. If the argument is not provided, the default parent reference\nframe “GlobalReferenceFrame” will be added.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "Boolean.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/solution",
        "href": "api/core/adaptor/solution.html#solution-commands",
        "title": "Solution commands",
        "section": "Solution commands",
        "text": "Solution commands are made available in the solution\nattribute on the Session class. This attribute exposes System\nCoupling’s commands related to solving an analysis and examining its solution.\nFor more information, see the solution_root class.\nSolution commands\nsolution\nSession\nsolution_root\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.create",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Create a named object.\nName of the new object.\nObject that has been created.\ncreate\nObj\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.create",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.create.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "NamedContainer.create(name)\n\nCreate a named object.\n\nParameters\n\nname: str\n\nName of the new object.\n\nReturns\n\nObj\n\nObject that has been created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "StrOrIntDictListDict.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "ParticipantSession.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_transformation",
        "href": "api/core/settings/_autosummary/api/add_transformation.html#add_transformation",
        "title": "add_transformation",
        "section": "add_transformation",
        "text": "Bases: Command\nAdd a transformation to a reference frame defined in the datamodel\nGiven the reference frame to add to the transform to, the type of transform\nto be added, and any required information for the transformation, add the\ntransformation to the referenceFrame. Not all parameters are required for\nevery transformation.\nThe name of the transformation will be based on the type of transformation.\nThe name will be of the form <transformation_type>-# where # is the first\npositive integer which yields a unique frame name.\nThe transformation will also be added to the end of the transformation_order\nlist for the reference frame.\nReturns the name of the transformation.\nName of the reference frame to which the transformation will be added.\nType of transformation to be added. Available options are “Rotation” or\n“Translation”.\nRotation: angle, axis, vector (if axis is “UserDefined”)\nTranslation: vector\nAngle to rotate a reference frame. Used with “Rotation”\ntransformation_type. Default unit is Radians.\nAxis about which a rotation is applied. Used with\nRotation transformation_type. Available options are: “XAxis”, “YAxis”,\n“ZAxis”, and “UserDefined”.\nA vector for use with “Translation” transformation_type or “Rotation”\ntransformation_type if the axis is “UserDefined”.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_transformation\nCommand\n<transformation_type>-#\n#\ntransformation_order\npython:str\npython:str\nangle\naxis\nvector\naxis\nvector\nreal\noptional\ntransformation_type\npython:str\noptional\ntransformation_type\nTuple\noptional\ntransformation_type\ntransformation_type\naxis\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_transformation",
        "href": "api/core/settings/_autosummary/api/add_transformation.html#ansys.systemcoupling.core.adaptor.api_25_1.add_transformation.add_transformation",
        "title": "add_transformation > add_transformation > add_transformation",
        "section": "add_transformation > add_transformation",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_transformation.add_transformation(name=None, parent=None)\n\nBases: Command\n\nAdd a transformation to a reference frame defined in the datamodel\n\nGiven the reference frame to add to the transform to, the type of transform\nto be added, and any required information for the transformation, add the\ntransformation to the referenceFrame. Not all parameters are required for\nevery transformation.\n\nThe name of the transformation will be based on the type of transformation.\nThe name will be of the form <transformation_type>-# where # is the first\npositive integer which yields a unique frame name.\n\nThe transformation will also be added to the end of the transformation_order\nlist for the reference frame.\n\nReturns the name of the transformation.\n\nParameters\n\nreference_frame\n\npython:str\n\nName of the reference frame to which the transformation will be added.\n\ntransformation_type\n\npython:str\n\nType of transformation to be added. Available options are “Rotation” or\n“Translation”.\n\nRequired Parameters for Transformation Types:\n\nRotation: angle, axis, vector (if axis is “UserDefined”)\nTranslation: vector\n\nangle\n\nreal, optional\n\nAngle to rotate a reference frame. Used with “Rotation”\ntransformation_type. Default unit is Radians.\n\naxis\n\npython:str, optional\n\nAxis about which a rotation is applied. Used with\nRotation transformation_type. Available options are: “XAxis”, “YAxis”,\n“ZAxis”, and “UserDefined”.\n\nvector\n\nTuple, optional\n\nA vector for use with “Translation” transformation_type or “Rotation”\ntransformation_type if the axis is “UserDefined”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_participant_child",
        "href": "api/core/settings/_autosummary/api/coupling_participant_child.html#coupling_participant_child",
        "title": "coupling_participant_child",
        "section": "coupling_participant_child",
        "text": "Bases: Container\nConfigure a coupling participant.\nThese settings are typically populated by using the add_participant\ncommand.\nCoupling participant type.\nAllowed values:\n- “DEFAULT”\n- “CFX”\n- “FLUENT”\n- “MAPDL”\n- “AEDT”\n- “FMU”\n- “FMU-PROXY”\n- “EXTERNALDATA”\n- “FORTE”\n- “DEFAULT-SRV”\n- “MECH-SRV”\n- “CFD-SRV”\n- “SCDT-SRV”\n- “THERMAL-DESKTOP”\n- “LS-DYNA”\nParticipant’s display name as defined by the participant solver (as\nopposed to System Coupling’s display_name for the participant).\nParticipant’s display name as defined in System Coupling.\nDimension of the participant (“2D” or “3D”).\nInput variables for the region or FMU.\nOutput variables for the region or FMU.\nInput parameters for the solver.\nOutput parameters for the solver.\nFile used to generate the participant.\nSpecifies whether logging is activated for the participant.\nCoupling participant analysis type (“Steady” or “Transient”).\nControls whether Fluent/MAPDL/AEDT/CFX participant should communicate using new APIs.\nIndicates whether the participant supports restarts.\nIndicates whether the FMU can state can be serialized.\nIndicates whether the FMU can get and set its state.\nOptionally Frees the FMU state prior to calling CanGetAndSetFmuState\nSet instancing on the participant.\nChild\nSummary\nvariable\nConfigure a variable for the coupling participant.\nparameter\nConfigure a parameter for the coupling participant.\nattribute\nConfigure a variable’s attributes.\nregion\nConfigure a region for the coupling participant.\nproperties\nUNDOCUMENTED\nupdate_control\nConfigure update controls.\nfmu_parameter\nConfigure a parameter for an FMU coupling participant.\nexecution_control\nConfigure execution control for a coupling participant.\nexternal_data_file\nParticipant external data file settings.\nrecord_interactions\n“Controls whether the System Coupling Participant library will record the setup and solution data files for testing and debugging.\nParent\nSummary\ncoupling_participant\nConfigure a coupling participant.\ncoupling_participant_child\nContainer\nadd_participant\ndisplay_name\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_participant_child",
        "href": "api/core/settings/_autosummary/api/coupling_participant_child.html#ansys.systemcoupling.core.adaptor.api_25_1.coupling_participant_child.coupling_participant_child",
        "title": "coupling_participant_child > coupling_participant_child > coupling_participant_child",
        "section": "coupling_participant_child > coupling_participant_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.coupling_participant_child.coupling_participant_child(name=None, parent=None)\n\nBases: Container\n\nConfigure a coupling participant.\n\nThese settings are typically populated by using the add_participant\ncommand.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.values",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.values.html#values",
        "title": "values",
        "section": "values",
        "text": "Object values.\nvalues\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.values",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.values.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.values",
        "title": "values > values > values",
        "section": "values > values",
        "text": "NamedContainer.values()\n\nObject values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod Filename.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/has_input_file_changed",
        "href": "api/core/settings/_autosummary/api/has_input_file_changed.html#has_input_file_changed",
        "title": "has_input_file_changed",
        "section": "has_input_file_changed",
        "text": "Bases: Command\nGiven the name of a participant, checks whether the input file has changed.\nAvailable for server participants. Currently, only input files for\nDEFAULT-SRV, CFD-SRV, MECH-SRV, and SCDT-SRV participants are tracked by\nSystem Coupling.\nIf a participant’s input files are not tracked by System Coupling, this\ncommand will return False in all cases, even if changes have been made\nto the participant input file.\nName of the participant\nParent\nSummary\nsetup_root\n‘root’ object\nhas_input_file_changed\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/has_input_file_changed",
        "href": "api/core/settings/_autosummary/api/has_input_file_changed.html#ansys.systemcoupling.core.adaptor.api_25_1.has_input_file_changed.has_input_file_changed",
        "title": "has_input_file_changed > has_input_file_changed > has_input_file_changed",
        "section": "has_input_file_changed > has_input_file_changed",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.has_input_file_changed.has_input_file_changed(name=None, parent=None)\n\nBases: Command\n\nGiven the name of a participant, checks whether the input file has changed.\n\nAvailable for server participants. Currently, only input files for\nDEFAULT-SRV, CFD-SRV, MECH-SRV, and SCDT-SRV participants are tracked by\nSystem Coupling.\n\nIf a participant’s input files are not tracked by System Coupling, this\ncommand will return False in all cases, even if changes have been made\nto the participant input file.\n\nParameters\n\nparticipant_name\n\npython:str\n\nName of the participant\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "NamedContainer.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "StrOrIntDictListDict.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.html#session",
        "title": "Session",
        "section": "Session",
        "text": "Client interface to a System Coupling server instance, providing\nan API to set up and solve coupled analyses.\nThe API that is provided is a fairly thin adaptation of the existing\nSystem Coupling data model access and command and query API.\nSystem Coupling runs as a server process, which is accessed via the\nprovided rpc object. This services the command and query requests\nmade here.\nSession.download_file(file_name[, ...])\nFor internal use only: download a file from the PIM-managed instance.\nSession.end_output()\nCancel output streaming previously started by the start_output method.\nSession.exit()\nClose the System Coupling server instance.\nSession.ping()\nSimple test that the server is alive and responding.\nSession.start_output([handle_output])\nStart streaming the standard output written by the System Coupling server.\nSession.upload_file(file_name[, ...])\nFor internal use only: upload a file to the PIM-managed instance.\nSession.case\nPythonic client-side form of the System Coupling case persistence API.\nSession.setup\nPythonic client-side form of the System Coupling setup API and data model.\nSession.solution\nPythonic client-side form of the System Coupling solution API.\nSession.version\nReturn the server version as a string.\nSession\nrpc\nSession.download_file\nSession.end_output\nstart_output\nSession.exit\nSession.ping\nSession.start_output\nSession.upload_file\nSession.case\nSession.setup\nSession.solution\nSession.version\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.html#ansys.systemcoupling.core.session.Session",
        "title": "Session > Session > Session",
        "section": "Session > Session",
        "text": "class ansys.systemcoupling.core.session.Session(rpc)\n\nClient interface to a System Coupling server instance, providing\nan API to set up and solve coupled analyses.\n\nThe API that is provided is a fairly thin adaptation of the existing\nSystem Coupling data model access and command and query API.\n\nSystem Coupling runs as a server process, which is accessed via the\nprovided rpc object. This services the command and query requests\nmade here.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSession.download_file(file_name[, ...])\n\nFor internal use only: download a file from the PIM-managed instance.\n\nSession.end_output()\n\nCancel output streaming previously started by the start_output method.\n\nSession.exit()\n\nClose the System Coupling server instance.\n\nSession.ping()\n\nSimple test that the server is alive and responding.\n\nSession.start_output([handle_output])\n\nStart streaming the standard output written by the System Coupling server.\n\nSession.upload_file(file_name[, ...])\n\nFor internal use only: upload a file to the PIM-managed instance.\n\n\n\nAttributes\n\n\n\n\n\n\n\nSession.case\n\nPythonic client-side form of the System Coupling case persistence API.\n\nSession.setup\n\nPythonic client-side form of the System Coupling setup API and data model.\n\nSession.solution\n\nPythonic client-side form of the System Coupling solution API.\n\nSession.version\n\nReturn the server version as a string.\n\n"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod StrOrIntDictListDict.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_data_transfer",
        "href": "api/core/settings/_autosummary/api/add_data_transfer.html#add_data_transfer",
        "title": "add_data_transfer",
        "section": "add_data_transfer",
        "text": "Bases: Command\nAdds data transfer based on arguments that specify the interface, target\nside, and variables to be associated with each side of the interface.\nThe command requires that you specify variables using their names (see\nparameter descriptions for details). Either a variable-based or\nexpression-based data transfer may be created with this command based on\nthe arguments provided. If a variable-based data transfer argument\nis given, then no expression-based data transfer arguments can be used. If\nan expression-based data transfer argument is given, then no variable-based\ndata transfer arguments can be used.\nCannot be run after participants have been started.\nReturns the name of the Data Transfer created.\nString indicating the name of the interface on which the data transfer\nis to be created.\nString indicating the side of the interface to receive the data\ntransfer variable. Possible values are “One” or “Two”.\nString specifying the name of the variable on the source side of\nthe data transfer. Used when creating a variable-based data transfer.\nMust be combined with target_variable.\nString specifying the name of the variable on the target side of\nthe data transfer. Must be combined with either source_variable (when\ncreating a variable-based data transfer) or with value (or\nvalue_{x|y|z} (when creating an expression-based data transfer).\nString specifying the expression to use on the source side of the data\ntransfer. Used when creating an expression-based data transfer. If the\ntarget_variable is a vector, a vector-valued expression must be provided.\nAlternatively, value_x, value_y, value_z may be used to specify the\nindividual components of the vector expression.\nString specifying the X component of the expression to use on the\nsource side of the data transfer. This may optionally be used when creating\nan expression-based data transfer if the target_variable is a vector as an\nalternative to specifying a vector-valued expression in value`. ``value_y and\nvalue_z are also required if value_x is used.\nString specifying the Y component of the expression to use on the\nsource side of the data transfer. This may optionally be used when creating\nan expression-based data transfer if the target_variable is a vector as an\nalternative to specifying a vector-valued expression in value. value_x and\nvalue_z are also required if value_y is used.\nString specifying the Z component of the expression to use on the\nsource side of the data transfer. This may optionally be used when creating\nan expression-based data transfer if the target_variable is a vector as an\nalternative to specifying a vector-valued expression in value. value_x and\nvalue_y are also required if value_z is used.\nString specifying the name of the variable associated with side1\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\nString specifying the name of the variable associated with side2\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_data_transfer\nCommand\npython:str\npython:str\npython:str\noptional\ntarget_variable\npython:str\noptional\nsource_variable\nvalue\nvalue_{x|y|z}\npython:str\noptional\ntarget_variable\nvalue_x\nvalue_y\nvalue_z\npython:str\noptional\ntarget_variable\nvalue`. ``value_y\nvalue_z\nvalue_x\npython:str\noptional\ntarget_variable\nvalue\nvalue_x\nvalue_z\nvalue_y\npython:str\noptional\ntarget_variable\nvalue\nvalue_x\nvalue_y\nvalue_z\npython:str\noptional\nside_two_variable\nsource_variable\ntarget_variable\npython:str\noptional\nside_two_variable\nsource_variable\ntarget_variable\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_data_transfer",
        "href": "api/core/settings/_autosummary/api/add_data_transfer.html#ansys.systemcoupling.core.adaptor.api_25_1.add_data_transfer.add_data_transfer",
        "title": "add_data_transfer > add_data_transfer > add_data_transfer",
        "section": "add_data_transfer > add_data_transfer",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_data_transfer.add_data_transfer(name=None, parent=None)\n\nBases: Command\n\nAdds data transfer based on arguments that specify the interface, target\nside, and variables to be associated with each side of the interface.\nThe command requires that you specify variables using their names (see\nparameter descriptions for details). Either a variable-based or\nexpression-based data transfer may be created with this command based on\nthe arguments provided. If a variable-based data transfer argument\nis given, then no expression-based data transfer arguments can be used. If\nan expression-based data transfer argument is given, then no variable-based\ndata transfer arguments can be used.\n\nCannot be run after participants have been started.\n\nReturns the name of the Data Transfer created.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface on which the data transfer\nis to be created.\n\ntarget_side\n\npython:str\n\nString indicating the side of the interface to receive the data\ntransfer variable. Possible values are “One” or “Two”.\n\nsource_variable\n\npython:str, optional\n\nString specifying the name of the variable on the source side of\nthe data transfer. Used when creating a variable-based data transfer.\nMust be combined with target_variable.\n\ntarget_variable\n\npython:str, optional\n\nString specifying the name of the variable on the target side of\nthe data transfer. Must be combined with either source_variable (when\ncreating a variable-based data transfer) or with value (or\nvalue_{x|y|z} (when creating an expression-based data transfer).\n\nvalue\n\npython:str, optional\n\nString specifying the expression to use on the source side of the data\ntransfer. Used when creating an expression-based data transfer. If the\ntarget_variable is a vector, a vector-valued expression must be provided.\nAlternatively, value_x, value_y, value_z may be used to specify the\nindividual components of the vector expression.\n\nvalue_x\n\npython:str, optional\n\nString specifying the X component of the expression to use on the\nsource side of the data transfer. This may optionally be used when creating\nan expression-based data transfer if the target_variable is a vector as an\nalternative to specifying a vector-valued expression in value`. ``value_y and\nvalue_z are also required if value_x is used.\n\nvalue_y\n\npython:str, optional\n\nString specifying the Y component of the expression to use on the\nsource side of the data transfer. This may optionally be used when creating\nan expression-based data transfer if the target_variable is a vector as an\nalternative to specifying a vector-valued expression in value. value_x and\nvalue_z are also required if value_y is used.\n\nvalue_z\n\npython:str, optional\n\nString specifying the Z component of the expression to use on the\nsource side of the data transfer. This may optionally be used when creating\nan expression-based data transfer if the target_variable is a vector as an\nalternative to specifying a vector-valued expression in value. value_x and\nvalue_y are also required if value_z is used.\n\nside_one_variable\n\npython:str, optional\n\nString specifying the name of the variable associated with side1\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\n\nside_two_variable\n\npython:str, optional\n\nString specifying the name of the variable associated with side2\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_fsi_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_fsi_data_transfers.html#add_fsi_data_transfers",
        "title": "add_fsi_data_transfers",
        "section": "add_fsi_data_transfers",
        "text": "Bases: Command\nAdds group of data transfers for FSI physics.\nReturns the list of the data transfers created.\nString indicating the name of the interface on which the data transfer\nis to be created.\nBoolean indicating whether to prefer force density variable over force.\nDefault value is False.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_fsi_data_transfers\nCommand\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_fsi_data_transfers",
        "href": "api/core/settings/_autosummary/api/add_fsi_data_transfers.html#ansys.systemcoupling.core.adaptor.api_25_1.add_fsi_data_transfers.add_fsi_data_transfers",
        "title": "add_fsi_data_transfers > add_fsi_data_transfers > add_fsi_data_transfers",
        "section": "add_fsi_data_transfers > add_fsi_data_transfers",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_fsi_data_transfers.add_fsi_data_transfers(name=None, parent=None)\n\nBases: Command\n\nAdds group of data transfers for FSI physics.\n\nReturns the list of the data transfers created.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface on which the data transfer\nis to be created.\n\nuse_force_density\n\nbool, optional\n\nBoolean indicating whether to prefer force density variable over force.\nDefault value is False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod StrOrIntDictList.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.launch",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.launch.html#launch",
        "title": "launch",
        "section": "launch",
        "text": "Start a local instance of System Coupling and connect to it.\nPort on which to connect to System Coupling. The default is\nNone, in which case an available port is found and used.\nPath for the working directory of the System Coupling process.\nThe default is None, in which case the current directory of\nthe client process is used.\nNumber of processes for coupling participants. The default is\nNone, in which case the System Coupling server uses its own default.\nNumber of processes for the System Coupling engine. The default is\nNone, in which case the System Coupling server uses its own default.\nString specifying the version of System Coupling to use. For example,\nto use System Coupling from the Ansys “2024 R1” release, specify \"241\".\n(The forms \"24.1\" and \"24_1\" are also acceptable.)\nThe version will be sought in the standard installation location. The\ndefault is None, which is equivalent to specifying\n\"251\" (“2025 R1” release), unless either of the environment\nvariables SYSC_ROOT or AWP_ROOT has been set. It is considered\nto be an error if either these is set and version is provided.\nBoolean to specify if the user wants to stream system coupling output.\nThe default is False, in which case the output stream is kept hidden.\nIf True, the output information is printed to standard output.\nList of any additional arguments to specify when the server\nprocess is launched. The default is []. If a list of additional\narguments is provided, it is concatenated as-is to the list of\narguments already being passed when the process is started. If\nan argument has an associated value, the argument name and its\nvalue should be specified as two consecutive items of the list.\nSession object, providing access to a set up and solve API controlling a\nremote System Coupling instance.\nSession\nlaunch\npython:int\noptional\nNone\npython:str\noptional\nNone\npython:int\noptional\nNone\npython:int\noptional\nNone\npython:str\noptional\n\"241\"\n\"24.1\"\n\"24_1\"\nNone\n\"251\"\nSYSC_ROOT\nAWP_ROOT\nversion\nFalse\nTrue\nList\npython:str\n[]\nansys.systemcoupling.core.session.Session\nSession\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.launch",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.launch.html#ansys.systemcoupling.core.launch",
        "title": "launch > launch > launch",
        "section": "launch > launch",
        "text": "ansys.systemcoupling.core.launch(*, port=None, working_dir=None, nprocs=None, sycnprocs=None, version=None, start_output=False, extra_args=[])\n\nStart a local instance of System Coupling and connect to it.\n\nParameters\n\nport\n\npython:int, optional\n\nPort on which to connect to System Coupling. The default is\nNone, in which case an available port is found and used.\n\nworking_dir\n\npython:str, optional\n\nPath for the working directory of the System Coupling process.\nThe default is None, in which case the current directory of\nthe client process is used.\n\nnprocs\n\npython:int, optional\n\nNumber of processes for coupling participants. The default is\nNone, in which case the System Coupling server uses its own default.\n\nsycnprocs\n\npython:int, optional\n\nNumber of processes for the System Coupling engine. The default is\nNone, in which case the System Coupling server uses its own default.\n\nversion\n\npython:str, optional\n\nString specifying the version of System Coupling to use. For example,\nto use System Coupling from the Ansys “2024 R1” release, specify \"241\".\n(The forms \"24.1\" and \"24_1\" are also acceptable.)\nThe version will be sought in the standard installation location. The\ndefault is None, which is equivalent to specifying\n\"251\" (“2025 R1” release), unless either of the environment\nvariables SYSC_ROOT or AWP_ROOT has been set. It is considered\nto be an error if either these is set and version is provided.\n\nstart_output: bool, optional\n\nBoolean to specify if the user wants to stream system coupling output.\nThe default is False, in which case the output stream is kept hidden.\nIf True, the output information is printed to standard output.\n\nextra_args\n\nList[python:str]\n\nList of any additional arguments to specify when the server\nprocess is launched. The default is []. If a list of additional\narguments is provided, it is concatenated as-is to the list of\narguments already being passed when the process is started. If\nan argument has an associated value, the argument name and its\nvalue should be specified as two consecutive items of the list.\n\nReturns\n\nansys.systemcoupling.core.session.Session\n\nSession object, providing access to a set up and solve API controlling a\nremote System Coupling instance.\n\nReturn type\n\nSession\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod StringList.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.html#ansyssystemcouplingcoreadaptorimpltypescommand",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Command",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Command",
        "text": "Provides the Command object.\n__init__([name, parent])\nInitialize an instance of the Base class.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.Command\nCommand\n__init__\nBase\nset_sycproxy\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.html#ansys.systemcoupling.core.adaptor.impl.types.Command",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.Command > ansys.systemcoupling.core.adaptor.impl.types.Command > Command",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.Command > Command",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.Command(name=None, parent=None)\n\nProvides the Command object.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod SettingsBase.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod Filename.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod Filename.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "BooleanList.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "RealList.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.PathCommand.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "PathCommand.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "RealList.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section provides an overview of PySystemCoupling and how to use it.\nAlthough this section describes some main System Coupling concepts, it is\nnot intended to be an introduction to co-simulation and the use of System Coupling.\nThe focus here is the use of PySystemCoupling to access System Coupling features.\nIf you are licensed to use System Coupling, you can consult the System Coupling\nproduct documentation for detailed product information and tutorial examples. The\nsteps in the product documentation that refer to the command-line interface (CLI) are those\nthat are most readily translated to the PySystemCoupling environment.\nUser guide"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#launch-function",
        "title": "User guide > Launch() function",
        "section": "Launch() function",
        "text": "The launch() function in PySystemCoupling creates an instance of\nSystem Coupling in the background and sends commands to this service.\nThe launch() function returns a Session object.\nLaunch() function\nlaunch()\nlaunch()\nSession"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#session-object",
        "title": "User guide > Session object",
        "section": "Session object",
        "text": "A Session object is the client-side access point in PySystemCoupling to a System Coupling server instance.\nThis object exposes an API that allows a System Coupling analysis to be set up and solved. One or more\nsuch server sessions can be launched simultaneously from the client.\nIn addition to providing an API for setting up and solving coupled analyses, the Session\nobject provides access to a few basic capabilities described in the sections that follow.\nSession object\nSession\nSession"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#connection-check",
        "title": "User guide > Connection check",
        "section": "Connection check",
        "text": "To confirm that there is a functioning connection to the System Coupling server, call the ping method\nwith this command:\nThe ping method returns True if a simple call can successfully be made on System Coupling’s\ngRPC server. Otherwise, the attempt to make the call raises an exception.\nConnection check\nping\nping\nTrue"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#output-streaming",
        "title": "User guide > Output streaming",
        "section": "Output streaming",
        "text": "By default, any output that the System Coupling server process prints to its standard output streams\n(stdout and stderr) is not shown. Output is streamed to the PySystemCoupling session and\nprinted to its console when the following code is used to call the start_output() method:\nYou can turn off output streaming using this code to call the end_output() method:\nOutput streaming\nstdout\nstderr\nstart_output()\nend_output()"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#exiting",
        "title": "User guide > Exiting",
        "section": "Exiting",
        "text": "When you are finished with a PySystemCoupling session, you should end it cleanly using the\nexit() method. If you do not do this, PySystemCoupling still attempts to clean up any active server sessions\nwhen the Python environment is exited, but this is naturally less reliable than a directed exit.\nOnce you use the following code to call the exit() method on a session object, the object\nis no longer usable.\nHowever, you can reassign the syc_session variable to a new session with this code:\nThe Session class supports the Python context manager protocol. This means that\nif a Session is created using a Python with statement, it is automatically\ncleaned up — that is, exit called on it — upon leaving the scope of the with.\nExiting\nexit()\nexit()\nsyc_session\nSession\nSession\nwith\nexit\nwith"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#logging",
        "title": "User guide > Logging",
        "section": "Logging",
        "text": "Some basic logging capabilities are accessible via the LOG object. Built on the\nstandard Python logging framework, this object allows you to set a log level as a severity\nfilter and to specify whether logging goes to a file, to the console, or to both.\nLogging\nLOG\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.html#ansyssystemcouplingcoreadaptorimpltypesintegerlist",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.IntegerList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.IntegerList",
        "text": "Provides an IntegerList object that represents an integer list setting.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.IntegerList\nIntegerList\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.IntegerList > ansys.systemcoupling.core.adaptor.impl.types.IntegerList > IntegerList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.IntegerList > IntegerList",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.IntegerList(name=None, parent=None)\n\nProvides an IntegerList object that represents an integer list setting.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "RealVector.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod RealVector.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "StrFloatPairList.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "Integer.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.Container.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "Container.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_named_expression",
        "href": "api/core/settings/_autosummary/api/add_named_expression.html#add_named_expression",
        "title": "add_named_expression",
        "section": "add_named_expression",
        "text": "Bases: Command\nCreates a named expression object in the data model.\nIf there is already an object in the data model whose expression_name\nmatches the provided expression_name, its expression_string will be\noverwritten with the provided expression_string\nThe name by which this expression should be referenced when used in\nanother expression.\nString containing the definition of the expression.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_named_expression\nCommand\nexpression_name\nexpression_name\nexpression_string\nexpression_string\npython:str\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_named_expression",
        "href": "api/core/settings/_autosummary/api/add_named_expression.html#ansys.systemcoupling.core.adaptor.api_25_1.add_named_expression.add_named_expression",
        "title": "add_named_expression > add_named_expression > add_named_expression",
        "section": "add_named_expression > add_named_expression",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_named_expression.add_named_expression(name=None, parent=None)\n\nBases: Command\n\nCreates a named expression object in the data model.\nIf there is already an object in the data model whose expression_name\nmatches the provided expression_name, its expression_string will be\noverwritten with the provided expression_string\n\nParameters\n\nexpression_name\n\npython:str\n\nThe name by which this expression should be referenced when used in\nanother expression.\n\nexpression_string\n\npython:str\n\nString containing the definition of the expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/delete_transformation",
        "href": "api/core/settings/_autosummary/api/delete_transformation.html#delete_transformation",
        "title": "delete_transformation",
        "section": "delete_transformation",
        "text": "Bases: Command\nDelete a transformation from a reference frame\nIn addition to deleting the transformation object, it will also remove the\ntransformation from transformation_order (if it exists in that list).\nName of the reference frame from which the transformation will be\ndeleted.\nName of the transformation which will be deleted.\nParent\nSummary\nsetup_root\n‘root’ object\ndelete_transformation\nCommand\ntransformation_order\npython:str\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/delete_transformation",
        "href": "api/core/settings/_autosummary/api/delete_transformation.html#ansys.systemcoupling.core.adaptor.api_25_1.delete_transformation.delete_transformation",
        "title": "delete_transformation > delete_transformation > delete_transformation",
        "section": "delete_transformation > delete_transformation",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.delete_transformation.delete_transformation(name=None, parent=None)\n\nBases: Command\n\nDelete a transformation from a reference frame\n\nIn addition to deleting the transformation object, it will also remove the\ntransformation from transformation_order (if it exists in that list).\n\nParameters\n\nreference_frame\n\npython:str\n\nName of the reference frame from which the transformation will be\ndeleted.\n\ntransformation_name\n\npython:str\n\nName of the transformation which will be deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/region",
        "href": "api/core/settings/_autosummary/api/region.html#region",
        "title": "region",
        "section": "region",
        "text": "Bases: NamedContainer[region_child]\nConfigure a region for the coupling participant.\nregion_child\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nregion\nNamedContainer\nregion_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/region",
        "href": "api/core/settings/_autosummary/api/region.html#ansys.systemcoupling.core.adaptor.api_25_1.region.region",
        "title": "region > region > region",
        "section": "region > region",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.region.region(name=None, parent=None)\n\nBases: NamedContainer[region_child]\n\nConfigure a region for the coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "StringList.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with System Coupling names.\nto_syc_keys\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Container.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod Container.to_syc_keys(value)\n\nConvert value to have keys with System Coupling names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "RealList.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.download_file",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.download_file.html#download_file",
        "title": "download_file",
        "section": "download_file",
        "text": "For internal use only: download a file from the PIM-managed instance.\nUnless overwrite is True, a FileExistsError will be raised if\nthe local file already exists.\nfile name\nlocal directory to write the file - default is current directory, “.”\nwhether to overwrite the remote file if it already exists - default is False\ndownload_file\noverwrite\nTrue\nFileExistsError\npython:str\npython:str\noptional\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.download_file",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.download_file.html#ansys.systemcoupling.core.session.Session.download_file",
        "title": "download_file > download_file > download_file",
        "section": "download_file > download_file",
        "text": "Session.download_file(file_name, local_file_dir='.', overwrite=False)\n\nFor internal use only: download a file from the PIM-managed instance.\n\nUnless overwrite is True, a FileExistsError will be raised if\nthe local file already exists.\n\nParameters\n\nfile_name\n\npython:str\n\nfile name\n\nlocal_file_dir\n\npython:str, optional\n\nlocal directory to write the file - default is current directory, “.”\n\noverwrite\n\nbool, optional\n\nwhether to overwrite the remote file if it already exists - default is False\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/reload_expression_function_modules",
        "href": "api/core/settings/_autosummary/api/reload_expression_function_modules.html#reload_expression_function_modules",
        "title": "reload_expression_function_modules",
        "section": "reload_expression_function_modules",
        "text": "Bases: Command\nThis may be called to force a reload of expression function modules\nif they have changed since they were last loaded.\nParent\nSummary\nsetup_root\n‘root’ object\nreload_expression_function_modules\nCommand\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/reload_expression_function_modules",
        "href": "api/core/settings/_autosummary/api/reload_expression_function_modules.html#ansys.systemcoupling.core.adaptor.api_25_1.reload_expression_function_modules.reload_expression_function_modules",
        "title": "reload_expression_function_modules > reload_expression_function_modules > reload_expression_function_modules",
        "section": "reload_expression_function_modules > reload_expression_function_modules",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.reload_expression_function_modules.reload_expression_function_modules(name=None, parent=None)\n\nBases: Command\n\nThis may be called to force a reload of expression function modules\nif they have changed since they were last loaded.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.StringList.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "StringList.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "There are three main levels of interaction with the PySystemCoupling API:\nLaunching or connecting to a System Coupling server instance by calling\nthe launch or connect function. These\nfunctions return a Session object that you use\nto interact with the System Coupling server.\nThe Session object itself provides some high-level\ncapabilities such as controlling streaming of standard streams from the server\nand lifetime management of the session. It also contains three important attributes:\ncase, setup and solution, through which you gain access to the third\naspect of the API.\nThe case, setup\nand solution attributes of the\nSession object are  root objects that constitute\nan entry point to an adaptor API for core System Coupling features. The bulk of\nthe PySystemCoupling API resides under these root object. This is where most of the\ninteractions required to set up and solve a coupled analysis take place.\nAPI reference\nlaunch\nconnect\nSession\nSession\ncase\nsetup\nsolution\ncase\nsetup\nsolution\nSession\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "NamedContainer.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod StrFloatPairList.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/automatic_alignment_options",
        "href": "api/core/settings/_autosummary/api/automatic_alignment_options.html#automatic_alignment_options",
        "title": "automatic_alignment_options",
        "section": "automatic_alignment_options",
        "text": "Bases: Container\nAutomatic alignment settings.\nAlignment type (“Covariance” or “Moment Covariance” or “Inertial Axes”).\nTolerance used to compare singular values\nSet to 1 to print additional information about the alignment\nParent\nSummary\nanalysis_control\nConfigure coupling controls.\nautomatic_alignment_options\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/automatic_alignment_options",
        "href": "api/core/settings/_autosummary/api/automatic_alignment_options.html#ansys.systemcoupling.core.adaptor.api_25_1.automatic_alignment_options.automatic_alignment_options",
        "title": "automatic_alignment_options > automatic_alignment_options > automatic_alignment_options",
        "section": "automatic_alignment_options > automatic_alignment_options",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.automatic_alignment_options.automatic_alignment_options(name=None, parent=None)\n\nBases: Container\n\nAutomatic alignment settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.Real.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "Real.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.html#ansyssystemcouplingcoreadaptorimpltypesstrorintdictlistdict",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict",
        "text": "Provides a StrOrIntDictListDict object that represents a dictionary of string keys to\nStrOrIntDictList values.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict\nStrOrIntDictListDict\nStrOrIntDictList\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict > ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict > StrOrIntDictListDict",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict > StrOrIntDictListDict",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict(name=None, parent=None)\n\nProvides a StrOrIntDictListDict object that represents a dictionary of string keys to\nStrOrIntDictList values.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/settings/_autosummary/api/attribute_child",
        "href": "api/core/settings/_autosummary/api/attribute_child.html#attribute_child",
        "title": "attribute_child",
        "section": "attribute_child",
        "text": "Bases: Container\nConfigure a variable’s attributes.\nThe type of the attribute (“Real” or “Integer”).\nControls whether the attribute is Modifiable\nReal attribute value.\nInteger attribute value.\nChild\nSummary\ndimensionality\nConfigure attribute dimensionality.\nParent\nSummary\nattribute\nConfigure a variable’s attributes.\nattribute_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/attribute_child",
        "href": "api/core/settings/_autosummary/api/attribute_child.html#ansys.systemcoupling.core.adaptor.api_25_1.attribute_child.attribute_child",
        "title": "attribute_child > attribute_child > attribute_child",
        "section": "attribute_child > attribute_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.attribute_child.attribute_child(name=None, parent=None)\n\nBases: Container\n\nConfigure a variable’s attributes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/interrupt",
        "href": "api/core/settings/_autosummary/api/interrupt.html#interrupt",
        "title": "interrupt",
        "section": "interrupt",
        "text": "Bases: InjectedCommand\nInterrupts a solve in progress.\nSee also abort. The difference between an interrupted and\naborted solve is that an interrupted solve can be resumed.\nText to describe the reason for the interrupt.\nThis might be used for such purposes as providing\nadditional annotation in transcript output.\nParent\nSummary\nsolution_root\n‘root’ object\ninterrupt\nInjectedCommand\nabort\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/interrupt",
        "href": "api/core/settings/_autosummary/api/interrupt.html#ansys.systemcoupling.core.adaptor.api_25_1.interrupt.interrupt",
        "title": "interrupt > interrupt > interrupt",
        "section": "interrupt > interrupt",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.interrupt.interrupt(name=None, parent=None)\n\nBases: InjectedCommand\n\nInterrupts a solve in progress.\n\nSee also abort. The difference between an interrupted and\naborted solve is that an interrupted solve can be resumed.\n\nParameters\n\nreason_msg\n\npython:str, optional\n\nText to describe the reason for the interrupt.\n\nThis might be used for such purposes as providing\nadditional annotation in transcript output.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod ParticipantSession.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/available_ports",
        "href": "api/core/settings/_autosummary/api/available_ports.html#available_ports",
        "title": "available_ports",
        "section": "available_ports",
        "text": "Bases: Container\nSpecify ports available for co-simulation.\nSpecify how available ports are determined.\n“ProgramControlled” - System Coupling will find an\navailable port.\n“UserDefined” - An available port will be chosen,\nif possible, from a specified range.\nPort range expressed as a comma-separated list of integers and/or\ninteger ranges. An integer range is a pair of integers separated\nwith a “-” character, specify an inclusive range of port numbers.\nParent\nSummary\nsolution_control\nConfigure solution controls.\navailable_ports\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/available_ports",
        "href": "api/core/settings/_autosummary/api/available_ports.html#ansys.systemcoupling.core.adaptor.api_25_1.available_ports.available_ports",
        "title": "available_ports > available_ports > available_ports",
        "section": "available_ports > available_ports",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.available_ports.available_ports(name=None, parent=None)\n\nBases: Container\n\nSpecify ports available for co-simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/library",
        "href": "api/core/settings/_autosummary/api/library.html#library",
        "title": "library",
        "section": "library",
        "text": "Bases: Container\nContains objects that can be referenced from elsewhere in the data model.\nChild\nSummary\nexpression\nDefine a named expression that can be referenced in other expressions.\nexpression_function\nMakes an external Python function accessible from expressions.\nreference_frame\nProvide a transformation relative to a ParentReferenceFrame.\ninstancing\nDefine instancing for an interface side.\nParent\nSummary\nsetup_root\n‘root’ object\nlibrary\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/library",
        "href": "api/core/settings/_autosummary/api/library.html#ansys.systemcoupling.core.adaptor.api_25_1.library.library",
        "title": "library > library > library",
        "section": "library > library",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.library.library(name=None, parent=None)\n\nBases: Container\n\nContains objects that can be referenced from elsewhere in the data model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Boolean.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "Boolean.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod IntegerList.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/avoid_data_reconstruction",
        "href": "api/core/settings/_autosummary/api/avoid_data_reconstruction.html#avoid_data_reconstruction",
        "title": "avoid_data_reconstruction",
        "section": "avoid_data_reconstruction",
        "text": "Bases: Container\nControl whether data reconstruction should be done for elemental intensive data.\nUNDOCUMENTED\nUNDOCUMENTED\nUNDOCUMENTED\nParent\nSummary\nanalysis_control\nConfigure coupling controls.\navoid_data_reconstruction\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/avoid_data_reconstruction",
        "href": "api/core/settings/_autosummary/api/avoid_data_reconstruction.html#ansys.systemcoupling.core.adaptor.api_25_1.avoid_data_reconstruction.avoid_data_reconstruction",
        "title": "avoid_data_reconstruction > avoid_data_reconstruction > avoid_data_reconstruction",
        "section": "avoid_data_reconstruction > avoid_data_reconstruction",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.avoid_data_reconstruction.avoid_data_reconstruction(name=None, parent=None)\n\nBases: Container\n\nControl whether data reconstruction should be done for elemental intensive data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.Container.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "Container.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_property_state.html#set_property_state",
        "title": "set_property_state",
        "section": "set_property_state",
        "text": "Set the state of the prop property to value.\nset_property_state\nprop\nvalue\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.set_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.set_property_state",
        "title": "set_property_state > set_property_state > set_property_state",
        "section": "set_property_state > set_property_state",
        "text": "RealList.set_property_state(prop, value)\n\nSet the state of the prop property to value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "RealList.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "BooleanList.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/transformation",
        "href": "api/core/settings/_autosummary/api/transformation.html#transformation",
        "title": "transformation",
        "section": "transformation",
        "text": "Bases: NamedContainer[transformation_child]\nUse to apply transformations to coupling interface sides to control\npositioning of the geometry.\ntransformation_child\nParent\nSummary\nreference_frame_child\nProvide a transformation relative to a ParentReferenceFrame.\ntransformation\nNamedContainer\ntransformation_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/transformation",
        "href": "api/core/settings/_autosummary/api/transformation.html#ansys.systemcoupling.core.adaptor.api_25_1.transformation.transformation",
        "title": "transformation > transformation > transformation",
        "section": "transformation > transformation",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.transformation.transformation(name=None, parent=None)\n\nBases: NamedContainer[transformation_child]\n\nUse to apply transformations to coupling interface sides to control\npositioning of the geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "ParticipantSession.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/write_csv_chart_files",
        "href": "api/core/settings/_autosummary/api/write_csv_chart_files.html#write_csv_chart_files",
        "title": "write_csv_chart_files",
        "section": "write_csv_chart_files",
        "text": "Bases: Command\nFor each coupling interface, exports a CSV file containing chart data\n(convergence and source/target quantity transfer values) for\nthat interface.\nEach file is named according to the convention <interface>.csv, where\n<interface> is the object name of the corresponding coupling interface.\nThis command will overwrite any CSV charting files that already exist,\nincluding any that were written during the solution.\nParent\nSummary\nsolution_root\n‘root’ object\nwrite_csv_chart_files\nCommand\n<interface>.csv\n<interface>\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/write_csv_chart_files",
        "href": "api/core/settings/_autosummary/api/write_csv_chart_files.html#ansys.systemcoupling.core.adaptor.api_25_1.write_csv_chart_files.write_csv_chart_files",
        "title": "write_csv_chart_files > write_csv_chart_files > write_csv_chart_files",
        "section": "write_csv_chart_files > write_csv_chart_files",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.write_csv_chart_files.write_csv_chart_files(name=None, parent=None)\n\nBases: Command\n\nFor each coupling interface, exports a CSV file containing chart data\n(convergence and source/target quantity transfer values) for\nthat interface.\n\nEach file is named according to the convention <interface>.csv, where\n<interface> is the object name of the corresponding coupling interface.\n\nThis command will overwrite any CSV charting files that already exist,\nincluding any that were written during the solution.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "Integer.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with PySystemCoupling names.\nto_python_keys\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod NamedContainer.to_python_keys(value)\n\nConvert value to have keys with PySystemCoupling names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "RealVector.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_interface",
        "href": "api/core/settings/_autosummary/api/coupling_interface.html#coupling_interface",
        "title": "coupling_interface",
        "section": "coupling_interface",
        "text": "Bases: NamedContainer[coupling_interface_child]\nConfigure a coupling interface.\ncoupling_interface_child\nParent\nSummary\nsetup_root\n‘root’ object\ncoupling_interface\nNamedContainer\ncoupling_interface_child\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/coupling_interface",
        "href": "api/core/settings/_autosummary/api/coupling_interface.html#ansys.systemcoupling.core.adaptor.api_25_1.coupling_interface.coupling_interface",
        "title": "coupling_interface > coupling_interface > coupling_interface",
        "section": "coupling_interface > coupling_interface",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.coupling_interface.coupling_interface(name=None, parent=None)\n\nBases: NamedContainer[coupling_interface_child]\n\nConfigure a coupling interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/live_visualization_child",
        "href": "api/core/settings/_autosummary/api/live_visualization_child.html#live_visualization_child",
        "title": "live_visualization_child",
        "section": "live_visualization_child",
        "text": "Bases: Container\nConfigures live visualization via EnSight DVS.\nSpecifies live visualization working process\nAllowed values:\n“ProgramControlled” - Generation of postprocessing results is disabled for now.\n“Off” - Generation of postprocessing results is disabled.\nAllowed values for step-based analyses:\n“LastStep” - Generate results only for the last coupling step completed.\n“EveryStep” - Generate results at the end of every coupling step.\n“StepInterval” - Generate results at the end of coupling steps at\nthe interval specified by the output frequency setting.\nAllowed values for iteration-based analyses:\n“LastIteration” - Generate results only for the last coupling\niteration completed.\n“EveryIteration” - Generate results at the end of every coupling\niteration.\n“IterationInterval” - Generate results at the end of coupling\niterations at the interval specified by the output frequency setting.\nWrite results to files when conducting live visualization.\nRequest that the EnSight client is started with a gRPC server running.\nRequest that the EnSight client is started hidden (in batch mode).\nSpecify output frequency.\nChild\nSummary\nexecution_control\nConfigure execution control for a live visualization.\nParent\nSummary\nlive_visualization\nConfigures live visualization via EnSight DVS.\nlive_visualization_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/live_visualization_child",
        "href": "api/core/settings/_autosummary/api/live_visualization_child.html#ansys.systemcoupling.core.adaptor.api_25_1.live_visualization_child.live_visualization_child",
        "title": "live_visualization_child > live_visualization_child > live_visualization_child",
        "section": "live_visualization_child > live_visualization_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.live_visualization_child.live_visualization_child(name=None, parent=None)\n\nBases: Container\n\nConfigures live visualization via EnSight DVS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.html#ansyssystemcouplingcoreadaptorimpltypespathcommand",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.PathCommand",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.PathCommand",
        "text": "Provides the path-based command object.\n__init__([name, parent])\nInitialize an instance of the Base class.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.PathCommand\n__init__\nBase\nset_sycproxy\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.PathCommand.html#ansys.systemcoupling.core.adaptor.impl.types.PathCommand",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.PathCommand > ansys.systemcoupling.core.adaptor.impl.types.PathCommand > PathCommand",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.PathCommand > PathCommand",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.PathCommand(name=None, parent=None)\n\nProvides the path-based command object.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Command.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.Command.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "Command.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/apip",
        "href": "api/core/settings/_autosummary/api/apip.html#apip",
        "title": "apip",
        "section": "apip",
        "text": "Bases: Container\nApip-related expert settings.\nDebug apip data (sends to debug server, saves data locally).\nDisable apip collection (regardless of user settings).\nParent\nSummary\nanalysis_control\nConfigure coupling controls.\napip\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/apip",
        "href": "api/core/settings/_autosummary/api/apip.html#ansys.systemcoupling.core.adaptor.api_25_1.apip.apip",
        "title": "apip > apip > apip",
        "section": "apip > apip",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.apip.apip(name=None, parent=None)\n\nBases: Container\n\nApip-related expert settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "End-to-end examples show how you can use PySystemCoupling. If the ansys-systemcoupling-core\npackage is installed on your machine, you can download these examples as Python files or\nJupyter notebooks and run them locally.\nExamples\nansys-systemcoupling-core"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#coupled-analysis-examples",
        "title": "Examples > Coupled analysis examples",
        "section": "Coupled analysis examples",
        "text": "These examples show you how you can use System Coupling capabilities from Python to perform\ncoupled analyses. This includes importing setup data provided by participant solvers, initial\npopulation of the System Coupling datamodel to define the analysis, subsequent modification and\ninterrogation of the data model, and running the System Coupling solver to perform the analysis.\nsphx_glr_examples_00-systemcoupling_fluid_swirl.py\nsphx_glr_examples_00-systemcoupling_heating_tank_fmu_fmu.py\nsphx_glr_examples_00-systemcoupling_oscillating_plate.py\nsphx_glr_examples_00-systemcoupling_turek_hron_fsi2.py\nGallery generated by Sphinx-Gallery\nCoupled analysis examples\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "Integer.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#commands-and-settings-api",
        "title": "Commands and settings API",
        "section": "Commands and settings API",
        "text": "A System Coupling analysis is defined in terms of a hierarchical data model of settings.\nAn API is exposed that provides direct access to the data model and commands that assist\nin setting up and solving an analysis.\nAlthough it is possible to set up an analysis by directly assigning the relevant\ndata model objects and settings, the expected and more convenient approach is to\nuse the commands provided to set up the main objects. You then use direct\ndata model assignment to fine tune the setup.\nThe API implementation is built on a number of generic objects. Subsequent\nsections provide brief descriptions of these objects.\nCommands and settings API"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#relationship-with-the-native-system-coupling-api",
        "title": "Commands and settings API > Relationship with the native System Coupling API",
        "section": "Relationship with the native System Coupling API",
        "text": "The API exposed in PySystemCoupling is mainly an adaptation of the API that exists\nnatively in Ansys System Coupling.\nIf you are already familiar with System Coupling, or you want to consult the System\nCoupling documentation for more in-depth advice on some aspect of the system,\nyou should find it easy to translate to the API that is exposed in PySystemCoupling.\nThe key differences are as follows:\nWhile names of commands and data model elements follow camel case conventions\nin System Coupling, the names of commands and data models in PySystemCoupling follow\nsnake case convention, which is the preferred Pythonic naming convention.\nThus, the AddParticipant command in System Coupling becomes the add_participant\ncommand in PySystemCoupling. Similarly, the CouplingInterface data model object\nin System Coupling becomes the coupling_interface data model object in\nPySystemCoupling.\nCommands and queries in System Coupling are all exposed in its Python environment as top-level\nglobal names. Commands in PySystemCoupling are exposed as callable objects that are accessible\nas attributes of one of the root attributes of the Session class:\ncase, setup, and case.\nIn System Coupling, you manipulate and query the setup data model in one of these ways:\nUse high level commands to create and initialize the main objects in the data model.\nFor example, use the AddParticipant command to add a new coupling participant and\nthe AddDataTransfer command to add a new data transfer object.\nAccess individual settings using a path-like syntax, starting at a root\nobject returned by the DatamodelRoot command. For example:\nIn PySystemCoupling, you manipulate and query the setup data model in essentially\nthe same way. Setup commands are exposed from the setup attribute\nof the Session object. This attribute also plays the role of DatamodelRoot()\nin the preceding code. It serves as an entry point to accessing individual settings\nvia a similar path-like syntax:\nRelationship with the native System Coupling API\nAddParticipant\nadd_participant\nCouplingInterface\ncoupling_interface\nSession\ncase\nsetup\ncase\nAddParticipant\nAddDataTransfer\nDatamodelRoot\nsetup\nSession\nDatamodelRoot()"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#direct-access-to-the-native-system-coupling-api",
        "title": "Commands and settings API > Direct access to the native System Coupling API",
        "section": "Direct access to the native System Coupling API",
        "text": "If you want to try to quickly translate an existing System Coupling script\nto the PySystemCoupling environment, or you need to access a feature\nnot currently exposed in PySystemCoupling, you can use the\n_native_api attribute that the\nSession class offers as a back door for directly accessing\nthe native System Coupling API. However, you must still make some adjustments\nto the existing System Coupling script because calls must be via the\n_native_api attribute rather than via global commands.\nFor example, here is a command in a System Coupling script:\nWhen using the native API in PySystemCoupling, the equivalent would be:\nYou should not use the _native_api attribute generally, but you\nmight find using it necessary in specific and limited circumstances.\nDirect access to the native System Coupling API\nSession\n_native_api\n_native_api"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#top-level-objects",
        "title": "Commands and settings API > Top-level objects",
        "section": "Top-level objects",
        "text": "The commands and settings API is accessible via the top-level attributes of\nthe Session class: case, setup, and solution. These top-level\nattributes are all instances of the Container type. For links to commands\nfor these root attributes, see ref_api_details.\nTop-level objects\nSession\ncase\nsetup\nsolution\nContainer"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#container-object-types",
        "title": "Commands and settings API > Container object types",
        "section": "Container object types",
        "text": "In essence, the data model settings that define a System Coupling analysis consist\nof a collection of primitive property values, such as Integer, Real,\nString, and Boolean. To provide a structure to the settings,\nthey are organized as groups of properties in container objects.\nThere are two types of container objects: Container and NamedContainer.\nA Container object represents a grouping of primitive settings, accessible as\nproperty attributes. A Container object can also contain statically defined\nchild objects, which are accessible as attributes. For example, setup.output_control.results\nrefers to the results child of the output_control child of the setup object.\nThe names of child objects can be accessed with the child_names\nattribute of the Container object.\nThe names of the primitive settings attributes of a Container can be obtained via its\nproperty_names_types attribute. Although, this is mainly for internal use, its value\nis a list of tuples, the first element of each tuple being the name of a primitive\nsetting of the Container. As an example of such a setting, the option\nsetting of the output_control object is accessed as setup.output_control.option.\nThis particular setting is a string value.\nA NamedContainer object is a container holding dynamically created named objects of\nits specified child type, which is accessible via child_object_type attribute.\nBecause a specific named object can be accessed using the [] index operator, a\nNamedContainer object behaves somewhat like a Python dictionary. For example,\nsetup.coupling_interface['intf-1'] refers to the coupling_interface object with\nname intf-1. You can use the get_object_names() method in the container class to\nobtain a list of the names of objects held by the NamedContainer. In practice, the\nnamed object instances are Container objects. Thus, in the example just given,\nsetup.coupling_interface['intf-1'] is a Container object.\nContainer object types\nInteger\nReal\nString\nBoolean\nContainer\nNamedContainer\nContainer\nContainer\nsetup.output_control.results\nresults\noutput_control\nsetup\nchild_names\nContainer\nContainer\nproperty_names_types\nContainer\noption\noutput_control\nsetup.output_control.option\nNamedContainer\nchild_object_type\n[]\nNamedContainer\nsetup.coupling_interface['intf-1']\ncoupling_interface\nintf-1\nget_object_names()\nNamedContainer\nContainer\nsetup.coupling_interface['intf-1']\nContainer"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#container-states",
        "title": "Commands and settings API > Container states",
        "section": "Container states",
        "text": "You access the state of any container object by calling it. The call returns\nthe state of its properties and any children as a nested dictionary. The call\nsyntax is an alias for the get_state method, which you can use as a more\nexplicit alternative.\nYou modify the state of a container by assigning the corresponding attribute\nin its parent object. This assignment can be done at any level. The assigned\nstate value should be a dictionary. Again, a more explicit alternative is\navailable in the form of the set_state method.\nYou query and assign individual settings as properties on their container objects.\nYou use the print_state method to print the current state of the container in\na simple text format.\nContainer states\nget_state\nset_state\nprint_state"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#commands",
        "title": "Commands and settings API > Commands",
        "section": "Commands",
        "text": "Commands are methods of settings objects that you use to modify the state of\nthe app. The command_names attribute of a settings object\nprovides the names of its commands.\nYou can pass keyword arguments to commands if needed. You use the arguments\nattribute to access the list of valid arguments. If an argument is\nnot specified and is optional, its default value is used. Arguments are also settings objects\nand can be either a primitive type or container type.\nThe implementation of the settings classes is sufficiently flexible to\nallow commands to be exposed at any level of the container hierarchy. This is\nnot exploited in the current API, but there is scope to do so in future extensions of\nthe API. For example, where a command currently takes a reference to a data model object as\nan argument, allowing the command to be called on the relevant object could avoid\nthe explicit argument.\nCommands\ncommand_names\narguments\nsettings"
    },
    {
        "objectID": "api/core/adaptor/api",
        "href": "api/core/adaptor/api.html#settings-api-content",
        "title": "Commands and settings API > Settings API content",
        "section": "Settings API content",
        "text": "For information on commands related to settings, see:\nCase and persistence commands\nAnalysis setup commands and data model\nSolution commands\nSettings API content\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "IntegerList.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/execution_control",
        "href": "api/core/settings/_autosummary/api/execution_control.html#execution_control",
        "title": "execution_control",
        "section": "execution_control",
        "text": "Bases: Container\nConfigure execution control for a coupling participant.\nMethod used to find the solver executable file to be used to start\nthe participant.\n“ProgramControlled” - (Default) Find the executable based on the\nparticipant type. Available whenever the participant type is not\nset to “DEFAULT” or “EXTERNALDATA”.\n“UserDefined” - User supplied settings are used to find the executable.\n“ExternallyManaged” - Typically used for workflows managed by\nWorkBench.\nParticipant working directory.\nSpecify whether to use System Coupling-provided wrapper script to set up the environment.\nPath to the Python script.\nPath to participant executable.\nSpecify whether to use automatic distribution settings.\nSpecify whether to use custom executable for LS-DYNA.\nPath to LS-DYNA executable.\nLS-DYNA Parallel Option.\nInclude HPC distribution types for the distributed AEDT runs.\nSpecify number of parallel cores per task for parallel AEDT analysis.\nSpecify batch options for AEDT participant.\nAdditional command line arguments.\nFraction of available cores to use for this participant\nInitial input.\nFile containing MAPDL command snippets to modify the restarted run.\nRun participant in graphical mode.\nBase output file name for the CFD Server or SCDT Server.\nFlag indicating whether CFD Server should overwrite existing files.\nControls whether mode shapes are mass normalized\nControls whether export scdt files for the SCDT Server\nChild\nSummary\nfluent_input\nFluent input.\nParent\nSummary\ncoupling_participant_child\nConfigure a coupling participant.\nexecution_control\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/execution_control",
        "href": "api/core/settings/_autosummary/api/execution_control.html#ansys.systemcoupling.core.adaptor.api_25_1.execution_control.execution_control",
        "title": "execution_control > execution_control > execution_control",
        "section": "execution_control > execution_control",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.execution_control.execution_control(name=None, parent=None)\n\nBases: Container\n\nConfigure execution control for a coupling participant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Real.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod Real.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod StrFloatPairList.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.String.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod String.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.String.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.String.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod String.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.start_output",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.start_output.html#start_output",
        "title": "start_output",
        "section": "start_output",
        "text": "Start streaming the standard output written by the System Coupling server.\nThe stdout and stderr streams of the server process are\nmerged into a single stream.\nBy default, the output text is written to the console, but a custom\nhandler may be specified that deals with it in a different way. For\nexample, the handler might write the output to a file or display it\nin a separate window. In the default case, printing is done from a\nseparate thread. This may lead to unusual behavior in some\nPython console environments. In such cases, a custom approach based\non the handler might be preferred.\nStreaming can be cancelled by calling the end_output() method.\nCalled with a string argument that provides the latest text in the\nstream. The text may be assumed to comprise one or more complete\nlines of text, with no final newline character. The callback\nshould therefore be consistent with a simple call to the\nprint(text) method.\nNone\nstart_output\npython:callable()\noptional\nprint(text) method\nNone\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.start_output",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.start_output.html#ansys.systemcoupling.core.session.Session.start_output",
        "title": "start_output > start_output > start_output",
        "section": "start_output > start_output",
        "text": "Session.start_output(handle_output=None)\n\nStart streaming the standard output written by the System Coupling server.\n\nThe stdout and stderr streams of the server process are\nmerged into a single stream.\n\nBy default, the output text is written to the console, but a custom\nhandler may be specified that deals with it in a different way. For\nexample, the handler might write the output to a file or display it\nin a separate window. In the default case, printing is done from a\nseparate thread. This may lead to unusual behavior in some\nPython console environments. In such cases, a custom approach based\non the handler might be preferred.\n\nStreaming can be cancelled by calling the end_output() method.\n\nParameters\n\nhandle_output\n\npython:callable(), optional\n\nCalled with a string argument that provides the latest text in the\nstream. The text may be assumed to comprise one or more complete\nlines of text, with no final newline character. The callback\nshould therefore be consistent with a simple call to the\nprint(text) method.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "SettingsBase.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.setup",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.setup.html#setup",
        "title": "setup",
        "section": "setup",
        "text": "Pythonic client-side form of the System Coupling setup API and data model.\nsetup\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.setup",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.setup.html#ansys.systemcoupling.core.session.Session.setup",
        "title": "setup > setup > setup",
        "section": "setup > setup",
        "text": "property Session.setup: setup_root\n\nPythonic client-side form of the System Coupling setup API and data model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "IntegerList.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod BooleanList.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.Real.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "Real.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod SettingsBase.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.Real.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "Real.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod RealVector.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.html#types",
        "title": "types",
        "section": "types",
        "text": "Implementation types for the System Coupling adaptor API.\nThese comprise container types supporting nesting, basic types\nfor primitive settings values, and command types.\nChild containers can be generally accessed or modified using attribute access.\nNamed child objects can be accessed or modified using the index operator.\nPrimitive settings are accessed (get/set) as properties.\nCalling an object returns its current value as a state dictionary.\nto_python_name(syc_name)\nConvert the string for a native System Coupling name to a Python variable name.\nBase([name, parent])\nProvides the base class for settings and command objects.\nBoolean([name, parent])\nProvides a Boolean object that represents a Boolean value setting.\nBooleanList([name, parent])\nProvides a BooleanList object that represents a Boolean list setting.\nCommand([name, parent])\nProvides the Command object.\nContainer([name, parent])\nProvides a Container object for primitive values and other settings objects.\nFilename([name, parent])\nProvides a Filename object that represents a file name.\nInjectedCommand([name, parent])\nProvides a base class for calling a locally defined function that has been injected into the generated API hierarchy so that it appears alongside the generic commands.\nInteger([name, parent])\nProvides an Integer object that represents an integer value setting.\nIntegerList([name, parent])\nProvides an IntegerList object that represents an integer list setting.\nNamedContainer([name, parent])\nProvides a container for named instances of Container objects.\nParticipantSession([name, parent])\nObject conforming to the ParticipantProtocol runtime protocol for participant session objects.\nPathCommand([name, parent])\nProvides the path-based command object.\nReal([name, parent])\nProvides a Real object that represents a real value setting.\nRealList([name, parent])\nProvides a RealList object that represents a real list setting.\nRealVector([name, parent])\nProvides a RealVector object that represents a 3D vector.\nSettingsBase([name, parent])\nProvides the base class for settings objects.\nStrFloatPairList([name, parent])\nProvides a StrFloatPairList object that represents a list of string-float pairs.\nStrOrIntDictList([name, parent])\nProvides a StrOrIntDictList object that represents a list of simple dictionary values with string keys and string or integer values.\nStrOrIntDictListDict([name, parent])\nProvides a StrOrIntDictListDict object that represents a dictionary of string keys to StrOrIntDictList values.\nString([name, parent])\nProvides a String object that represents a string value setting.\nStringList([name, parent])\nProvides a StringList object that represents a string list setting.\ntypes\nto_python_name\nBase\nBoolean\nBoolean\nBooleanList\nBooleanList\nCommand\nCommand\nContainer\nContainer\nsettings\nFilename\nFilename\nInjectedCommand\nInteger\nInteger\nIntegerList\nIntegerList\nNamedContainer\nContainer\nParticipantSession\nParticipantProtocol\nPathCommand\nReal\nReal\nRealList\nRealList\nRealVector\nRealVector\nSettingsBase\nsettings\nStrFloatPairList\nStrFloatPairList\nStrOrIntDictList\nStrOrIntDictList\nStrOrIntDictListDict\nStrOrIntDictListDict\nStrOrIntDictList\nString\nString\nStringList\nStringList\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.html#example",
        "title": "types > Example",
        "section": "Example",
        "text": "Here is an example using the root setup object.\ninterface_name = “interface-1”\ninterface = setup.coupling_interface.create(interface_name)\ninterface.side[“One”].coupling_participant = “MAPDL-1”\nsetup.solution_control.time_step_size = “0.1 [s]”\nsetup.solution_control.print_state()\nassert setup.solution_control.time_step_size == “0.1 [s]”\nExample\nsetup"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_mode_shape_variables",
        "href": "api/core/settings/_autosummary/api/get_mode_shape_variables.html#get_mode_shape_variables",
        "title": "get_mode_shape_variables",
        "section": "get_mode_shape_variables",
        "text": "Bases: Command\nGiven an interface name, returns a list of mode shape variables available\nfrom the MECH-SRV participant.\nString indicating the name of the interface.\nParent\nSummary\nsetup_root\n‘root’ object\nget_mode_shape_variables\nCommand\npython:str\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/get_mode_shape_variables",
        "href": "api/core/settings/_autosummary/api/get_mode_shape_variables.html#ansys.systemcoupling.core.adaptor.api_25_1.get_mode_shape_variables.get_mode_shape_variables",
        "title": "get_mode_shape_variables > get_mode_shape_variables > get_mode_shape_variables",
        "section": "get_mode_shape_variables > get_mode_shape_variables",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.get_mode_shape_variables.get_mode_shape_variables(name=None, parent=None)\n\nBases: Command\n\nGiven an interface name, returns a list of mode shape variables available\nfrom the MECH-SRV participant.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the name of the interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.Container.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "Container.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod BooleanList.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.RealVector.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod RealVector.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "Integer.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#fmu-fmu-cosimulation-of-a-heating-tank--heater",
        "title": "FMU-FMU cosimulation of a heating tank & heater",
        "section": "FMU-FMU cosimulation of a heating tank & heater",
        "text": "This demo illustrates a transient coupled simulation of convection\nheating of a fluid in a cylindrical tank. The heat source and heating\ntank are controlled via two FMUs that share temperature and heat flow\ndata with one another.\nOne FMU is used to model the fluid in the tank.\nAnother FMU is used to model the controlled heat source at the bottom\nof the tank.\nSystem Coupling coordinates the simultaneous execution of the solvers\nand the data transfers between them.\nProblem description\nThe tank is modelled as a uniform-temperature fluid heated by a\nthermostat and experiencing convective cooling at its top. The\ntemperature of the fluid is available as an output, modelling a sensor\nin the tank. The FMU has six parameters that can be set:\nHeight and base radius of the cylindrical tank [m]\nDensity [kg m-3] and specific heat [W kg-1K-1] of the fluid\n(by default, set to the properties of water)\nConvection heat transfer coefficient between the fluid and its\nsurroundings [W m-2K-1]\nTemperature of the tank’s surroundings [K].\nThe thermostat receives a temperature from the tank sensor and outputs\na heat-rate. The FMU uses PID (proprtional-integral-derivative) control\nto determine the heat output and has five parameters that can be set:\nTarget temperature [K]\nMaximum heat output [W]\nHeat scale proportional factor [W/K]\nHeat scale integral factor [W K-1s-1]\nHeat scale derivative factor [W s K-1]\nOne coupling interface between the FMUs with two data transfers :\ntemperature\nheat flow\nFMU-FMU cosimulation of a heating tank & heater"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#import-modules-download-files-launch-products",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Import modules, download files, launch products",
        "section": "Import modules, download files, launch products",
        "text": "Setting up this example consists of importing required modules,\ndownloading the input files, and launching the required products.\nImport modules, download files, launch products"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#perform-required-imports",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Perform required imports",
        "section": "Perform required imports",
        "text": "Import ansys-systemcoupling-core.\nPerform required imports\nansys-systemcoupling-core"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#download-the-input-files",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Download the input files",
        "section": "Download the input files",
        "text": "This example requires the two FMU files to be downloaded.\nDownload the input files"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#launch-system-coupling",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Launch System Coupling",
        "section": "Launch System Coupling",
        "text": "Launch a remote System Coupling instance and return a client object\n(a Session object) that allows you to interact with System Coupling\nvia an API exposed into the current Python environment.\nLaunch System Coupling\nSession"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#set-up-the-coupled-analysis",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Set up the coupled analysis",
        "section": "Set up the coupled analysis",
        "text": "System Coupling setup involves adding the two FMU participants,\nadding coupled interfaces and data transfers,\nand setting other coupled analysis properties.\nAdd participants by passing session handles to System Coupling.\nSet up the coupled analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#set-fmu-settings",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Set FMU settings",
        "section": "Set FMU settings",
        "text": "Set FMU settings"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#add-a-coupling-interface-and-data-transfers",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Add a coupling interface and data transfers",
        "section": "Add a coupling interface and data transfers",
        "text": "Other controls\nAdd a coupling interface and data transfers"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#solution",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Solution",
        "section": "Solution",
        "text": "Solution"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#post-processing",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Post-processing",
        "section": "Post-processing",
        "text": "Plot graphs of temperature and heat rate over time using System Coupling’s\ncharting command.\nPost-processing"
    },
    {
        "objectID": "examples/00-systemcoupling/heating_tank_fmu_fmu",
        "href": "examples/00-systemcoupling/heating_tank_fmu_fmu.html#exit",
        "title": "FMU-FMU cosimulation of a heating tank & heater > Exit",
        "section": "Exit",
        "text": "Total running time of the script: (0 minutes 34.409 seconds)\nDownload Jupyter notebook: heating_tank_fmu_fmu.ipynb\nDownload Python source code: heating_tank_fmu_fmu.py\nDownload zipped: heating_tank_fmu_fmu.zip\nGallery generated by Sphinx-Gallery\nExit\nDownload Jupyter notebook: heating_tank_fmu_fmu.ipynb\nDownload Python source code: heating_tank_fmu_fmu.py\nDownload zipped: heating_tank_fmu_fmu.zip\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.RealList.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod RealList.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.__init__.html#__init__",
        "title": "__init__",
        "section": "__init__",
        "text": "Initialize an instance of the Base class.\nName of the object if it is a named-object child.\nParent of the object.\n__init__\nBase\npython:str\noptional\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.__init__",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.__init__.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.__init__",
        "title": "__init__ > __init__ > __init__",
        "section": "__init__ > __init__",
        "text": "BooleanList.__init__(name=None, parent=None)\n\nInitialize an instance of the Base class.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the object if it is a named-object child.\n\nparent: Base\n\nParent of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.Integer.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod Integer.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.SettingsBase.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "SettingsBase.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.html#ansyssystemcouplingcoreadaptorimpltypesparticipantsession",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession",
        "text": "Object conforming to the ParticipantProtocol runtime protocol\nfor participant session objects.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.ParticipantSession\nParticipantProtocol\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession.html#ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession > ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession > ParticipantSession",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession > ParticipantSession",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.ParticipantSession(name=None, parent=None)\n\nObject conforming to the ParticipantProtocol runtime protocol\nfor participant session objects.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.version",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.version.html#version",
        "title": "version",
        "section": "version",
        "text": "Return the server version as a string.\nThe version string is in the form of dot-separated major and minor\nversion numbers. For example, “24.2”.\nversion\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.version",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.version.html#ansys.systemcoupling.core.session.Session.version",
        "title": "version > version > version",
        "section": "version > version",
        "text": "property Session.version: str\n\nReturn the server version as a string.\n\nThe version string is in the form of dot-separated major and minor\nversion numbers. For example, “24.2”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/partition_participants",
        "href": "api/core/settings/_autosummary/api/partition_participants.html#partition_participants",
        "title": "partition_participants",
        "section": "partition_participants",
        "text": "Bases: Command\nProvide a utility for setting the parallel algorithm, parallel partitioning\nfractions for each participant, and machine list information.\nAt least one participant must be defined for this command to be used. Use\nof this command is not recommended if participants are already running.\nName of the partitioning algorithm. Available algorithms are:\n“SharedAllocateMachines” (default)\n“SharedAllocateCores”\n“DistributedAllocateMachines”\n“DistributedAllocateCores”\n“Custom” (see partitioning_info for more details)\nThe algorithms allow for both shared and distributed execution and for\nthe allocation of machines or cores. The default value is generally the\nbest choice, as it allows for each participant to take advantage of all\nthe allocated resources. The other partitioning methods are provided to\nhandle situations where not enough resources are available to run the\nsame machines.\nSee the System Coupling documentation for more details of the\npartitioning algorithms.\nList of tuples specifying the fractions of core count applied for\neach participant\nEach tuple must have the participant name as its first item and the\nassociated fraction as its second item. If this parameter is omitted,\nthen cores will be allocated for all participants set in the\ndata model.\nList of dictionaries specifying machines available for distributed run.\nEach dictionary must have a key “machine-name” with machine name as its\nvalue, and key “core-count” with number of cores for that machine as\nits value. Providing this argument will override any machine list\ninformation detected from the scheduler environment and any information\nprovided by the --cnf command-line argument.\nDictionary specifying machines resources assigned to each participant by user.\nDictionary must have participant names as keys and machine lists containing\nmachine resources as values. The value of a partitioning_info machine list is\na list of dictionaries specifying machines assigned to corresponding participants.\nEach dictionary of the machine list must have a key “machine-name” with the\nmachine name as its value, and key “core-count” with number of cores for that\nmachine as its value.\nProviding this argument will disallow other arguments except algorithm_name,\nwhich must set as “Custom” if provided. Otherwise, algorithm_name will be\nset as “Custom” internally if partitioning_info is provided.\nParent\nSummary\nsolution_root\n‘root’ object\npartition_participants\nCommand\npython:str\noptional\npartitioning_info\nList\noptional\nList\noptional\n--cnf\nDict\noptional\npartitioning_info\nalgorithm_name\nalgorithm_name\npartitioning_info\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/partition_participants",
        "href": "api/core/settings/_autosummary/api/partition_participants.html#ansys.systemcoupling.core.adaptor.api_25_1.partition_participants.partition_participants",
        "title": "partition_participants > partition_participants > partition_participants",
        "section": "partition_participants > partition_participants",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.partition_participants.partition_participants(name=None, parent=None)\n\nBases: Command\n\nProvide a utility for setting the parallel algorithm, parallel partitioning\nfractions for each participant, and machine list information.\n\nAt least one participant must be defined for this command to be used. Use\nof this command is not recommended if participants are already running.\n\nParameters\n\nalgorithm_name\n\npython:str, optional\n\nName of the partitioning algorithm. Available algorithms are:\n\n“SharedAllocateMachines” (default)\n\n“SharedAllocateCores”\n\n“DistributedAllocateMachines”\n\n“DistributedAllocateCores”\n\n“Custom” (see partitioning_info for more details)\n\nThe algorithms allow for both shared and distributed execution and for\nthe allocation of machines or cores. The default value is generally the\nbest choice, as it allows for each participant to take advantage of all\nthe allocated resources. The other partitioning methods are provided to\nhandle situations where not enough resources are available to run the\nsame machines.\n\nSee the System Coupling documentation for more details of the\npartitioning algorithms.\n\nnames_and_fractions\n\nList, optional\n\nList of tuples specifying the fractions of core count applied for\neach participant\n\nEach tuple must have the participant name as its first item and the\nassociated fraction as its second item. If this parameter is omitted,\nthen cores will be allocated for all participants set in the\ndata model.\n\nmachine_list\n\nList, optional\n\nList of dictionaries specifying machines available for distributed run.\nEach dictionary must have a key “machine-name” with machine name as its\nvalue, and key “core-count” with number of cores for that machine as\nits value. Providing this argument will override any machine list\ninformation detected from the scheduler environment and any information\nprovided by the --cnf command-line argument.\n\npartitioning_info\n\nDict, optional\n\nDictionary specifying machines resources assigned to each participant by user.\nDictionary must have participant names as keys and machine lists containing\nmachine resources as values. The value of a partitioning_info machine list is\na list of dictionaries specifying machines assigned to corresponding participants.\nEach dictionary of the machine list must have a key “machine-name” with the\nmachine name as its value, and key “core-count” with number of cores for that\nmachine as its value.\n\nProviding this argument will disallow other arguments except algorithm_name,\nwhich must set as “Custom” if provided. Otherwise, algorithm_name will be\nset as “Custom” internally if partitioning_info is provided.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#fluid-swirl",
        "title": "Fluid swirl",
        "section": "Fluid swirl",
        "text": "This example illustrates a one-way data transfer from a SCDT file to\nFluent, using System Coupling. Fluent solves a simple steady fluid\nflow problem, where the flow is affected by the momentum sources\ndefined in the SCDT file.\nProblem description\nFluid flow problem consists of the water flowing through the pipe.\nThe SCDT file will be generated that consists of a cloud of points\noverlapping the fluid domain. At each point, the force density value\nis defined, with force acting along the flow cross-section, always in a\ncounter-clockwise direction (if looking from the inlet to the outlet).\nSystem Coupling is used to map the data from the cloud of points defined\nin the SCDT file onto Fluent mesh. The force values are then transferred\ninto Fluent and Fluent solves the resulting fluid flow problem, where\nthe fluid is influenced by the provided forces. As a result, the\nswirl is induced in the fluid flow.\nFluid swirl"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#import-modules-download-files-launch-products",
        "title": "Fluid swirl > Import modules, download files, launch products",
        "section": "Import modules, download files, launch products",
        "text": "Setting up this example consists of performing imports, downloading\nthe input file, and launching the required products.\nImport modules, download files, launch products"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#perform-required-imports",
        "title": "Fluid swirl > Perform required imports",
        "section": "Perform required imports",
        "text": "Import the ansys-systemcoupling-core package and other required packages.\nPerform required imports\nansys-systemcoupling-core"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#download-input-files",
        "title": "Fluid swirl > Download input files",
        "section": "Download input files",
        "text": "Download the case file for Fluent and the FMU file.\nDownload input files"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#launch-products",
        "title": "Fluid swirl > Launch products",
        "section": "Launch products",
        "text": "Launch a remote Fluent and System Coupling instances and\nreturn client objects that allows you to interact with\nthese products via an API exposed into the current Python\nenvironment.\nFluent version greater than 24.1 is required.\nTo specify Fluent version explicitly when launching Fluent,\nuse product_version argument to the launch_fluent\nfunction, for example pyfluent.launch_fluent(product_version=\"24.2.0\")\nLaunch products\nproduct_version\nlaunch_fluent\npyfluent.launch_fluent(product_version=\"24.2.0\")"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#setup",
        "title": "Fluid swirl > Setup",
        "section": "Setup",
        "text": "The setup consists of setting up the the fluids analysis,\ngenerating the SCDT file, and setting up the coupled analysis.\nSetup"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#set-up-the-fluid-analysis",
        "title": "Fluid swirl > Set up the fluid analysis",
        "section": "Set up the fluid analysis",
        "text": "Read the pre-created case file.\nSet up the fluid analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#generate-the-scdt-file",
        "title": "Fluid swirl > Generate the SCDT file",
        "section": "Generate the SCDT file",
        "text": "The following script generates a simple comma-separated file\nwith points defined along the fluid domain. Six columns of data\nwill be written: x, y, z coordinate values, followed by\nx-, y-, and z-components of the force density field.\nThe number of points can be adjusted by naxial, ncirc,\nand nrad parameter values.\nThe magnitude of the force (defined in N/m^3) can be adjusted\nby force_mag parameter value.\nGenerate the SCDT file"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#set-up-the-coupled-analysis",
        "title": "Fluid swirl > Set up the coupled analysis",
        "section": "Set up the coupled analysis",
        "text": "System Coupling setup involves adding the SCDT file and\nFluent solver session as participants, adding coupled\ninterfaces and data transfers, and setting other coupled\nanalysis properties.\nAdd participants\nSet up the coupled analysis"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#add-a-coupling-interface-and-data-transfers",
        "title": "Fluid swirl > Add a coupling interface and data transfers",
        "section": "Add a coupling interface and data transfers",
        "text": "Add a coupling interface and data transfers"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#solution",
        "title": "Fluid swirl > Solution",
        "section": "Solution",
        "text": "Solution"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#post-processing",
        "title": "Fluid swirl > Post-processing",
        "section": "Post-processing",
        "text": "Generate an image with fluid flow streamlines using PyFluent post-processing.\nNote how the force values defined in the SCDT file induce the swirl in\nthe fluid flow.\nPost-processing"
    },
    {
        "objectID": "examples/00-systemcoupling/fluid_swirl",
        "href": "examples/00-systemcoupling/fluid_swirl.html#exit",
        "title": "Fluid swirl > Exit",
        "section": "Exit",
        "text": "Total running time of the script: (1 minutes 26.914 seconds)\nDownload Jupyter notebook: fluid_swirl.ipynb\nDownload Python source code: fluid_swirl.py\nDownload zipped: fluid_swirl.zip\nGallery generated by Sphinx-Gallery\nExit\nDownload Jupyter notebook: fluid_swirl.ipynb\nDownload Python source code: fluid_swirl.py\nDownload zipped: fluid_swirl.zip\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictList.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "StrOrIntDictList.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.end_output",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.end_output.html#end_output",
        "title": "end_output",
        "section": "end_output",
        "text": "Cancel output streaming previously started by the start_output method.\nNone\nend_output\nstart_output\nNone\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.end_output",
        "href": "api/core/_autosummary/ansys.systemcoupling.core.session.Session.end_output.html#ansys.systemcoupling.core.session.Session.end_output",
        "title": "end_output > end_output > end_output",
        "section": "end_output > end_output",
        "text": "Session.end_output()\n\nCancel output streaming previously started by the start_output method.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.html#ansyssystemcouplingcoreadaptorimpltypesstringlist",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StringList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StringList",
        "text": "Provides a StringList object that represents a string list setting.\n__init__([name, parent])\nInitialize an instance of the Base class.\nget_property_state(prop)\nGet the state of the prop property .\nget_state()\nGet the state of the object.\nprint_state([out, indent_factor])\nPrint the state of the object.\nset_property_state(prop, value)\nSet the state of the prop property to value.\nset_state(state)\nSet the state of the object.\nset_sycproxy(sycproxy)\nSet sycproxy object.\nto_python_keys(value)\nConvert value to have keys with Python names.\nto_python_name(name)\nConvert the native System Coupling identifier to a Python name.\nto_syc_keys(value)\nConvert value to have keys with native System Coupling names.\nto_syc_name(name)\nConvert Python name to a native System Coupling identifier.\nobj_name\nSystem Coupling name of this object.\npath\nPath of the object.\nsyc_name\n\nsyc_path\nPath of the object in native System Coupling form.\nsycproxy\nProxy object.\nansys.systemcoupling.core.adaptor.impl.types.StringList\nStringList\n__init__\nBase\nget_property_state\nprop\nget_state\nprint_state\nset_property_state\nprop\nvalue\nset_state\nset_sycproxy\nto_python_keys\nto_python_name\nto_syc_keys\nto_syc_name\nobj_name\npath\nsyc_name\nsyc_path\nsycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StringList.html#ansys.systemcoupling.core.adaptor.impl.types.StringList",
        "title": "ansys.systemcoupling.core.adaptor.impl.types.StringList > ansys.systemcoupling.core.adaptor.impl.types.StringList > StringList",
        "section": "ansys.systemcoupling.core.adaptor.impl.types.StringList > StringList",
        "text": "class ansys.systemcoupling.core.adaptor.impl.types.StringList(name=None, parent=None)\n\nProvides a StringList object that represents a string list setting.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\n__init__([name, parent])\n\nInitialize an instance of the Base class.\n\nget_property_state(prop)\n\nGet the state of the prop property .\n\nget_state()\n\nGet the state of the object.\n\nprint_state([out, indent_factor])\n\nPrint the state of the object.\n\nset_property_state(prop, value)\n\nSet the state of the prop property to value.\n\nset_state(state)\n\nSet the state of the object.\n\nset_sycproxy(sycproxy)\n\nSet sycproxy object.\n\nto_python_keys(value)\n\nConvert value to have keys with Python names.\n\nto_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nto_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nto_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\n\n\nAttributes\n\n\n\n\n\n\n\nobj_name\n\nSystem Coupling name of this object.\n\npath\n\nPath of the object.\n\nsyc_name\n\n\n\nsyc_path\n\nPath of the object in native System Coupling form.\n\nsycproxy\n\nProxy object."
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_keys.html#to_python_keys",
        "title": "to_python_keys",
        "section": "to_python_keys",
        "text": "Convert value to have keys with Python names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_python_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_keys.html#ansys.systemcoupling.core.adaptor.impl.types.Filename.to_python_keys",
        "title": "to_python_keys > to_python_keys > to_python_keys",
        "section": "to_python_keys > to_python_keys",
        "text": "classmethod Filename.to_python_keys(value)\n\nConvert value to have keys with Python names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.print_state.html#print_state",
        "title": "print_state",
        "section": "print_state",
        "text": "Print the state of the object.\nprint_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.print_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.print_state.html#ansys.systemcoupling.core.adaptor.impl.types.StrFloatPairList.print_state",
        "title": "print_state > print_state > print_state",
        "section": "print_state > print_state",
        "text": "StrFloatPairList.print_state(out=None, indent_factor=2)\n\nPrint the state of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_keys.html#to_syc_keys",
        "title": "to_syc_keys",
        "section": "to_syc_keys",
        "text": "Convert value to have keys with native System Coupling names.\nThe value is overridden in Container and NamedContainer classes.\nTypeVar(StateT)\nto_syc_keys\nContainer\nNamedContainer\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_keys",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_keys.html#ansys.systemcoupling.core.adaptor.impl.types.StrOrIntDictListDict.to_syc_keys",
        "title": "to_syc_keys > to_syc_keys > to_syc_keys",
        "section": "to_syc_keys > to_syc_keys",
        "text": "classmethod StrOrIntDictListDict.to_syc_keys(value)\n\nConvert value to have keys with native System Coupling names.\n\nThe value is overridden in Container and NamedContainer classes.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_state.html#get_state",
        "title": "get_state",
        "section": "get_state",
        "text": "Get the state of the object.\nTypeVar(StateT)\nget_state\nTypeVar\nStateT\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Real.get_state.html#ansys.systemcoupling.core.adaptor.impl.types.Real.get_state",
        "title": "get_state > get_state > get_state",
        "section": "get_state > get_state",
        "text": "Real.get_state()\n\nGet the state of the object.\n\nReturn type\n\nTypeVar(StateT)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_name.html#to_python_name",
        "title": "to_python_name",
        "section": "to_python_name",
        "text": "Convert the native System Coupling identifier to a Python name.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_python_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_name.html#ansys.systemcoupling.core.adaptor.impl.types.BooleanList.to_python_name",
        "title": "to_python_name > to_python_name > to_python_name",
        "section": "to_python_name > to_python_name",
        "text": "classmethod BooleanList.to_python_name(name)\n\nConvert the native System Coupling identifier to a Python name.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_data_transfer_by_display_names",
        "href": "api/core/settings/_autosummary/api/add_data_transfer_by_display_names.html#add_data_transfer_by_display_names",
        "title": "add_data_transfer_by_display_names",
        "section": "add_data_transfer_by_display_names",
        "text": "Bases: Command\nImportant: This command is deprecated. To add an interface, use the\nadd_data_transfer command instead.\nAdds data transfer based on arguments that specify the interface, target\nside, and variables to be associated with each side of the interface.\nThe command requires that you specify variables using their display names\n(see parameter descriptions for details). Either a variable-based\nor expression-based data transfer may be created with this command based on\nthe arguments provided. If a variable-based data transfer argument\nis given, then no expression-based data transfer arguments can be used. If\nan expression-based data transfer argument is given, then no variable-based\ndata transfer arguments can be used.\nCannot be run after participants have been started.\nReturns the name of the Data Transfer created.\nString indicating the display name of the interface on which the\ndata transfer is to be created.\nString indicating the side of the interface to receive the data\ntransfer variable. Possible values are “One” or “Two”.\nString specifying the display name of the variable on the source side of\nthe data transfer. Used when creating a variable-based data transfer.\nMust be combined with target_variable.\nString specifying the display name of the variable on the target side of\nthe data transfer. Must be combined with either source_variable (when\ncreating a variable-based data transfer) or with value_{x|y|z}\n(when creating an expression-based data transfer).\nString specifying the expression to use on the source side of the data\ntransfer. Used when creating an expression-based data transfer if the\ntarget_variable is a scalar. (If the target_variable is a vector,\nvalue_x, value_y, value_z must be used instead.)\nString specifying the X component of the expression to use on the\nsource side of the data transfer. Used when crating an expression-based\ndata transfer if the target_variable is a vector. (If the target_variable\nis scalar, value must be used instead.) value_y and value_z are also\nrequired if value_x is used.\nString specifying the Y component of the expression to use on the\nsource side of the data transfer. Used when crating an expression-based\ndata transfer if the target_variable is a vector. (If the target_variable\nis scalar, value must be used instead.) value_x and value_z are also\nrequired if value_y is used.\nString specifying the Z component of the expression to use on the\nsource side of the data transfer. Used when crating an expression-based\ndata transfer if the target_variable is a vector. (If the target_variable\nis scalar, value must be used instead.) value_x and value_y are also\nrequired if value_z is used.\nString specifying the display name of the variable associated with side one\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\nString specifying the display name of the variable associated with side two\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\nParent\nSummary\nsetup_root\n‘root’ object\nadd_data_transfer_by_display_names\nCommand\nadd_data_transfer\npython:str\npython:str\npython:str\noptional\ntarget_variable\npython:str\noptional\nsource_variable\nvalue_{x|y|z}\npython:str\noptional\ntarget_variable\ntarget_variable\nvalue_x\nvalue_y\nvalue_z\npython:str\noptional\ntarget_variable\ntarget_variable\nvalue\nvalue_y\nvalue_z\nvalue_x\npython:str\noptional\ntarget_variable\ntarget_variable\nvalue\nvalue_x\nvalue_z\nvalue_y\npython:str\noptional\ntarget_variable\ntarget_variable\nvalue\nvalue_x\nvalue_y\nvalue_z\npython:str\noptional\nside_two_variable\nsource_variable\ntarget_variable\npython:str\noptional\nside_two_variable\nsource_variable\ntarget_variable\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/add_data_transfer_by_display_names",
        "href": "api/core/settings/_autosummary/api/add_data_transfer_by_display_names.html#ansys.systemcoupling.core.adaptor.api_25_1.add_data_transfer_by_display_names.add_data_transfer_by_display_names",
        "title": "add_data_transfer_by_display_names > add_data_transfer_by_display_names > add_data_transfer_by_display_names",
        "section": "add_data_transfer_by_display_names > add_data_transfer_by_display_names",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.add_data_transfer_by_display_names.add_data_transfer_by_display_names(name=None, parent=None)\n\nBases: Command\n\nImportant: This command is deprecated. To add an interface, use the\nadd_data_transfer command instead.\n\nAdds data transfer based on arguments that specify the interface, target\nside, and variables to be associated with each side of the interface.\nThe command requires that you specify variables using their display names\n(see parameter descriptions for details). Either a variable-based\nor expression-based data transfer may be created with this command based on\nthe arguments provided. If a variable-based data transfer argument\nis given, then no expression-based data transfer arguments can be used. If\nan expression-based data transfer argument is given, then no variable-based\ndata transfer arguments can be used.\n\nCannot be run after participants have been started.\n\nReturns the name of the Data Transfer created.\n\nParameters\n\ninterface\n\npython:str\n\nString indicating the display name of the interface on which the\ndata transfer is to be created.\n\ntarget_side\n\npython:str\n\nString indicating the side of the interface to receive the data\ntransfer variable. Possible values are “One” or “Two”.\n\nsource_variable\n\npython:str, optional\n\nString specifying the display name of the variable on the source side of\nthe data transfer. Used when creating a variable-based data transfer.\nMust be combined with target_variable.\n\ntarget_variable\n\npython:str, optional\n\nString specifying the display name of the variable on the target side of\nthe data transfer. Must be combined with either source_variable (when\ncreating a variable-based data transfer) or with value_{x|y|z}\n(when creating an expression-based data transfer).\n\nvalue\n\npython:str, optional\n\nString specifying the expression to use on the source side of the data\ntransfer. Used when creating an expression-based data transfer if the\ntarget_variable is a scalar. (If the target_variable is a vector,\nvalue_x, value_y, value_z must be used instead.)\n\nvalue_x\n\npython:str, optional\n\nString specifying the X component of the expression to use on the\nsource side of the data transfer. Used when crating an expression-based\ndata transfer if the target_variable is a vector. (If the target_variable\nis scalar, value must be used instead.) value_y and value_z are also\nrequired if value_x is used.\n\nvalue_y\n\npython:str, optional\n\nString specifying the Y component of the expression to use on the\nsource side of the data transfer. Used when crating an expression-based\ndata transfer if the target_variable is a vector. (If the target_variable\nis scalar, value must be used instead.) value_x and value_z are also\nrequired if value_y is used.\n\nvalue_z\n\npython:str, optional\n\nString specifying the Z component of the expression to use on the\nsource side of the data transfer. Used when crating an expression-based\ndata transfer if the target_variable is a vector. (If the target_variable\nis scalar, value must be used instead.) value_x and value_y are also\nrequired if value_z is used.\n\nside_one_variable\n\npython:str, optional\n\nString specifying the display name of the variable associated with side one\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\n\nside_two_variable\n\npython:str, optional\n\nString specifying the display name of the variable associated with side two\nof the interface. Must be combined with side_two_variable. Used only\nwhen creating variable-based data transfers. Consider using\nsource_variable/target_variable parameters instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/execution_control_1",
        "href": "api/core/settings/_autosummary/api/execution_control_1.html#execution_control",
        "title": "execution_control",
        "section": "execution_control",
        "text": "Bases: Container\nConfigure execution control for a live visualization.\nSet behavior of this object.\nParent\nSummary\nlive_visualization_child\nConfigures live visualization via EnSight DVS.\nexecution_control\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/execution_control_1",
        "href": "api/core/settings/_autosummary/api/execution_control_1.html#ansys.systemcoupling.core.adaptor.api_25_1.execution_control_1.execution_control",
        "title": "execution_control > execution_control > execution_control",
        "section": "execution_control > execution_control",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.execution_control_1.execution_control(name=None, parent=None)\n\nBases: Container\n\nConfigure execution control for a live visualization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-systemcoupling/sg_execution_times",
        "href": "examples/00-systemcoupling/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "11:49.147 total execution time for 4 files from examples/00-systemcoupling:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-systemcoupling_oscillating_plate.py (oscillating_plate.py)\n07:23.898\n0.0\nsphx_glr_examples_00-systemcoupling_turek_hron_fsi2.py (turek_hron_fsi2.py)\n02:23.926\n0.0\nsphx_glr_examples_00-systemcoupling_fluid_swirl.py (fluid_swirl.py)\n01:26.914\n0.0\nsphx_glr_examples_00-systemcoupling_heating_tank_fmu_fmu.py (heating_tank_fmu_fmu.py)\n00:34.409\n0.0\nComputation times\noscillating_plate.py\nturek_hron_fsi2.py\nfluid_swirl.py\nheating_tank_fmu_fmu.py\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.set_sycproxy.html#set_sycproxy",
        "title": "set_sycproxy",
        "section": "set_sycproxy",
        "text": "Set sycproxy object.\nset_sycproxy\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.set_sycproxy",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.Base.set_sycproxy.html#ansys.systemcoupling.core.adaptor.impl.types.Base.set_sycproxy",
        "title": "set_sycproxy > set_sycproxy > set_sycproxy",
        "section": "set_sycproxy > set_sycproxy",
        "text": "classmethod Base.set_sycproxy(sycproxy)\n\nSet sycproxy object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_name.html#to_syc_name",
        "title": "to_syc_name",
        "section": "to_syc_name",
        "text": "Convert Python name to a native System Coupling identifier.\nThis name is overridden in Container and NamedContainer classes.\nstr\nto_syc_name\nContainer\nNamedContainer\nstr\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_name",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_name.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.to_syc_name",
        "title": "to_syc_name > to_syc_name > to_syc_name",
        "section": "to_syc_name > to_syc_name",
        "text": "classmethod IntegerList.to_syc_name(name)\n\nConvert Python name to a native System Coupling identifier.\n\nThis name is overridden in Container and NamedContainer classes.\n\nReturn type\n\nstr\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression_child",
        "href": "api/core/settings/_autosummary/api/expression_child.html#expression_child",
        "title": "expression_child",
        "section": "expression_child",
        "text": "Bases: Container\nDefine a named expression that can be referenced in other expressions.\nName used to reference this expression from another expression\nString defining the expression.\nParent\nSummary\nexpression\nDefine a named expression that can be referenced in other expressions.\nexpression_child\nContainer\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/settings/_autosummary/api/expression_child",
        "href": "api/core/settings/_autosummary/api/expression_child.html#ansys.systemcoupling.core.adaptor.api_25_1.expression_child.expression_child",
        "title": "expression_child > expression_child > expression_child",
        "section": "expression_child > expression_child",
        "text": "class ansys.systemcoupling.core.adaptor.api_25_1.expression_child.expression_child(name=None, parent=None)\n\nBases: Container\n\nDefine a named expression that can be referenced in other expressions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/native_api_property",
        "href": "api/core/adaptor/native_api_property.html#session_native_api",
        "title": "Session._native_api",
        "section": "Session._native_api",
        "text": "Access to the native System Coupling API and data model.\nUse of this API is not particularly encouraged, but there may be\nsituations where it is useful to access functionality that, for\nsome reason, has not been fully exposed in PySystemCoupling.\nFurthermore, existing users of the System Coupling CLI may initially\nfind it comfortable to work with the familiar API while transitioning\nto using PySystemCoupling.\nThis API is exposed dynamically on the client side and provides\nlittle runtime assistance and documentation.\nFor more information, see the NativeApi class itself.\nSession._native_api\nSession._native_api\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/native_api_property",
        "href": "api/core/adaptor/native_api_property.html#ansys.systemcoupling.core.session.Session._native_api",
        "title": "Session._native_api > Session._native_api > _native_api",
        "section": "Session._native_api > _native_api",
        "text": "property Session._native_api: NativeApi\n\nAccess to the native System Coupling API and data model.\n\nUse of this API is not particularly encouraged, but there may be\nsituations where it is useful to access functionality that, for\nsome reason, has not been fully exposed in PySystemCoupling.\n\nFurthermore, existing users of the System Coupling CLI may initially\nfind it comfortable to work with the familiar API while transitioning\nto using PySystemCoupling.\n\nThis API is exposed dynamically on the client side and provides\nlittle runtime assistance and documentation.\n\nFor more information, see the NativeApi class itself.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_property_state.html#get_property_state",
        "title": "get_property_state",
        "section": "get_property_state",
        "text": "Get the state of the prop property .\nget_property_state\nprop\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_property_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_property_state.html#ansys.systemcoupling.core.adaptor.impl.types.IntegerList.get_property_state",
        "title": "get_property_state > get_property_state > get_property_state",
        "section": "get_property_state > get_property_state",
        "text": "IntegerList.get_property_state(prop)\n\nGet the state of the prop property .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_state.html#set_state",
        "title": "set_state",
        "section": "set_state",
        "text": "Set the state of the object.\nset_state\ncase_root\nsetup_root\nsolution_root"
    },
    {
        "objectID": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_state",
        "href": "api/core/adaptor/_autosummary/ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_state.html#ansys.systemcoupling.core.adaptor.impl.types.NamedContainer.set_state",
        "title": "set_state > set_state > set_state",
        "section": "set_state > set_state",
        "text": "NamedContainer.set_state(state)\n\nSet the state of the object.\n\n!! processed by numpydoc !!"
    }
]