name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: "3.8"
  PACKAGE_NAME: "ansys-systemcoupling-core"
  PACKAGE_NAMESPACE: "ansys.systemcoupling.core"
  DOCUMENTATION_CNAME: "systemcoupling.docs.pyansys.com"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  doc-style:
    name: "Documentation style check"
    runs-on: ubuntu-latest
    steps:
      - name: "PySystemCoupling documentation style checks"
        uses: pyansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: pyansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  smoke-tests:
    name: Build and smoke tests
    needs: [style]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - name: "Build wheelhouse and perform smoke test"
        uses: pyansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  build:
    name: Build package, incl. API generation
    needs: [smoke-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Create initial wheel and install
        run: make build-install

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Pull docker image
        run: make docker-pull
        env:
          SYC_IMAGE_TAG: v23.1.0

      - name: Generate API code
        run: make generate-api
        env:
          SYC_LAUNCH_CONTAINER: 1
          SYC_IMAGE_TAG: v23.1.0

      - name: Clean out dist
        run: rm -rf dist

      - name: Build library source and wheel artifacts
        # Note: v4 does not support checkout suppression flag.
        #       We need this to prevent generated code from
        #       being deleted and not included in library.
        uses: pyansys/actions/build-library@v3
        with:
          checkout: false
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  test:
    name: Testing
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-artifacts
          path: dist

      - name: Install pysystemcoupling with test dependencies
        run: |
          wheel_name=`echo dist/*.whl`
          pip install -q --force-reinstall ${wheel_name}[tests] > /dev/null

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Pull docker image
        run: make docker-pull
        env:
          SYC_IMAGE_TAG: v23.1.0

      - name: Unit testing
        run: |
          pytest -v --cov=ansys.systemcoupling --cov-report xml --cov-report html:cov_html --cov-report term:skip-covered --cov-config=.coveragerc
        env:
          SYC_IMAGE_TAG: v23.1.0

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: HTML-coverage-syc
          path: cov_html
          retention-days: 7

  docs:
    name: Build Documentation
    needs: [doc-style, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-artifacts
          path: dist

      - name: Install pysystemcoupling with doc dependencies
        run: |
          wheel_name=`echo dist/*.whl`
          pip install -q --force-reinstall ${wheel_name}[doc] > /dev/null

      - name: Build HTML
        run: |
          make -C doc clean
          make -C doc html SPHINXERRWARN="-W"
        env:
          PYSYC_DOC_BUILD_VERSION: 23_1

      - name: Build PDF Documentation
        run: |
          sudo apt update
          sudo apt-get install -y texlive-latex-extra latexmk
          make -C doc pdf SPHINXERRWARN=""
        env:
          PYSYC_DOC_BUILD_VERSION: 23_1
          extra_mem_bot: 10000000
          extra_mem_top: 15000000


      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7


      - name: Upload PDF Documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-pdf
          path: doc/_build/latex/*.pdf
          retention-days: 7


  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [docs]
    steps:
      - name: Deploy the latest documentation
        uses: pyansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GH_TOKEN }}
          doc-artifact-name: "documentation-html"

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [test, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the private PyPI repository
        uses: pyansys/actions/release-pypi-private@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to the public PyPI repository"
        uses: pyansys/actions/release-pypi-public@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      # TODO: We can't use pyansys/actions/release-github as it assumes PDF doc.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: "Release to GitHub"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            documentation-htmlÂ 

  upload_docs_release:
    name: "Upload release documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: pyansys/actions/doc-deploy-stable@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
