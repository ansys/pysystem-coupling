name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: "3.8"
  PACKAGE_NAME: "ansys-systemcoupling-core"
  PACKAGE_NAMESPACE: "ansys.systemcoupling.core"
  DOCUMENTATION_CNAME: "systemcoupling.docs.pyansys.com"

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:

  doc-style:
    name: "Documentation style check"
    runs-on: ubuntu-latest
    steps:
      - name: "PySystemCoupling documentation style checks"
        uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: pyansys/actions/code-style@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  smoke-tests:
    name: Smoke Tests
    needs: [style]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Windows pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install pysystemcoupling
        run: make build-install

      - name: Install gRPC API from private PyPI (temp)
        run: |
          pip install ansys-api-systemcoupling -i https://PAT:${{ secrets.PYANSYS_PYPI_PRIVATE_PAT_RO }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/

      - name: Test import
        run: make test-import

  build_test:
    name: Build and Testing
    needs: [smoke-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Create initial wheel and install
        run: make build-install

      - name: Install gRPC API from private PyPI (temp)
        run: |
          pip install ansys-api-systemcoupling -i https://PAT:${{ secrets.PYANSYS_PYPI_PRIVATE_PAT_RO }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Pull docker image
        run: make docker-pull
        env:
          SYC_IMAGE_TAG: v23.1.0

      - name: Generate API code
        run: make generate-api
        env:
          SYC_LAUNCH_CONTAINER: 1
          SYC_IMAGE_TAG: v23.1.0

      - name: Rebuild/reinstall wheel containing generated API
        run: |
          rm -rf dist
          make build-install

      - name: Unit testing
        run: make unittest
        env:
          SYC_IMAGE_TAG: v23.1.0

      # Codecov not available until we are public
      #- name: Upload coverage to Codecov
      #  uses: codecov/codecov-action@v2

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: HTML-coverage-syc
          path: cov_html
          retention-days: 7

  docs:
    name: Build Documentation
    needs: [doc-style]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Create initial wheel and install
        run: make build-install

      - name: Install gRPC API from private PyPI (temp)
        run: |
          pip install ansys-api-systemcoupling -i https://PAT:${{ secrets.PYANSYS_PYPI_PRIVATE_PAT_RO }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Pull docker image
        run: make docker-pull
        env:
          SYC_IMAGE_TAG: v23.1.0

      - name: Generate API code
        run: make generate-api
        env:
          SYC_LAUNCH_CONTAINER: 1
          SYC_IMAGE_TAG: v23.1.0

      - name: Rebuild/reinstall wheel containing generated API
        run: |
          rm -rf dist
          make build-install

      - name: Build HTML
        run: |
          pip install .[doc]
          make -C doc clean
          make -C doc html SPHINXERRWARN="-W"
        env:
          PYSYC_DOC_BUILD_VERSION: 23_1

      # This is hanging on GitHub so disable for now
      # ============================================
      # - name: Build PDF Documentation
      #   run: |
      #     sudo apt update
      #     sudo apt-get install -y texlive-latex-extra latexmk
      #     make -C doc latexpdf SPHINXERRWARN=""

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: Documentation-html
          path: doc/_build/html
          retention-days: 7

      # - name: Upload PDF Documentation
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: Documentation-pdf
      #     path: doc/_build/latex/*.pdf
      #     retention-days: 7

  package:
    name: Package library
    needs: [build_test, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  upload_dev_docs:
    name: Upload dev documentation
    #if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: pyansys/actions/doc-deploy-dev@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GH_TOKEN }}

  Release:
    if: contains(github.ref, 'refs/tags')
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ansys-systemcoupling-core-wheel

      - uses: actions/download-artifact@v3
        with:
          name: Documentation-pdf

      - uses: actions/download-artifact@v3
        with:
          name: Documentation-html
          path: ~/html

      # list current directory
      - name: List directory structure
        run: ls -R

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          BRANCH: gh-pages
          FOLDER: ~/html
          CLEAN: true

      # note how we use the PyPI tokens
      - name: Upload to Azure PyPI (disabled)
        run: |
          pip install twine
          # twine upload --skip-existing ./**/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.zip
            ./**/*.pdf
